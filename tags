!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AES32	alsa/include/alsa/sound/hdspm.h	/^	AES32,$/;"	e	enum:hdspm_io_type
AIO	alsa/include/alsa/sound/hdspm.h	/^	AIO,$/;"	e	enum:hdspm_io_type
ALARM_MP3	config.h	31;"	d
ALEXAAGENT__AGENT_H	agent.h	2;"	d
ALEXAAGENT__AUDIO_H	audio.h	2;"	d
ALEXAAGENT__JSON_H	json.h	2;"	d
ALEXAAGENT__MULTIPART_H	multipart.h	2;"	d
ALEXAAGENT__SCHEDULER_H	scheduler.h	2;"	d
ALEXAAGENT__SESSION_H	session.h	2;"	d
ALEXAAGENT__TINY_HTTP_H	tiny_http.h	2;"	d
ALEXA_EVENT_CONFIG_H	config.h	6;"	d
ALuint	agent.h	14;"	d
APP_RUN_DIR	config.h	37;"	d
APP_VERSION	config.h	8;"	d
ASR_ENGINE	mw_asr.h	/^}ASR_ENGINE;$/;"	t	typeref:enum:__anon24
ASR_OPS	mw_asr.h	/^}ASR_OPS;$/;"	t	typeref:struct:__anon27
ATTRIBUTE_UNUSED	alsa/include/alsa/global.h	51;"	d
A_C_00000000	alsa/include/alsa/sound/emu10k1.h	197;"	d
A_C_00000001	alsa/include/alsa/sound/emu10k1.h	198;"	d
A_C_00000002	alsa/include/alsa/sound/emu10k1.h	199;"	d
A_C_00000003	alsa/include/alsa/sound/emu10k1.h	200;"	d
A_C_00000004	alsa/include/alsa/sound/emu10k1.h	201;"	d
A_C_00000008	alsa/include/alsa/sound/emu10k1.h	202;"	d
A_C_00000010	alsa/include/alsa/sound/emu10k1.h	203;"	d
A_C_00000020	alsa/include/alsa/sound/emu10k1.h	204;"	d
A_C_00000100	alsa/include/alsa/sound/emu10k1.h	205;"	d
A_C_00000800	alsa/include/alsa/sound/emu10k1.h	207;"	d
A_C_00010000	alsa/include/alsa/sound/emu10k1.h	206;"	d
A_C_00100000	alsa/include/alsa/sound/emu10k1.h	218;"	d
A_C_10000000	alsa/include/alsa/sound/emu10k1.h	208;"	d
A_C_20000000	alsa/include/alsa/sound/emu10k1.h	209;"	d
A_C_40000000	alsa/include/alsa/sound/emu10k1.h	210;"	d
A_C_4f1bbcdc	alsa/include/alsa/sound/emu10k1.h	216;"	d
A_C_5a7ef9db	alsa/include/alsa/sound/emu10k1.h	217;"	d
A_C_7fffffff	alsa/include/alsa/sound/emu10k1.h	212;"	d
A_C_80000000	alsa/include/alsa/sound/emu10k1.h	211;"	d
A_C_c0000000	alsa/include/alsa/sound/emu10k1.h	215;"	d
A_C_fffffffe	alsa/include/alsa/sound/emu10k1.h	214;"	d
A_C_ffffffff	alsa/include/alsa/sound/emu10k1.h	213;"	d
A_EXTIN	alsa/include/alsa/sound/emu10k1.h	94;"	d
A_EXTIN_AC97_L	alsa/include/alsa/sound/emu10k1.h	160;"	d
A_EXTIN_AC97_R	alsa/include/alsa/sound/emu10k1.h	161;"	d
A_EXTIN_ADC_L	alsa/include/alsa/sound/emu10k1.h	168;"	d
A_EXTIN_ADC_R	alsa/include/alsa/sound/emu10k1.h	169;"	d
A_EXTIN_AUX2_L	alsa/include/alsa/sound/emu10k1.h	170;"	d
A_EXTIN_AUX2_R	alsa/include/alsa/sound/emu10k1.h	171;"	d
A_EXTIN_LINE2_L	alsa/include/alsa/sound/emu10k1.h	166;"	d
A_EXTIN_LINE2_R	alsa/include/alsa/sound/emu10k1.h	167;"	d
A_EXTIN_OPT_SPDIF_L	alsa/include/alsa/sound/emu10k1.h	164;"	d
A_EXTIN_OPT_SPDIF_R	alsa/include/alsa/sound/emu10k1.h	165;"	d
A_EXTIN_SPDIF_CD_L	alsa/include/alsa/sound/emu10k1.h	162;"	d
A_EXTIN_SPDIF_CD_R	alsa/include/alsa/sound/emu10k1.h	163;"	d
A_EXTOUT	alsa/include/alsa/sound/emu10k1.h	95;"	d
A_EXTOUT_AC97_L	alsa/include/alsa/sound/emu10k1.h	190;"	d
A_EXTOUT_AC97_R	alsa/include/alsa/sound/emu10k1.h	191;"	d
A_EXTOUT_ACENTER	alsa/include/alsa/sound/emu10k1.h	184;"	d
A_EXTOUT_ADC_CAP_L	alsa/include/alsa/sound/emu10k1.h	192;"	d
A_EXTOUT_ADC_CAP_R	alsa/include/alsa/sound/emu10k1.h	193;"	d
A_EXTOUT_AFRONT_L	alsa/include/alsa/sound/emu10k1.h	182;"	d
A_EXTOUT_AFRONT_R	alsa/include/alsa/sound/emu10k1.h	183;"	d
A_EXTOUT_ALFE	alsa/include/alsa/sound/emu10k1.h	185;"	d
A_EXTOUT_AREAR_L	alsa/include/alsa/sound/emu10k1.h	188;"	d
A_EXTOUT_AREAR_R	alsa/include/alsa/sound/emu10k1.h	189;"	d
A_EXTOUT_ASIDE_L	alsa/include/alsa/sound/emu10k1.h	186;"	d
A_EXTOUT_ASIDE_R	alsa/include/alsa/sound/emu10k1.h	187;"	d
A_EXTOUT_CENTER	alsa/include/alsa/sound/emu10k1.h	176;"	d
A_EXTOUT_FRONT_L	alsa/include/alsa/sound/emu10k1.h	174;"	d
A_EXTOUT_FRONT_R	alsa/include/alsa/sound/emu10k1.h	175;"	d
A_EXTOUT_HEADPHONE_L	alsa/include/alsa/sound/emu10k1.h	178;"	d
A_EXTOUT_HEADPHONE_R	alsa/include/alsa/sound/emu10k1.h	179;"	d
A_EXTOUT_LFE	alsa/include/alsa/sound/emu10k1.h	177;"	d
A_EXTOUT_MIC_CAP	alsa/include/alsa/sound/emu10k1.h	194;"	d
A_EXTOUT_REAR_L	alsa/include/alsa/sound/emu10k1.h	180;"	d
A_EXTOUT_REAR_R	alsa/include/alsa/sound/emu10k1.h	181;"	d
A_FXBUS	alsa/include/alsa/sound/emu10k1.h	93;"	d
A_GPR	alsa/include/alsa/sound/emu10k1.h	96;"	d
A_GPR_ACCU	alsa/include/alsa/sound/emu10k1.h	219;"	d
A_GPR_COND	alsa/include/alsa/sound/emu10k1.h	220;"	d
A_GPR_DBAC	alsa/include/alsa/sound/emu10k1.h	224;"	d
A_GPR_DBACE	alsa/include/alsa/sound/emu10k1.h	225;"	d
A_GPR_IRQ	alsa/include/alsa/sound/emu10k1.h	223;"	d
A_GPR_NOISE0	alsa/include/alsa/sound/emu10k1.h	221;"	d
A_GPR_NOISE1	alsa/include/alsa/sound/emu10k1.h	222;"	d
BROADCAST_IP	tcpserver.cpp	32;"	d	file:
BROADCAST_PORT	tcpserver.cpp	33;"	d	file:
BUFFER_SIZE	config.h	41;"	d
Base64	Simple-WebSocket-Server/crypto.hpp	/^        class Base64 {$/;"	c	class:SimpleWeb::Crypto
CASE_INSENSITIVE_EQUALS_AND_HASH	Simple-WebSocket-Server/client_ws.hpp	17;"	d
CASE_INSENSITIVE_EQUALS_AND_HASH	Simple-WebSocket-Server/server_ws.hpp	21;"	d
CC_REG_BORROW	alsa/include/alsa/sound/emu10k1.h	100;"	d
CC_REG_MINUS	alsa/include/alsa/sound/emu10k1.h	101;"	d
CC_REG_NONZERO	alsa/include/alsa/sound/emu10k1.h	104;"	d
CC_REG_NORMALIZED	alsa/include/alsa/sound/emu10k1.h	99;"	d
CC_REG_SATURATE	alsa/include/alsa/sound/emu10k1.h	103;"	d
CC_REG_ZERO	alsa/include/alsa/sound/emu10k1.h	102;"	d
CHL_ALERT	mw_asr.h	/^	CHL_ALERT,               \/\/定时器或报警器$/;"	e	enum:__anon26
CHL_COUNT	mw_asr.h	/^	CHL_COUNT$/;"	e	enum:__anon26
CHL_PLAY	mw_asr.h	/^	CHL_PLAY,                \/\/音乐，Play Directive$/;"	e	enum:__anon26
CHL_SPEECH	mw_asr.h	/^	CHL_SPEECH = 0,          \/\/基本语音，Synchorinze directive$/;"	e	enum:__anon26
CLIENT_WSS_HPP	Simple-WebSocket-Server/client_wss.hpp	2;"	d
CLIENT_WS_HPP	Simple-WebSocket-Server/client_ws.hpp	2;"	d
CONFIG_RKEY_TYPE	tcpserver.cpp	/^}CONFIG_RKEY_TYPE;$/;"	t	typeref:enum:__anon33	file:
CRYPTO_HPP	Simple-WebSocket-Server/crypto.hpp	2;"	d
C_00000000	alsa/include/alsa/sound/emu10k1.h	59;"	d
C_00000001	alsa/include/alsa/sound/emu10k1.h	60;"	d
C_00000002	alsa/include/alsa/sound/emu10k1.h	61;"	d
C_00000003	alsa/include/alsa/sound/emu10k1.h	62;"	d
C_00000004	alsa/include/alsa/sound/emu10k1.h	63;"	d
C_00000008	alsa/include/alsa/sound/emu10k1.h	64;"	d
C_00000010	alsa/include/alsa/sound/emu10k1.h	65;"	d
C_00000020	alsa/include/alsa/sound/emu10k1.h	66;"	d
C_00000100	alsa/include/alsa/sound/emu10k1.h	67;"	d
C_00010000	alsa/include/alsa/sound/emu10k1.h	68;"	d
C_00080000	alsa/include/alsa/sound/emu10k1.h	69;"	d
C_00100000	alsa/include/alsa/sound/emu10k1.h	80;"	d
C_10000000	alsa/include/alsa/sound/emu10k1.h	70;"	d
C_20000000	alsa/include/alsa/sound/emu10k1.h	71;"	d
C_40000000	alsa/include/alsa/sound/emu10k1.h	72;"	d
C_4f1bbcdc	alsa/include/alsa/sound/emu10k1.h	78;"	d
C_5a7ef9db	alsa/include/alsa/sound/emu10k1.h	79;"	d
C_7fffffff	alsa/include/alsa/sound/emu10k1.h	74;"	d
C_80000000	alsa/include/alsa/sound/emu10k1.h	73;"	d
C_c0000000	alsa/include/alsa/sound/emu10k1.h	77;"	d
C_fffffffe	alsa/include/alsa/sound/emu10k1.h	76;"	d
C_ffffffff	alsa/include/alsa/sound/emu10k1.h	75;"	d
CmdBufUart	tcpserver.cpp	/^unsigned char CmdBufUart[RECVLEN];$/;"	v
Config	Simple-WebSocket-Server/server_ws.hpp	/^            Config(unsigned short port): port(port) {}$/;"	f	class:SimpleWeb::SocketServerBase::Config
Config	Simple-WebSocket-Server/server_ws.hpp	/^        class Config {$/;"	c	class:SimpleWeb::SocketServerBase
Connection	Simple-WebSocket-Server/client_ws.hpp	/^            Connection(socket_type* socket): socket(socket), strand(socket->get_io_service()), closed(false) {}$/;"	f	class:SimpleWeb::SocketClientBase::Connection
Connection	Simple-WebSocket-Server/client_ws.hpp	/^        class Connection {$/;"	c	class:SimpleWeb::SocketClientBase
Connection	Simple-WebSocket-Server/server_ws.hpp	/^            Connection(const std::shared_ptr<socket_type> &socket): socket(socket), strand(socket->get_io_service()), closed(false) {}$/;"	f	class:SimpleWeb::SocketServerBase::Connection
Connection	Simple-WebSocket-Server/server_ws.hpp	/^            Connection(socket_type *socket): socket(socket), strand(socket->get_io_service()), closed(false) {}$/;"	f	class:SimpleWeb::SocketServerBase::Connection
Connection	Simple-WebSocket-Server/server_ws.hpp	/^        class Connection {$/;"	c	class:SimpleWeb::SocketServerBase
Crypto	Simple-WebSocket-Server/crypto.hpp	/^    class Crypto {$/;"	c	namespace:SimpleWeb
DEB_LINE	session.h	33;"	d
DEINIT	picojson/picojson.h	281;"	d
DEINIT	picojson/picojson.h	288;"	d
DEPRECATED	Simple-WebSocket-Server/client_ws.hpp	39;"	d
DEPRECATED	Simple-WebSocket-Server/client_ws.hpp	41;"	d
DEPRECATED	Simple-WebSocket-Server/client_ws.hpp	43;"	d
DEPRECATED	Simple-WebSocket-Server/server_ws.hpp	52;"	d
DEPRECATED	Simple-WebSocket-Server/server_ws.hpp	54;"	d
DEPRECATED	Simple-WebSocket-Server/server_ws.hpp	56;"	d
DEV_CONFIG_FILE	config.h	20;"	d
DEV_CONFIG_FILE_JSON	config.h	29;"	d
Digiface	alsa/include/alsa/sound/hdsp.h	/^	Digiface,$/;"	e	enum:__anon7
EMU10K1_CARD_CREATIVE	alsa/include/alsa/sound/emu10k1.h	32;"	d
EMU10K1_CARD_EMUAPS	alsa/include/alsa/sound/emu10k1.h	33;"	d
EMU10K1_CTL_ELEM_IFACE_MIXER	alsa/include/alsa/sound/emu10k1.h	/^	EMU10K1_CTL_ELEM_IFACE_MIXER = 2,	\/* virtual mixer device *\/$/;"	e	enum:emu10k1_ctl_elem_iface
EMU10K1_CTL_ELEM_IFACE_PCM	alsa/include/alsa/sound/emu10k1.h	/^	EMU10K1_CTL_ELEM_IFACE_PCM = 3,		\/* PCM device *\/$/;"	e	enum:emu10k1_ctl_elem_iface
EMU10K1_DBG_CONDITION_CODE	alsa/include/alsa/sound/emu10k1.h	233;"	d
EMU10K1_DBG_SATURATION_ADDR	alsa/include/alsa/sound/emu10k1.h	230;"	d
EMU10K1_DBG_SATURATION_OCCURED	alsa/include/alsa/sound/emu10k1.h	229;"	d
EMU10K1_DBG_SINGLE_STEP	alsa/include/alsa/sound/emu10k1.h	231;"	d
EMU10K1_DBG_SINGLE_STEP_ADDR	alsa/include/alsa/sound/emu10k1.h	234;"	d
EMU10K1_DBG_STEP	alsa/include/alsa/sound/emu10k1.h	232;"	d
EMU10K1_DBG_ZC	alsa/include/alsa/sound/emu10k1.h	228;"	d
EMU10K1_FX8010_PCM_COUNT	alsa/include/alsa/sound/emu10k1.h	35;"	d
EMU10K1_GPR_TRANSLATION_BASS	alsa/include/alsa/sound/emu10k1.h	256;"	d
EMU10K1_GPR_TRANSLATION_NONE	alsa/include/alsa/sound/emu10k1.h	254;"	d
EMU10K1_GPR_TRANSLATION_ONOFF	alsa/include/alsa/sound/emu10k1.h	258;"	d
EMU10K1_GPR_TRANSLATION_TABLE100	alsa/include/alsa/sound/emu10k1.h	255;"	d
EMU10K1_GPR_TRANSLATION_TREBLE	alsa/include/alsa/sound/emu10k1.h	257;"	d
EQ_COMMAND	tcpserver.cpp	/^    EQ_COMMAND=0x90,$/;"	e	enum:__anon33	file:
EQ_GETDEVINFO	tcpserver.cpp	/^    EQ_GETDEVINFO=0x9a,$/;"	e	enum:__anon33	file:
EQ_INPUTSIG	tcpserver.cpp	/^    EQ_INPUTSIG,$/;"	e	enum:__anon33	file:
EQ_SETINPUT	tcpserver.cpp	/^    EQ_SETINPUT,$/;"	e	enum:__anon33	file:
EQ_SETPOLARITY	tcpserver.cpp	/^    EQ_SETPOLARITY,$/;"	e	enum:__anon33	file:
EQ_SETPREMIX	tcpserver.cpp	/^    EQ_SETPREMIX,$/;"	e	enum:__anon33	file:
EQ_SETSUBWOOFER	tcpserver.cpp	/^    EQ_SETSUBWOOFER,$/;"	e	enum:__anon33	file:
EQ_SOUNDBL	tcpserver.cpp	/^    EQ_SOUNDBL,$/;"	e	enum:__anon33	file:
EQ_SOUNDDB	tcpserver.cpp	/^    EQ_SOUNDDB,$/;"	e	enum:__anon33	file:
EQ_SOUNDEFFECT	tcpserver.cpp	/^    EQ_SOUNDEFFECT,$/;"	e	enum:__anon33	file:
EQ_SOUNDVOL	tcpserver.cpp	/^    EQ_SOUNDVOL,$/;"	e	enum:__anon33	file:
ETRAM_ADDR	alsa/include/alsa/sound/emu10k1.h	91;"	d
ETRAM_DATA	alsa/include/alsa/sound/emu10k1.h	89;"	d
EXLENLEN	tcpserver.cpp	29;"	d	file:
EXTIN	alsa/include/alsa/sound/emu10k1.h	57;"	d
EXTIN_AC97_L	alsa/include/alsa/sound/emu10k1.h	125;"	d
EXTIN_AC97_R	alsa/include/alsa/sound/emu10k1.h	126;"	d
EXTIN_COAX_SPDIF_L	alsa/include/alsa/sound/emu10k1.h	135;"	d
EXTIN_COAX_SPDIF_R	alsa/include/alsa/sound/emu10k1.h	136;"	d
EXTIN_LINE1_L	alsa/include/alsa/sound/emu10k1.h	133;"	d
EXTIN_LINE1_R	alsa/include/alsa/sound/emu10k1.h	134;"	d
EXTIN_LINE2_L	alsa/include/alsa/sound/emu10k1.h	137;"	d
EXTIN_LINE2_R	alsa/include/alsa/sound/emu10k1.h	138;"	d
EXTIN_SPDIF_CD_L	alsa/include/alsa/sound/emu10k1.h	127;"	d
EXTIN_SPDIF_CD_R	alsa/include/alsa/sound/emu10k1.h	128;"	d
EXTIN_TOSLINK_L	alsa/include/alsa/sound/emu10k1.h	131;"	d
EXTIN_TOSLINK_R	alsa/include/alsa/sound/emu10k1.h	132;"	d
EXTIN_ZOOM_L	alsa/include/alsa/sound/emu10k1.h	129;"	d
EXTIN_ZOOM_R	alsa/include/alsa/sound/emu10k1.h	130;"	d
EXTOUT	alsa/include/alsa/sound/emu10k1.h	58;"	d
EXTOUT_AC97_CENTER	alsa/include/alsa/sound/emu10k1.h	145;"	d
EXTOUT_AC97_L	alsa/include/alsa/sound/emu10k1.h	141;"	d
EXTOUT_AC97_LFE	alsa/include/alsa/sound/emu10k1.h	146;"	d
EXTOUT_AC97_R	alsa/include/alsa/sound/emu10k1.h	142;"	d
EXTOUT_AC97_REAR_L	alsa/include/alsa/sound/emu10k1.h	154;"	d
EXTOUT_AC97_REAR_R	alsa/include/alsa/sound/emu10k1.h	155;"	d
EXTOUT_ACENTER	alsa/include/alsa/sound/emu10k1.h	156;"	d
EXTOUT_ADC_CAP_L	alsa/include/alsa/sound/emu10k1.h	151;"	d
EXTOUT_ADC_CAP_R	alsa/include/alsa/sound/emu10k1.h	152;"	d
EXTOUT_ALFE	alsa/include/alsa/sound/emu10k1.h	157;"	d
EXTOUT_HEADPHONE_L	alsa/include/alsa/sound/emu10k1.h	147;"	d
EXTOUT_HEADPHONE_R	alsa/include/alsa/sound/emu10k1.h	148;"	d
EXTOUT_MIC_CAP	alsa/include/alsa/sound/emu10k1.h	153;"	d
EXTOUT_REAR_L	alsa/include/alsa/sound/emu10k1.h	149;"	d
EXTOUT_REAR_R	alsa/include/alsa/sound/emu10k1.h	150;"	d
EXTOUT_TOSLINK_L	alsa/include/alsa/sound/emu10k1.h	143;"	d
EXTOUT_TOSLINK_R	alsa/include/alsa/sound/emu10k1.h	144;"	d
Endpoint	Simple-WebSocket-Server/server_ws.hpp	/^        class Endpoint {$/;"	c	class:SimpleWeb::SocketServerBase
FILE_ALERTS_JSON	config.h	45;"	d
FILE_SESSION_JSON	config.h	44;"	d
FILE_SPEAKER_JSON	config.h	46;"	d
FILE_TOKEN	config.h	47;"	d
FM_KEY_2OP	alsa/include/alsa/sound/asound_fm.h	122;"	d
FM_KEY_4OP	alsa/include/alsa/sound/asound_fm.h	123;"	d
FM_KEY_SBI	alsa/include/alsa/sound/asound_fm.h	121;"	d
FXBUS	alsa/include/alsa/sound/emu10k1.h	56;"	d
FXBUS_MIDI_CHORUS	alsa/include/alsa/sound/emu10k1.h	118;"	d
FXBUS_MIDI_LEFT	alsa/include/alsa/sound/emu10k1.h	111;"	d
FXBUS_MIDI_REVERB	alsa/include/alsa/sound/emu10k1.h	117;"	d
FXBUS_MIDI_RIGHT	alsa/include/alsa/sound/emu10k1.h	112;"	d
FXBUS_PCM_CENTER	alsa/include/alsa/sound/emu10k1.h	113;"	d
FXBUS_PCM_LEFT	alsa/include/alsa/sound/emu10k1.h	107;"	d
FXBUS_PCM_LEFT_FRONT	alsa/include/alsa/sound/emu10k1.h	115;"	d
FXBUS_PCM_LEFT_REAR	alsa/include/alsa/sound/emu10k1.h	109;"	d
FXBUS_PCM_LEFT_SIDE	alsa/include/alsa/sound/emu10k1.h	119;"	d
FXBUS_PCM_LFE	alsa/include/alsa/sound/emu10k1.h	114;"	d
FXBUS_PCM_RIGHT	alsa/include/alsa/sound/emu10k1.h	108;"	d
FXBUS_PCM_RIGHT_FRONT	alsa/include/alsa/sound/emu10k1.h	116;"	d
FXBUS_PCM_RIGHT_REAR	alsa/include/alsa/sound/emu10k1.h	110;"	d
FXBUS_PCM_RIGHT_SIDE	alsa/include/alsa/sound/emu10k1.h	120;"	d
FXBUS_PT_LEFT	alsa/include/alsa/sound/emu10k1.h	121;"	d
FXBUS_PT_RIGHT	alsa/include/alsa/sound/emu10k1.h	122;"	d
FindFirstTag	tcpserver.cpp	/^int FindFirstTag(unsigned char * readbuf,int len)$/;"	f
GET	picojson/picojson.h	357;"	d
GET	picojson/picojson.h	378;"	d
GPIO_COMMAND	tcpserver.cpp	/^    GPIO_COMMAND=0xFA,$/;"	e	enum:__anon33	file:
GPIO_LONG_COMMAND	tcpserver.cpp	/^    GPIO_LONG_COMMAND=0xFB$/;"	e	enum:__anon33	file:
GPR	alsa/include/alsa/sound/emu10k1.h	87;"	d
GPR_ACCU	alsa/include/alsa/sound/emu10k1.h	81;"	d
GPR_COND	alsa/include/alsa/sound/emu10k1.h	82;"	d
GPR_DBAC	alsa/include/alsa/sound/emu10k1.h	86;"	d
GPR_IRQ	alsa/include/alsa/sound/emu10k1.h	85;"	d
GPR_NOISE0	alsa/include/alsa/sound/emu10k1.h	83;"	d
GPR_NOISE1	alsa/include/alsa/sound/emu10k1.h	84;"	d
H9632	alsa/include/alsa/sound/hdsp.h	/^	H9632,$/;"	e	enum:__anon7
H9652	alsa/include/alsa/sound/hdsp.h	/^	H9652,$/;"	e	enum:__anon7
HAVE_INTTYPES_H	configure.h	5;"	d
HAVE_MEMORY_H	configure.h	8;"	d
HAVE_STDINT_H	configure.h	11;"	d
HAVE_STDLIB_H	configure.h	14;"	d
HAVE_STRINGS_H	configure.h	17;"	d
HAVE_STRING_H	configure.h	20;"	d
HAVE_SYS_STAT_H	configure.h	23;"	d
HAVE_SYS_TYPES_H	configure.h	26;"	d
HAVE_UNISTD_H	configure.h	29;"	d
HDSPM_ADDON_TCO	alsa/include/alsa/sound/hdspm.h	178;"	d
HDSPM_MAX_CHANNELS	alsa/include/alsa/sound/hdspm.h	24;"	d
HDSPM_MIXER_CHANNELS	alsa/include/alsa/sound/hdspm.h	203;"	d
HDSP_IO_Type	alsa/include/alsa/sound/hdsp.h	/^} HDSP_IO_Type;$/;"	t	typeref:enum:__anon7
HDSP_MATRIX_MIXER_SIZE	alsa/include/alsa/sound/hdsp.h	24;"	d
IEC958_AES0_CON_EMPHASIS	alsa/include/alsa/asoundef.h	55;"	d
IEC958_AES0_CON_EMPHASIS_5015	alsa/include/alsa/asoundef.h	57;"	d
IEC958_AES0_CON_EMPHASIS_NONE	alsa/include/alsa/asoundef.h	56;"	d
IEC958_AES0_CON_MODE	alsa/include/alsa/asoundef.h	58;"	d
IEC958_AES0_CON_NOT_COPYRIGHT	alsa/include/alsa/asoundef.h	54;"	d
IEC958_AES0_NONAUDIO	alsa/include/alsa/asoundef.h	42;"	d
IEC958_AES0_PROFESSIONAL	alsa/include/alsa/asoundef.h	41;"	d
IEC958_AES0_PRO_EMPHASIS	alsa/include/alsa/asoundef.h	43;"	d
IEC958_AES0_PRO_EMPHASIS_5015	alsa/include/alsa/asoundef.h	46;"	d
IEC958_AES0_PRO_EMPHASIS_CCITT	alsa/include/alsa/asoundef.h	47;"	d
IEC958_AES0_PRO_EMPHASIS_NONE	alsa/include/alsa/asoundef.h	45;"	d
IEC958_AES0_PRO_EMPHASIS_NOTID	alsa/include/alsa/asoundef.h	44;"	d
IEC958_AES0_PRO_FREQ_UNLOCKED	alsa/include/alsa/asoundef.h	48;"	d
IEC958_AES0_PRO_FS	alsa/include/alsa/asoundef.h	49;"	d
IEC958_AES0_PRO_FS_32000	alsa/include/alsa/asoundef.h	53;"	d
IEC958_AES0_PRO_FS_44100	alsa/include/alsa/asoundef.h	51;"	d
IEC958_AES0_PRO_FS_48000	alsa/include/alsa/asoundef.h	52;"	d
IEC958_AES0_PRO_FS_NOTID	alsa/include/alsa/asoundef.h	50;"	d
IEC958_AES1_CON_ADC	alsa/include/alsa/asoundef.h	111;"	d
IEC958_AES1_CON_ADC_COPYRIGHT	alsa/include/alsa/asoundef.h	115;"	d
IEC958_AES1_CON_ADC_COPYRIGHT_ID	alsa/include/alsa/asoundef.h	114;"	d
IEC958_AES1_CON_ADC_COPYRIGHT_MASK	alsa/include/alsa/asoundef.h	113;"	d
IEC958_AES1_CON_ADC_COPYRIGHT_OTHER	alsa/include/alsa/asoundef.h	116;"	d
IEC958_AES1_CON_ADC_ID	alsa/include/alsa/asoundef.h	110;"	d
IEC958_AES1_CON_ADC_MASK	alsa/include/alsa/asoundef.h	109;"	d
IEC958_AES1_CON_ADC_OTHER	alsa/include/alsa/asoundef.h	112;"	d
IEC958_AES1_CON_BROADCAST1_ID	alsa/include/alsa/asoundef.h	95;"	d
IEC958_AES1_CON_BROADCAST1_MASK	alsa/include/alsa/asoundef.h	94;"	d
IEC958_AES1_CON_BROADCAST1_OTHER	alsa/include/alsa/asoundef.h	101;"	d
IEC958_AES1_CON_BROADCAST2_ID	alsa/include/alsa/asoundef.h	103;"	d
IEC958_AES1_CON_BROADCAST2_MASK	alsa/include/alsa/asoundef.h	102;"	d
IEC958_AES1_CON_CATEGORY	alsa/include/alsa/asoundef.h	70;"	d
IEC958_AES1_CON_DAB_EUROPE	alsa/include/alsa/asoundef.h	97;"	d
IEC958_AES1_CON_DAB_JAPAN	alsa/include/alsa/asoundef.h	96;"	d
IEC958_AES1_CON_DAB_USA	alsa/include/alsa/asoundef.h	98;"	d
IEC958_AES1_CON_DAT	alsa/include/alsa/asoundef.h	89;"	d
IEC958_AES1_CON_DCC	alsa/include/alsa/asoundef.h	91;"	d
IEC958_AES1_CON_DIGDIGCONV_ID	alsa/include/alsa/asoundef.h	80;"	d
IEC958_AES1_CON_DIGDIGCONV_MASK	alsa/include/alsa/asoundef.h	79;"	d
IEC958_AES1_CON_DIGDIGCONV_OTHER	alsa/include/alsa/asoundef.h	86;"	d
IEC958_AES1_CON_DSP	alsa/include/alsa/asoundef.h	85;"	d
IEC958_AES1_CON_DVD	alsa/include/alsa/asoundef.h	77;"	d
IEC958_AES1_CON_EXPERIMENTAL	alsa/include/alsa/asoundef.h	121;"	d
IEC958_AES1_CON_GENERAL	alsa/include/alsa/asoundef.h	71;"	d
IEC958_AES1_CON_IEC62105	alsa/include/alsa/asoundef.h	100;"	d
IEC958_AES1_CON_IEC908_CD	alsa/include/alsa/asoundef.h	74;"	d
IEC958_AES1_CON_LASEROPT_ID	alsa/include/alsa/asoundef.h	73;"	d
IEC958_AES1_CON_LASEROPT_MASK	alsa/include/alsa/asoundef.h	72;"	d
IEC958_AES1_CON_LASTEROPT_OTHER	alsa/include/alsa/asoundef.h	78;"	d
IEC958_AES1_CON_MAGNETIC_DISC	alsa/include/alsa/asoundef.h	92;"	d
IEC958_AES1_CON_MAGNETIC_ID	alsa/include/alsa/asoundef.h	88;"	d
IEC958_AES1_CON_MAGNETIC_MASK	alsa/include/alsa/asoundef.h	87;"	d
IEC958_AES1_CON_MAGNETIC_OTHER	alsa/include/alsa/asoundef.h	93;"	d
IEC958_AES1_CON_MICROPHONE	alsa/include/alsa/asoundef.h	107;"	d
IEC958_AES1_CON_MINI_DISC	alsa/include/alsa/asoundef.h	76;"	d
IEC958_AES1_CON_MIXER	alsa/include/alsa/asoundef.h	82;"	d
IEC958_AES1_CON_MUSICAL_ID	alsa/include/alsa/asoundef.h	105;"	d
IEC958_AES1_CON_MUSICAL_MASK	alsa/include/alsa/asoundef.h	104;"	d
IEC958_AES1_CON_MUSICAL_OTHER	alsa/include/alsa/asoundef.h	108;"	d
IEC958_AES1_CON_NON_IEC908_CD	alsa/include/alsa/asoundef.h	75;"	d
IEC958_AES1_CON_ORIGINAL	alsa/include/alsa/asoundef.h	122;"	d
IEC958_AES1_CON_PCM_CODER	alsa/include/alsa/asoundef.h	81;"	d
IEC958_AES1_CON_RATE_CONVERTER	alsa/include/alsa/asoundef.h	83;"	d
IEC958_AES1_CON_SAMPLER	alsa/include/alsa/asoundef.h	84;"	d
IEC958_AES1_CON_SOFTWARE	alsa/include/alsa/asoundef.h	99;"	d
IEC958_AES1_CON_SOLIDMEM_DIGITAL_RECORDER_PLAYER	alsa/include/alsa/asoundef.h	119;"	d
IEC958_AES1_CON_SOLIDMEM_ID	alsa/include/alsa/asoundef.h	118;"	d
IEC958_AES1_CON_SOLIDMEM_MASK	alsa/include/alsa/asoundef.h	117;"	d
IEC958_AES1_CON_SOLIDMEM_OTHER	alsa/include/alsa/asoundef.h	120;"	d
IEC958_AES1_CON_SYNTHESIZER	alsa/include/alsa/asoundef.h	106;"	d
IEC958_AES1_CON_VCR	alsa/include/alsa/asoundef.h	90;"	d
IEC958_AES1_PRO_MODE	alsa/include/alsa/asoundef.h	59;"	d
IEC958_AES1_PRO_MODE_BYTE3	alsa/include/alsa/asoundef.h	65;"	d
IEC958_AES1_PRO_MODE_NOTID	alsa/include/alsa/asoundef.h	60;"	d
IEC958_AES1_PRO_MODE_PRIMARY	alsa/include/alsa/asoundef.h	64;"	d
IEC958_AES1_PRO_MODE_SINGLE	alsa/include/alsa/asoundef.h	62;"	d
IEC958_AES1_PRO_MODE_STEREOPHONIC	alsa/include/alsa/asoundef.h	61;"	d
IEC958_AES1_PRO_MODE_TWO	alsa/include/alsa/asoundef.h	63;"	d
IEC958_AES1_PRO_USERBITS	alsa/include/alsa/asoundef.h	66;"	d
IEC958_AES1_PRO_USERBITS_192	alsa/include/alsa/asoundef.h	68;"	d
IEC958_AES1_PRO_USERBITS_NOTID	alsa/include/alsa/asoundef.h	67;"	d
IEC958_AES1_PRO_USERBITS_UDEF	alsa/include/alsa/asoundef.h	69;"	d
IEC958_AES2_CON_CHANNEL	alsa/include/alsa/asoundef.h	135;"	d
IEC958_AES2_CON_CHANNEL_UNSPEC	alsa/include/alsa/asoundef.h	136;"	d
IEC958_AES2_CON_SOURCE	alsa/include/alsa/asoundef.h	133;"	d
IEC958_AES2_CON_SOURCE_UNSPEC	alsa/include/alsa/asoundef.h	134;"	d
IEC958_AES2_PRO_SBITS	alsa/include/alsa/asoundef.h	123;"	d
IEC958_AES2_PRO_SBITS_20	alsa/include/alsa/asoundef.h	124;"	d
IEC958_AES2_PRO_SBITS_24	alsa/include/alsa/asoundef.h	125;"	d
IEC958_AES2_PRO_SBITS_UDEF	alsa/include/alsa/asoundef.h	126;"	d
IEC958_AES2_PRO_WORDLEN	alsa/include/alsa/asoundef.h	127;"	d
IEC958_AES2_PRO_WORDLEN_20_16	alsa/include/alsa/asoundef.h	132;"	d
IEC958_AES2_PRO_WORDLEN_22_18	alsa/include/alsa/asoundef.h	129;"	d
IEC958_AES2_PRO_WORDLEN_23_19	alsa/include/alsa/asoundef.h	130;"	d
IEC958_AES2_PRO_WORDLEN_24_20	alsa/include/alsa/asoundef.h	131;"	d
IEC958_AES2_PRO_WORDLEN_NOTID	alsa/include/alsa/asoundef.h	128;"	d
IEC958_AES3_CON_CLOCK	alsa/include/alsa/asoundef.h	149;"	d
IEC958_AES3_CON_CLOCK_1000PPM	alsa/include/alsa/asoundef.h	150;"	d
IEC958_AES3_CON_CLOCK_50PPM	alsa/include/alsa/asoundef.h	151;"	d
IEC958_AES3_CON_CLOCK_VARIABLE	alsa/include/alsa/asoundef.h	152;"	d
IEC958_AES3_CON_FS	alsa/include/alsa/asoundef.h	137;"	d
IEC958_AES3_CON_FS_176400	alsa/include/alsa/asoundef.h	147;"	d
IEC958_AES3_CON_FS_192000	alsa/include/alsa/asoundef.h	148;"	d
IEC958_AES3_CON_FS_22050	alsa/include/alsa/asoundef.h	142;"	d
IEC958_AES3_CON_FS_24000	alsa/include/alsa/asoundef.h	143;"	d
IEC958_AES3_CON_FS_32000	alsa/include/alsa/asoundef.h	141;"	d
IEC958_AES3_CON_FS_44100	alsa/include/alsa/asoundef.h	138;"	d
IEC958_AES3_CON_FS_48000	alsa/include/alsa/asoundef.h	140;"	d
IEC958_AES3_CON_FS_768000	alsa/include/alsa/asoundef.h	145;"	d
IEC958_AES3_CON_FS_88200	alsa/include/alsa/asoundef.h	144;"	d
IEC958_AES3_CON_FS_96000	alsa/include/alsa/asoundef.h	146;"	d
IEC958_AES3_CON_FS_NOTID	alsa/include/alsa/asoundef.h	139;"	d
IEC958_AES4_CON_MAX_WORDLEN_24	alsa/include/alsa/asoundef.h	153;"	d
IEC958_AES4_CON_ORIGFS	alsa/include/alsa/asoundef.h	161;"	d
IEC958_AES4_CON_ORIGFS_11025	alsa/include/alsa/asoundef.h	171;"	d
IEC958_AES4_CON_ORIGFS_12000	alsa/include/alsa/asoundef.h	164;"	d
IEC958_AES4_CON_ORIGFS_16000	alsa/include/alsa/asoundef.h	169;"	d
IEC958_AES4_CON_ORIGFS_176400	alsa/include/alsa/asoundef.h	165;"	d
IEC958_AES4_CON_ORIGFS_192000	alsa/include/alsa/asoundef.h	163;"	d
IEC958_AES4_CON_ORIGFS_22050	alsa/include/alsa/asoundef.h	172;"	d
IEC958_AES4_CON_ORIGFS_24000	alsa/include/alsa/asoundef.h	170;"	d
IEC958_AES4_CON_ORIGFS_32000	alsa/include/alsa/asoundef.h	173;"	d
IEC958_AES4_CON_ORIGFS_44100	alsa/include/alsa/asoundef.h	175;"	d
IEC958_AES4_CON_ORIGFS_48000	alsa/include/alsa/asoundef.h	174;"	d
IEC958_AES4_CON_ORIGFS_8000	alsa/include/alsa/asoundef.h	167;"	d
IEC958_AES4_CON_ORIGFS_88200	alsa/include/alsa/asoundef.h	168;"	d
IEC958_AES4_CON_ORIGFS_96000	alsa/include/alsa/asoundef.h	166;"	d
IEC958_AES4_CON_ORIGFS_NOTID	alsa/include/alsa/asoundef.h	162;"	d
IEC958_AES4_CON_WORDLEN	alsa/include/alsa/asoundef.h	154;"	d
IEC958_AES4_CON_WORDLEN_20_16	alsa/include/alsa/asoundef.h	156;"	d
IEC958_AES4_CON_WORDLEN_21_17	alsa/include/alsa/asoundef.h	160;"	d
IEC958_AES4_CON_WORDLEN_22_18	alsa/include/alsa/asoundef.h	157;"	d
IEC958_AES4_CON_WORDLEN_23_19	alsa/include/alsa/asoundef.h	158;"	d
IEC958_AES4_CON_WORDLEN_24_20	alsa/include/alsa/asoundef.h	159;"	d
IEC958_AES4_CON_WORDLEN_NOTID	alsa/include/alsa/asoundef.h	155;"	d
IEC958_AES5_CON_CGMSA	alsa/include/alsa/asoundef.h	176;"	d
IEC958_AES5_CON_CGMSA_COPYFREELY	alsa/include/alsa/asoundef.h	177;"	d
IEC958_AES5_CON_CGMSA_COPYNEVER	alsa/include/alsa/asoundef.h	180;"	d
IEC958_AES5_CON_CGMSA_COPYNOMORE	alsa/include/alsa/asoundef.h	179;"	d
IEC958_AES5_CON_CGMSA_COPYONCE	alsa/include/alsa/asoundef.h	178;"	d
IFLY	mw_asr.h	/^	IFLY,$/;"	e	enum:__anon24
INDENT_WIDTH	picojson/picojson.h	/^enum { INDENT_WIDTH = 2 };$/;"	e	enum:picojson::__anon31
INIT	picojson/picojson.h	202;"	d
INIT	picojson/picojson.h	214;"	d
INIT	picojson/picojson.h	300;"	d
INIT	picojson/picojson.h	307;"	d
IS	picojson/picojson.h	336;"	d
IS	picojson/picojson.h	348;"	d
IS	picojson/picojson.h	866;"	d
IS	picojson/picojson.h	876;"	d
ITRAM_ADDR	alsa/include/alsa/sound/emu10k1.h	90;"	d
ITRAM_DATA	alsa/include/alsa/sound/emu10k1.h	88;"	d
MADI	alsa/include/alsa/sound/hdspm.h	/^	MADI,$/;"	e	enum:hdspm_io_type
MADIface	alsa/include/alsa/sound/hdspm.h	/^	MADIface,$/;"	e	enum:hdspm_io_type
MAP	picojson/picojson.h	519;"	d
MAP	picojson/picojson.h	531;"	d
MAP	picojson/picojson.h	778;"	d
MAP	picojson/picojson.h	790;"	d
MAX_COMMON_ID	tcpserver.cpp	/^    MAX_COMMON_ID=0xAF,$/;"	e	enum:__anon33	file:
MEDIAWIN	mw_asr.h	/^	MEDIAWIN = 0,$/;"	e	enum:__anon24
MEMFILE	picojson/examples/github-issues.cc	/^} MEMFILE;$/;"	t	typeref:struct:__anon28	file:
MEM_TYPE_HEAP	ringbuffer.h	9;"	d
MIDI_CHANNELS	alsa/include/alsa/asoundef.h	190;"	d
MIDI_CMD_BENDER	alsa/include/alsa/asoundef.h	205;"	d
MIDI_CMD_CHANNEL_PRESSURE	alsa/include/alsa/asoundef.h	204;"	d
MIDI_CMD_COMMON_CLOCK	alsa/include/alsa/asoundef.h	213;"	d
MIDI_CMD_COMMON_CONTINUE	alsa/include/alsa/asoundef.h	215;"	d
MIDI_CMD_COMMON_MTC_QUARTER	alsa/include/alsa/asoundef.h	208;"	d
MIDI_CMD_COMMON_RESET	alsa/include/alsa/asoundef.h	218;"	d
MIDI_CMD_COMMON_SENSING	alsa/include/alsa/asoundef.h	217;"	d
MIDI_CMD_COMMON_SONG_POS	alsa/include/alsa/asoundef.h	209;"	d
MIDI_CMD_COMMON_SONG_SELECT	alsa/include/alsa/asoundef.h	210;"	d
MIDI_CMD_COMMON_START	alsa/include/alsa/asoundef.h	214;"	d
MIDI_CMD_COMMON_STOP	alsa/include/alsa/asoundef.h	216;"	d
MIDI_CMD_COMMON_SYSEX	alsa/include/alsa/asoundef.h	207;"	d
MIDI_CMD_COMMON_SYSEX_END	alsa/include/alsa/asoundef.h	212;"	d
MIDI_CMD_COMMON_TUNE_REQUEST	alsa/include/alsa/asoundef.h	211;"	d
MIDI_CMD_CONTROL	alsa/include/alsa/asoundef.h	202;"	d
MIDI_CMD_NOTE_OFF	alsa/include/alsa/asoundef.h	199;"	d
MIDI_CMD_NOTE_ON	alsa/include/alsa/asoundef.h	200;"	d
MIDI_CMD_NOTE_PRESSURE	alsa/include/alsa/asoundef.h	201;"	d
MIDI_CMD_PGM_CHANGE	alsa/include/alsa/asoundef.h	203;"	d
MIDI_CTL_ALL_NOTES_OFF	alsa/include/alsa/asoundef.h	296;"	d
MIDI_CTL_ALL_SOUNDS_OFF	alsa/include/alsa/asoundef.h	293;"	d
MIDI_CTL_DATA_DECREMENT	alsa/include/alsa/asoundef.h	288;"	d
MIDI_CTL_DATA_INCREMENT	alsa/include/alsa/asoundef.h	287;"	d
MIDI_CTL_E1_REVERB_DEPTH	alsa/include/alsa/asoundef.h	282;"	d
MIDI_CTL_E2_TREMOLO_DEPTH	alsa/include/alsa/asoundef.h	283;"	d
MIDI_CTL_E3_CHORUS_DEPTH	alsa/include/alsa/asoundef.h	284;"	d
MIDI_CTL_E4_DETUNE_DEPTH	alsa/include/alsa/asoundef.h	285;"	d
MIDI_CTL_E5_PHASER_DEPTH	alsa/include/alsa/asoundef.h	286;"	d
MIDI_CTL_GENERAL_PURPOSE5	alsa/include/alsa/asoundef.h	277;"	d
MIDI_CTL_GENERAL_PURPOSE6	alsa/include/alsa/asoundef.h	278;"	d
MIDI_CTL_GENERAL_PURPOSE7	alsa/include/alsa/asoundef.h	279;"	d
MIDI_CTL_GENERAL_PURPOSE8	alsa/include/alsa/asoundef.h	280;"	d
MIDI_CTL_HOLD2	alsa/include/alsa/asoundef.h	266;"	d
MIDI_CTL_LEGATO_FOOTSWITCH	alsa/include/alsa/asoundef.h	265;"	d
MIDI_CTL_LOCAL_CONTROL_SWITCH	alsa/include/alsa/asoundef.h	295;"	d
MIDI_CTL_LSB_BALANCE	alsa/include/alsa/asoundef.h	251;"	d
MIDI_CTL_LSB_BANK	alsa/include/alsa/asoundef.h	244;"	d
MIDI_CTL_LSB_BREATH	alsa/include/alsa/asoundef.h	246;"	d
MIDI_CTL_LSB_DATA_ENTRY	alsa/include/alsa/asoundef.h	249;"	d
MIDI_CTL_LSB_EFFECT1	alsa/include/alsa/asoundef.h	254;"	d
MIDI_CTL_LSB_EFFECT2	alsa/include/alsa/asoundef.h	255;"	d
MIDI_CTL_LSB_EXPRESSION	alsa/include/alsa/asoundef.h	253;"	d
MIDI_CTL_LSB_FOOT	alsa/include/alsa/asoundef.h	247;"	d
MIDI_CTL_LSB_GENERAL_PURPOSE1	alsa/include/alsa/asoundef.h	256;"	d
MIDI_CTL_LSB_GENERAL_PURPOSE2	alsa/include/alsa/asoundef.h	257;"	d
MIDI_CTL_LSB_GENERAL_PURPOSE3	alsa/include/alsa/asoundef.h	258;"	d
MIDI_CTL_LSB_GENERAL_PURPOSE4	alsa/include/alsa/asoundef.h	259;"	d
MIDI_CTL_LSB_MAIN_VOLUME	alsa/include/alsa/asoundef.h	250;"	d
MIDI_CTL_LSB_MODWHEEL	alsa/include/alsa/asoundef.h	245;"	d
MIDI_CTL_LSB_PAN	alsa/include/alsa/asoundef.h	252;"	d
MIDI_CTL_LSB_PORTAMENTO_TIME	alsa/include/alsa/asoundef.h	248;"	d
MIDI_CTL_MONO1	alsa/include/alsa/asoundef.h	299;"	d
MIDI_CTL_MONO2	alsa/include/alsa/asoundef.h	300;"	d
MIDI_CTL_MSB_BALANCE	alsa/include/alsa/asoundef.h	235;"	d
MIDI_CTL_MSB_BANK	alsa/include/alsa/asoundef.h	228;"	d
MIDI_CTL_MSB_BREATH	alsa/include/alsa/asoundef.h	230;"	d
MIDI_CTL_MSB_DATA_ENTRY	alsa/include/alsa/asoundef.h	233;"	d
MIDI_CTL_MSB_EFFECT1	alsa/include/alsa/asoundef.h	238;"	d
MIDI_CTL_MSB_EFFECT2	alsa/include/alsa/asoundef.h	239;"	d
MIDI_CTL_MSB_EXPRESSION	alsa/include/alsa/asoundef.h	237;"	d
MIDI_CTL_MSB_FOOT	alsa/include/alsa/asoundef.h	231;"	d
MIDI_CTL_MSB_GENERAL_PURPOSE1	alsa/include/alsa/asoundef.h	240;"	d
MIDI_CTL_MSB_GENERAL_PURPOSE2	alsa/include/alsa/asoundef.h	241;"	d
MIDI_CTL_MSB_GENERAL_PURPOSE3	alsa/include/alsa/asoundef.h	242;"	d
MIDI_CTL_MSB_GENERAL_PURPOSE4	alsa/include/alsa/asoundef.h	243;"	d
MIDI_CTL_MSB_MAIN_VOLUME	alsa/include/alsa/asoundef.h	234;"	d
MIDI_CTL_MSB_MODWHEEL	alsa/include/alsa/asoundef.h	229;"	d
MIDI_CTL_MSB_PAN	alsa/include/alsa/asoundef.h	236;"	d
MIDI_CTL_MSB_PORTAMENTO_TIME	alsa/include/alsa/asoundef.h	232;"	d
MIDI_CTL_NONREG_PARM_NUM_LSB	alsa/include/alsa/asoundef.h	289;"	d
MIDI_CTL_NONREG_PARM_NUM_MSB	alsa/include/alsa/asoundef.h	290;"	d
MIDI_CTL_OMNI_OFF	alsa/include/alsa/asoundef.h	297;"	d
MIDI_CTL_OMNI_ON	alsa/include/alsa/asoundef.h	298;"	d
MIDI_CTL_PORTAMENTO	alsa/include/alsa/asoundef.h	261;"	d
MIDI_CTL_PORTAMENTO_CONTROL	alsa/include/alsa/asoundef.h	281;"	d
MIDI_CTL_REGIST_PARM_NUM_LSB	alsa/include/alsa/asoundef.h	291;"	d
MIDI_CTL_REGIST_PARM_NUM_MSB	alsa/include/alsa/asoundef.h	292;"	d
MIDI_CTL_RESET_CONTROLLERS	alsa/include/alsa/asoundef.h	294;"	d
MIDI_CTL_SC10	alsa/include/alsa/asoundef.h	276;"	d
MIDI_CTL_SC1_SOUND_VARIATION	alsa/include/alsa/asoundef.h	267;"	d
MIDI_CTL_SC2_TIMBRE	alsa/include/alsa/asoundef.h	268;"	d
MIDI_CTL_SC3_RELEASE_TIME	alsa/include/alsa/asoundef.h	269;"	d
MIDI_CTL_SC4_ATTACK_TIME	alsa/include/alsa/asoundef.h	270;"	d
MIDI_CTL_SC5_BRIGHTNESS	alsa/include/alsa/asoundef.h	271;"	d
MIDI_CTL_SC6	alsa/include/alsa/asoundef.h	272;"	d
MIDI_CTL_SC7	alsa/include/alsa/asoundef.h	273;"	d
MIDI_CTL_SC8	alsa/include/alsa/asoundef.h	274;"	d
MIDI_CTL_SC9	alsa/include/alsa/asoundef.h	275;"	d
MIDI_CTL_SOFT_PEDAL	alsa/include/alsa/asoundef.h	264;"	d
MIDI_CTL_SOSTENUTO	alsa/include/alsa/asoundef.h	262;"	d
MIDI_CTL_SUSTAIN	alsa/include/alsa/asoundef.h	260;"	d
MIDI_CTL_SUSTENUTO	alsa/include/alsa/asoundef.h	263;"	d
MIDI_GM_DRUM_CHANNEL	alsa/include/alsa/asoundef.h	191;"	d
MOVESET	picojson/picojson.h	397;"	d
MOVESET	picojson/picojson.h	406;"	d
MUL_COMMAND	tcpserver.cpp	/^    MUL_COMMAND=0x80,$/;"	e	enum:__anon33	file:
MUL_GETSYNC	tcpserver.cpp	/^    MUL_GETSYNC,$/;"	e	enum:__anon33	file:
MUL_RETSYNC	tcpserver.cpp	/^    MUL_RETSYNC,$/;"	e	enum:__anon33	file:
MUL_SETCHMODE	tcpserver.cpp	/^    MUL_SETCHMODE,$/;"	e	enum:__anon33	file:
MUL_SETMASTER	tcpserver.cpp	/^    MUL_SETMASTER,$/;"	e	enum:__anon33	file:
MUL_SETSLAVER	tcpserver.cpp	/^    MUL_SETSLAVER,$/;"	e	enum:__anon33	file:
Message	Simple-WebSocket-Server/client_ws.hpp	/^            Message(): std::istream(&streambuf) {}$/;"	f	class:SimpleWeb::SocketClientBase::Message
Message	Simple-WebSocket-Server/client_ws.hpp	/^        class Message : public std::istream {$/;"	c	class:SimpleWeb::SocketClientBase
Message	Simple-WebSocket-Server/server_ws.hpp	/^            Message(): std::istream(&streambuf) {}$/;"	f	class:SimpleWeb::SocketServerBase::Message
Message	Simple-WebSocket-Server/server_ws.hpp	/^        class Message : public std::istream {$/;"	c	class:SimpleWeb::SocketServerBase
Multiface	alsa/include/alsa/sound/hdsp.h	/^	Multiface,$/;"	e	enum:__anon7
NET_COMMAND	tcpserver.cpp	/^    NET_COMMAND=0x20,$/;"	e	enum:__anon33	file:
NET_GETMODE	tcpserver.cpp	/^    NET_GETMODE,$/;"	e	enum:__anon33	file:
NET_GETSERNAME	tcpserver.cpp	/^    NET_GETSERNAME,$/;"	e	enum:__anon33	file:
NET_RETURNNAME	tcpserver.cpp	/^    NET_RETURNNAME,$/;"	e	enum:__anon33	file:
NET_RETURNSSID	tcpserver.cpp	/^    NET_RETURNSSID,$/;"	e	enum:__anon33	file:
NET_SCANSSID	tcpserver.cpp	/^    NET_SCANSSID,$/;"	e	enum:__anon33	file:
NET_SETSERNAME	tcpserver.cpp	/^    NET_SETSERNAME,$/;"	e	enum:__anon33	file:
NET_SWITCHAP	tcpserver.cpp	/^    NET_SWITCHAP,$/;"	e	enum:__anon33	file:
NET_SWITCHBRIDGE	tcpserver.cpp	/^    NET_SWITCHBRIDGE,$/;"	e	enum:__anon33	file:
NET_SWITCHSTA	tcpserver.cpp	/^    NET_SWITCHSTA,$/;"	e	enum:__anon33	file:
PACKAGE	configure.h	32;"	d
PACKAGE_BUGREPORT	configure.h	35;"	d
PACKAGE_NAME	configure.h	38;"	d
PACKAGE_STRING	configure.h	41;"	d
PACKAGE_TARNAME	configure.h	44;"	d
PACKAGE_URL	configure.h	47;"	d
PACKAGE_VERSION	configure.h	50;"	d
PICOJSON_ASSERT	picojson/picojson.h	86;"	d
PICOJSON_CMP	picojson/picojson.h	1114;"	d
PICOJSON_CMP	picojson/picojson.h	1122;"	d
PICOJSON_USE_LOCALE	picojson/picojson.h	77;"	d
PICOJSON_USE_RVALUE_REFERENCE	picojson/picojson.h	62;"	d
PICOJSON_USE_RVALUE_REFERENCE	picojson/picojson.h	64;"	d
PWM_CMD_GET_STATUS_OP	tcpserver.cpp	/^    PWM_CMD_GET_STATUS_OP = 0x66,$/;"	e	enum:__anon33	file:
PWM_CMD_GET_STATUS_RES	tcpserver.cpp	/^    PWM_CMD_GET_STATUS_RES = 0x67,$/;"	e	enum:__anon33	file:
PWM_CMD_REM_COLOR_OP	tcpserver.cpp	/^    PWM_CMD_REM_COLOR_OP = 0x64,$/;"	e	enum:__anon33	file:
PWM_CMD_SET_BRIGHTNESS_OP	tcpserver.cpp	/^    PWM_CMD_SET_BRIGHTNESS_OP = 0x62,$/;"	e	enum:__anon33	file:
PWM_CMD_SET_COLOR_OP	tcpserver.cpp	/^    PWM_CMD_SET_COLOR_OP = 0x61,$/;"	e	enum:__anon33	file:
PWM_CMD_SET_FACTORY_OP	tcpserver.cpp	/^    PWM_CMD_SET_FACTORY_OP = 0x65,$/;"	e	enum:__anon33	file:
PWM_CMD_SET_LED_MODE_OP	tcpserver.cpp	/^    PWM_CMD_SET_LED_MODE_OP = 0x63,$/;"	e	enum:__anon33	file:
PWM_CMD_SET_VAPOR_OP	tcpserver.cpp	/^    PWM_CMD_SET_VAPOR_OP = 0x68,$/;"	e	enum:__anon33	file:
QUEUE_LINE	tcpserver.cpp	22;"	d	file:
RECVLEN	tcpserver.cpp	26;"	d	file:
REGEX_NS	Simple-WebSocket-Server/server_ws.hpp	43;"	d
REGEX_NS	Simple-WebSocket-Server/server_ws.hpp	46;"	d
REMOTE_CMD	tcpserver.cpp	/^}REMOTE_CMD;$/;"	t	typeref:struct:_remote_cmd_	file:
RPM	alsa/include/alsa/sound/hdsp.h	/^	RPM,$/;"	e	enum:__anon7
RayDAT	alsa/include/alsa/sound/hdspm.h	/^	RayDAT$/;"	e	enum:hdspm_io_type
RingBuffer_t	ringbuffer.h	/^} RingBuffer_t;$/;"	t	typeref:struct:__anon32
SERVER_WSS_HPP	Simple-WebSocket-Server/server_wss.hpp	2;"	d
SERVER_WS_HPP	Simple-WebSocket-Server/server_ws.hpp	2;"	d
SET	picojson/picojson.h	380;"	d
SET	picojson/picojson.h	394;"	d
SM_CAPT	alsa/include/alsa/mixer_abst.h	40;"	d
SM_CAP_CENUM	alsa/include/alsa/mixer_abst.h	54;"	d
SM_CAP_CSWITCH	alsa/include/alsa/mixer_abst.h	50;"	d
SM_CAP_CSWITCH_EXCL	alsa/include/alsa/mixer_abst.h	52;"	d
SM_CAP_CSWITCH_JOIN	alsa/include/alsa/mixer_abst.h	51;"	d
SM_CAP_CVOLUME	alsa/include/alsa/mixer_abst.h	48;"	d
SM_CAP_CVOLUME_JOIN	alsa/include/alsa/mixer_abst.h	49;"	d
SM_CAP_GSWITCH	alsa/include/alsa/mixer_abst.h	43;"	d
SM_CAP_GVOLUME	alsa/include/alsa/mixer_abst.h	42;"	d
SM_CAP_PENUM	alsa/include/alsa/mixer_abst.h	53;"	d
SM_CAP_PSWITCH	alsa/include/alsa/mixer_abst.h	46;"	d
SM_CAP_PSWITCH_JOIN	alsa/include/alsa/mixer_abst.h	47;"	d
SM_CAP_PVOLUME	alsa/include/alsa/mixer_abst.h	44;"	d
SM_CAP_PVOLUME_JOIN	alsa/include/alsa/mixer_abst.h	45;"	d
SM_OPS_IS_ACTIVE	alsa/include/alsa/mixer_abst.h	57;"	d
SM_OPS_IS_CHANNEL	alsa/include/alsa/mixer_abst.h	59;"	d
SM_OPS_IS_ENUMCNT	alsa/include/alsa/mixer_abst.h	61;"	d
SM_OPS_IS_ENUMERATED	alsa/include/alsa/mixer_abst.h	60;"	d
SM_OPS_IS_MONO	alsa/include/alsa/mixer_abst.h	58;"	d
SM_PLAY	alsa/include/alsa/mixer_abst.h	39;"	d
SNDERR	alsa/include/alsa/error.h	64;"	d
SNDERR	alsa/include/alsa/error.h	67;"	d
SNDRV_CTL_TLVT_CONTAINER	alsa/include/alsa/sound/tlv.h	16;"	d
SNDRV_CTL_TLVT_DB_LINEAR	alsa/include/alsa/sound/tlv.h	18;"	d
SNDRV_CTL_TLVT_DB_MINMAX	alsa/include/alsa/sound/tlv.h	20;"	d
SNDRV_CTL_TLVT_DB_MINMAX_MUTE	alsa/include/alsa/sound/tlv.h	21;"	d
SNDRV_CTL_TLVT_DB_RANGE	alsa/include/alsa/sound/tlv.h	19;"	d
SNDRV_CTL_TLVT_DB_SCALE	alsa/include/alsa/sound/tlv.h	17;"	d
SNDRV_DM_FM_IOCTL_CLEAR_PATCHES	alsa/include/alsa/sound/asound_fm.h	108;"	d
SNDRV_DM_FM_IOCTL_INFO	alsa/include/alsa/sound/asound_fm.h	99;"	d
SNDRV_DM_FM_IOCTL_PLAY_NOTE	alsa/include/alsa/sound/asound_fm.h	101;"	d
SNDRV_DM_FM_IOCTL_RESET	alsa/include/alsa/sound/asound_fm.h	100;"	d
SNDRV_DM_FM_IOCTL_SET_CONNECTION	alsa/include/alsa/sound/asound_fm.h	106;"	d
SNDRV_DM_FM_IOCTL_SET_MODE	alsa/include/alsa/sound/asound_fm.h	104;"	d
SNDRV_DM_FM_IOCTL_SET_PARAMS	alsa/include/alsa/sound/asound_fm.h	103;"	d
SNDRV_DM_FM_IOCTL_SET_VOICE	alsa/include/alsa/sound/asound_fm.h	102;"	d
SNDRV_DM_FM_MODE_OPL2	alsa/include/alsa/sound/asound_fm.h	29;"	d
SNDRV_DM_FM_MODE_OPL3	alsa/include/alsa/sound/asound_fm.h	30;"	d
SNDRV_DM_FM_OSS_IOCTL_PLAY_NOTE	alsa/include/alsa/sound/asound_fm.h	111;"	d
SNDRV_DM_FM_OSS_IOCTL_RESET	alsa/include/alsa/sound/asound_fm.h	110;"	d
SNDRV_DM_FM_OSS_IOCTL_SET_MODE	alsa/include/alsa/sound/asound_fm.h	114;"	d
SNDRV_DM_FM_OSS_IOCTL_SET_OPL	alsa/include/alsa/sound/asound_fm.h	115;"	d
SNDRV_DM_FM_OSS_IOCTL_SET_PARAMS	alsa/include/alsa/sound/asound_fm.h	113;"	d
SNDRV_DM_FM_OSS_IOCTL_SET_VOICE	alsa/include/alsa/sound/asound_fm.h	112;"	d
SNDRV_EMU10K1_IOCTL_CODE_PEEK	alsa/include/alsa/sound/emu10k1.h	336;"	d
SNDRV_EMU10K1_IOCTL_CODE_POKE	alsa/include/alsa/sound/emu10k1.h	335;"	d
SNDRV_EMU10K1_IOCTL_CONTINUE	alsa/include/alsa/sound/emu10k1.h	344;"	d
SNDRV_EMU10K1_IOCTL_DBG_READ	alsa/include/alsa/sound/emu10k1.h	347;"	d
SNDRV_EMU10K1_IOCTL_INFO	alsa/include/alsa/sound/emu10k1.h	334;"	d
SNDRV_EMU10K1_IOCTL_PCM_PEEK	alsa/include/alsa/sound/emu10k1.h	341;"	d
SNDRV_EMU10K1_IOCTL_PCM_POKE	alsa/include/alsa/sound/emu10k1.h	340;"	d
SNDRV_EMU10K1_IOCTL_PVERSION	alsa/include/alsa/sound/emu10k1.h	342;"	d
SNDRV_EMU10K1_IOCTL_SINGLE_STEP	alsa/include/alsa/sound/emu10k1.h	346;"	d
SNDRV_EMU10K1_IOCTL_STOP	alsa/include/alsa/sound/emu10k1.h	343;"	d
SNDRV_EMU10K1_IOCTL_TRAM_PEEK	alsa/include/alsa/sound/emu10k1.h	339;"	d
SNDRV_EMU10K1_IOCTL_TRAM_POKE	alsa/include/alsa/sound/emu10k1.h	338;"	d
SNDRV_EMU10K1_IOCTL_TRAM_SETUP	alsa/include/alsa/sound/emu10k1.h	337;"	d
SNDRV_EMU10K1_IOCTL_ZERO_TRAM_COUNTER	alsa/include/alsa/sound/emu10k1.h	345;"	d
SNDRV_HDSPM_IOCTL_GET_CONFIG	alsa/include/alsa/sound/hdspm.h	74;"	d
SNDRV_HDSPM_IOCTL_GET_LTC	alsa/include/alsa/sound/hdspm.h	114;"	d
SNDRV_HDSPM_IOCTL_GET_MIXER	alsa/include/alsa/sound/hdspm.h	219;"	d
SNDRV_HDSPM_IOCTL_GET_PEAK_RMS	alsa/include/alsa/sound/hdspm.h	55;"	d
SNDRV_HDSPM_IOCTL_GET_STATUS	alsa/include/alsa/sound/hdspm.h	171;"	d
SNDRV_HDSPM_IOCTL_GET_VERSION	alsa/include/alsa/sound/hdspm.h	188;"	d
SNDRV_HDSP_IOCTL_GET_9632_AEB	alsa/include/alsa/sound/hdsp.h	111;"	d
SNDRV_HDSP_IOCTL_GET_CONFIG_INFO	alsa/include/alsa/sound/hdsp.h	77;"	d
SNDRV_HDSP_IOCTL_GET_MIXER	alsa/include/alsa/sound/hdsp.h	102;"	d
SNDRV_HDSP_IOCTL_GET_PEAK_RMS	alsa/include/alsa/sound/hdsp.h	47;"	d
SNDRV_HDSP_IOCTL_GET_VERSION	alsa/include/alsa/sound/hdsp.h	94;"	d
SNDRV_HDSP_IOCTL_UPLOAD_FIRMWARE	alsa/include/alsa/sound/hdsp.h	85;"	d
SNDRV_SB_CSP_IOCTL_INFO	alsa/include/alsa/sound/sb16_csp.h	100;"	d
SNDRV_SB_CSP_IOCTL_LOAD_CODE	alsa/include/alsa/sound/sb16_csp.h	102;"	d
SNDRV_SB_CSP_IOCTL_PAUSE	alsa/include/alsa/sound/sb16_csp.h	110;"	d
SNDRV_SB_CSP_IOCTL_RESTART	alsa/include/alsa/sound/sb16_csp.h	112;"	d
SNDRV_SB_CSP_IOCTL_START	alsa/include/alsa/sound/sb16_csp.h	106;"	d
SNDRV_SB_CSP_IOCTL_STOP	alsa/include/alsa/sound/sb16_csp.h	108;"	d
SNDRV_SB_CSP_IOCTL_UNLOAD_CODE	alsa/include/alsa/sound/sb16_csp.h	104;"	d
SNDRV_SB_CSP_LOAD_FROMUSER	alsa/include/alsa/sound/sb16_csp.h	33;"	d
SNDRV_SB_CSP_LOAD_INITBLOCK	alsa/include/alsa/sound/sb16_csp.h	34;"	d
SNDRV_SB_CSP_MAX_MICROCODE_FILE_SIZE	alsa/include/alsa/sound/sb16_csp.h	63;"	d
SNDRV_SB_CSP_MODE_DSP_READ	alsa/include/alsa/sound/sb16_csp.h	28;"	d
SNDRV_SB_CSP_MODE_DSP_WRITE	alsa/include/alsa/sound/sb16_csp.h	29;"	d
SNDRV_SB_CSP_MODE_NONE	alsa/include/alsa/sound/sb16_csp.h	27;"	d
SNDRV_SB_CSP_MODE_QSOUND	alsa/include/alsa/sound/sb16_csp.h	30;"	d
SNDRV_SB_CSP_MONO	alsa/include/alsa/sound/sb16_csp.h	41;"	d
SNDRV_SB_CSP_QSOUND_MAX_RIGHT	alsa/include/alsa/sound/sb16_csp.h	60;"	d
SNDRV_SB_CSP_RATE_11025	alsa/include/alsa/sound/sb16_csp.h	46;"	d
SNDRV_SB_CSP_RATE_22050	alsa/include/alsa/sound/sb16_csp.h	47;"	d
SNDRV_SB_CSP_RATE_44100	alsa/include/alsa/sound/sb16_csp.h	48;"	d
SNDRV_SB_CSP_RATE_8000	alsa/include/alsa/sound/sb16_csp.h	45;"	d
SNDRV_SB_CSP_RATE_ALL	alsa/include/alsa/sound/sb16_csp.h	49;"	d
SNDRV_SB_CSP_SAMPLE_16BIT	alsa/include/alsa/sound/sb16_csp.h	38;"	d
SNDRV_SB_CSP_SAMPLE_8BIT	alsa/include/alsa/sound/sb16_csp.h	37;"	d
SNDRV_SB_CSP_STEREO	alsa/include/alsa/sound/sb16_csp.h	42;"	d
SNDRV_SB_CSP_ST_AUTO	alsa/include/alsa/sound/sb16_csp.h	56;"	d
SNDRV_SB_CSP_ST_IDLE	alsa/include/alsa/sound/sb16_csp.h	52;"	d
SNDRV_SB_CSP_ST_LOADED	alsa/include/alsa/sound/sb16_csp.h	53;"	d
SNDRV_SB_CSP_ST_PAUSED	alsa/include/alsa/sound/sb16_csp.h	55;"	d
SNDRV_SB_CSP_ST_QSOUND	alsa/include/alsa/sound/sb16_csp.h	57;"	d
SNDRV_SB_CSP_ST_RUNNING	alsa/include/alsa/sound/sb16_csp.h	54;"	d
SND_CHMAP_API_VERSION	alsa/include/alsa/pcm.h	526;"	d
SND_CHMAP_BC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_BC,		\/**< bottom center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_BLC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_BLC,		\/**< bottom left center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_BRC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_BRC,		\/**< bottom right center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_DRIVER_SPEC	alsa/include/alsa/pcm.h	585;"	d
SND_CHMAP_FC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_FC,		\/**< front center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_FCH	alsa/include/alsa/pcm.h	/^	SND_CHMAP_FCH,		\/**< front center high *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_FL	alsa/include/alsa/pcm.h	/^	SND_CHMAP_FL,		\/**< front left *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_FLC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_FLC,		\/**< front left center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_FLH	alsa/include/alsa/pcm.h	/^	SND_CHMAP_FLH,		\/**< front left high *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_FLW	alsa/include/alsa/pcm.h	/^	SND_CHMAP_FLW,		\/**< front left wide *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_FR	alsa/include/alsa/pcm.h	/^	SND_CHMAP_FR,		\/**< front right *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_FRC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_FRC,		\/**< front right center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_FRH	alsa/include/alsa/pcm.h	/^	SND_CHMAP_FRH,		\/**< front right high *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_FRW	alsa/include/alsa/pcm.h	/^	SND_CHMAP_FRW,		\/**< front right wide *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_LAST	alsa/include/alsa/pcm.h	/^	SND_CHMAP_LAST = SND_CHMAP_BRC,$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_LFE	alsa/include/alsa/pcm.h	/^	SND_CHMAP_LFE,		\/**< LFE *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_LLFE	alsa/include/alsa/pcm.h	/^	SND_CHMAP_LLFE,		\/**< left LFE *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_MONO	alsa/include/alsa/pcm.h	/^	SND_CHMAP_MONO,		\/**< mono stream *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_NA	alsa/include/alsa/pcm.h	/^	SND_CHMAP_NA,		\/**< N\/A, silent *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_PHASE_INVERSE	alsa/include/alsa/pcm.h	583;"	d
SND_CHMAP_POSITION_MASK	alsa/include/alsa/pcm.h	580;"	d
SND_CHMAP_RC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_RC,		\/**< rear center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_RL	alsa/include/alsa/pcm.h	/^	SND_CHMAP_RL,		\/**< rear left *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_RLC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_RLC,		\/**< rear left center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_RLFE	alsa/include/alsa/pcm.h	/^	SND_CHMAP_RLFE,		\/**< right LFE *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_RR	alsa/include/alsa/pcm.h	/^	SND_CHMAP_RR,		\/**< rear right *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_RRC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_RRC,		\/**< rear right center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_SL	alsa/include/alsa/pcm.h	/^	SND_CHMAP_SL,		\/**< side left *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_SR	alsa/include/alsa/pcm.h	/^	SND_CHMAP_SR,		\/**< side right *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_TC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TC,		\/**< top center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_TFC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TFC,		\/**< top front center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_TFL	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TFL,		\/**< top front left *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_TFLC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TFLC,		\/**< top front left center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_TFR	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TFR,		\/**< top front right *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_TFRC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TFRC,		\/**< top front right center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_TRC	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TRC,		\/**< top rear center *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_TRL	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TRL,		\/**< top rear left *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_TRR	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TRR,		\/**< top rear right *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_TSL	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TSL,		\/**< top side left *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_TSR	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TSR,		\/**< top side right *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CHMAP_TYPE_FIXED	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TYPE_FIXED,	\/**< fixed channel position *\/$/;"	e	enum:snd_pcm_chmap_type
SND_CHMAP_TYPE_LAST	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TYPE_LAST = SND_CHMAP_TYPE_PAIRED, \/**< last entry *\/$/;"	e	enum:snd_pcm_chmap_type
SND_CHMAP_TYPE_NONE	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TYPE_NONE = 0,\/**< unspecified channel position *\/$/;"	e	enum:snd_pcm_chmap_type
SND_CHMAP_TYPE_PAIRED	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TYPE_PAIRED,	\/**< pair-wise swappable channel position *\/$/;"	e	enum:snd_pcm_chmap_type
SND_CHMAP_TYPE_VAR	alsa/include/alsa/pcm.h	/^	SND_CHMAP_TYPE_VAR,	\/**< freely swappable channel position *\/$/;"	e	enum:snd_pcm_chmap_type
SND_CHMAP_UNKNOWN	alsa/include/alsa/pcm.h	/^	SND_CHMAP_UNKNOWN = 0,	\/**< unspecified *\/$/;"	e	enum:snd_pcm_chmap_position
SND_CONFIG_DLSYM_VERSION_EVALUATE	alsa/include/alsa/conf.h	43;"	d
SND_CONFIG_DLSYM_VERSION_HOOK	alsa/include/alsa/conf.h	45;"	d
SND_CONFIG_TYPE_COMPOUND	alsa/include/alsa/conf.h	/^	SND_CONFIG_TYPE_COMPOUND = 1024$/;"	e	enum:_snd_config_type
SND_CONFIG_TYPE_INTEGER	alsa/include/alsa/conf.h	/^        SND_CONFIG_TYPE_INTEGER,$/;"	e	enum:_snd_config_type
SND_CONFIG_TYPE_INTEGER64	alsa/include/alsa/conf.h	/^        SND_CONFIG_TYPE_INTEGER64,$/;"	e	enum:_snd_config_type
SND_CONFIG_TYPE_POINTER	alsa/include/alsa/conf.h	/^        SND_CONFIG_TYPE_POINTER,$/;"	e	enum:_snd_config_type
SND_CONFIG_TYPE_REAL	alsa/include/alsa/conf.h	/^        SND_CONFIG_TYPE_REAL,$/;"	e	enum:_snd_config_type
SND_CONFIG_TYPE_STRING	alsa/include/alsa/conf.h	/^        SND_CONFIG_TYPE_STRING,$/;"	e	enum:_snd_config_type
SND_CONTROL_DLSYM_VERSION	alsa/include/alsa/control.h	43;"	d
SND_CTL_ASYNC	alsa/include/alsa/control.h	208;"	d
SND_CTL_ELEM_IFACE_CARD	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_IFACE_CARD = 0,$/;"	e	enum:_snd_ctl_elem_iface
SND_CTL_ELEM_IFACE_HWDEP	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_IFACE_HWDEP,$/;"	e	enum:_snd_ctl_elem_iface
SND_CTL_ELEM_IFACE_LAST	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_IFACE_LAST = SND_CTL_ELEM_IFACE_SEQUENCER$/;"	e	enum:_snd_ctl_elem_iface
SND_CTL_ELEM_IFACE_MIXER	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_IFACE_MIXER,$/;"	e	enum:_snd_ctl_elem_iface
SND_CTL_ELEM_IFACE_PCM	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_IFACE_PCM,$/;"	e	enum:_snd_ctl_elem_iface
SND_CTL_ELEM_IFACE_RAWMIDI	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_IFACE_RAWMIDI,$/;"	e	enum:_snd_ctl_elem_iface
SND_CTL_ELEM_IFACE_SEQUENCER	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_IFACE_SEQUENCER,$/;"	e	enum:_snd_ctl_elem_iface
SND_CTL_ELEM_IFACE_TIMER	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_IFACE_TIMER,$/;"	e	enum:_snd_ctl_elem_iface
SND_CTL_ELEM_TYPE_BOOLEAN	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_TYPE_BOOLEAN,$/;"	e	enum:_snd_ctl_elem_type
SND_CTL_ELEM_TYPE_BYTES	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_TYPE_BYTES,$/;"	e	enum:_snd_ctl_elem_type
SND_CTL_ELEM_TYPE_ENUMERATED	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_TYPE_ENUMERATED,$/;"	e	enum:_snd_ctl_elem_type
SND_CTL_ELEM_TYPE_IEC958	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_TYPE_IEC958,$/;"	e	enum:_snd_ctl_elem_type
SND_CTL_ELEM_TYPE_INTEGER	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_TYPE_INTEGER,$/;"	e	enum:_snd_ctl_elem_type
SND_CTL_ELEM_TYPE_INTEGER64	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_TYPE_INTEGER64,$/;"	e	enum:_snd_ctl_elem_type
SND_CTL_ELEM_TYPE_LAST	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_TYPE_LAST = SND_CTL_ELEM_TYPE_INTEGER64$/;"	e	enum:_snd_ctl_elem_type
SND_CTL_ELEM_TYPE_NONE	alsa/include/alsa/control.h	/^	SND_CTL_ELEM_TYPE_NONE = 0,$/;"	e	enum:_snd_ctl_elem_type
SND_CTL_EVENT_ELEM	alsa/include/alsa/control.h	/^	SND_CTL_EVENT_ELEM = 0,$/;"	e	enum:_snd_ctl_event_type
SND_CTL_EVENT_LAST	alsa/include/alsa/control.h	/^	SND_CTL_EVENT_LAST = SND_CTL_EVENT_ELEM$/;"	e	enum:_snd_ctl_event_type
SND_CTL_EVENT_MASK_ADD	alsa/include/alsa/control.h	124;"	d
SND_CTL_EVENT_MASK_INFO	alsa/include/alsa/control.h	122;"	d
SND_CTL_EVENT_MASK_REMOVE	alsa/include/alsa/control.h	118;"	d
SND_CTL_EVENT_MASK_TLV	alsa/include/alsa/control.h	126;"	d
SND_CTL_EVENT_MASK_VALUE	alsa/include/alsa/control.h	120;"	d
SND_CTL_EXT_ACCESS_INACTIVE	alsa/include/alsa/control_external.h	/^	SND_CTL_EXT_ACCESS_INACTIVE = (1<<8),$/;"	e	enum:snd_ctl_ext_access
SND_CTL_EXT_ACCESS_READ	alsa/include/alsa/control_external.h	/^	SND_CTL_EXT_ACCESS_READ = (1<<0),$/;"	e	enum:snd_ctl_ext_access
SND_CTL_EXT_ACCESS_READWRITE	alsa/include/alsa/control_external.h	/^	SND_CTL_EXT_ACCESS_READWRITE = (3<<0),$/;"	e	enum:snd_ctl_ext_access
SND_CTL_EXT_ACCESS_TLV_CALLBACK	alsa/include/alsa/control_external.h	/^	SND_CTL_EXT_ACCESS_TLV_CALLBACK = (1<<28),$/;"	e	enum:snd_ctl_ext_access
SND_CTL_EXT_ACCESS_TLV_COMMAND	alsa/include/alsa/control_external.h	/^	SND_CTL_EXT_ACCESS_TLV_COMMAND = (1<<6),$/;"	e	enum:snd_ctl_ext_access
SND_CTL_EXT_ACCESS_TLV_READ	alsa/include/alsa/control_external.h	/^	SND_CTL_EXT_ACCESS_TLV_READ = (1<<4),$/;"	e	enum:snd_ctl_ext_access
SND_CTL_EXT_ACCESS_TLV_READWRITE	alsa/include/alsa/control_external.h	/^	SND_CTL_EXT_ACCESS_TLV_READWRITE = (3<<4),$/;"	e	enum:snd_ctl_ext_access
SND_CTL_EXT_ACCESS_TLV_WRITE	alsa/include/alsa/control_external.h	/^	SND_CTL_EXT_ACCESS_TLV_WRITE = (1<<5),$/;"	e	enum:snd_ctl_ext_access
SND_CTL_EXT_ACCESS_VOLATILE	alsa/include/alsa/control_external.h	/^	SND_CTL_EXT_ACCESS_VOLATILE = (1<<2),$/;"	e	enum:snd_ctl_ext_access
SND_CTL_EXT_ACCESS_WRITE	alsa/include/alsa/control_external.h	/^	SND_CTL_EXT_ACCESS_WRITE = (1<<1),$/;"	e	enum:snd_ctl_ext_access
SND_CTL_EXT_KEY_NOT_FOUND	alsa/include/alsa/control_external.h	275;"	d
SND_CTL_EXT_VERSION	alsa/include/alsa/control_external.h	81;"	d
SND_CTL_EXT_VERSION_MAJOR	alsa/include/alsa/control_external.h	75;"	d
SND_CTL_EXT_VERSION_MINOR	alsa/include/alsa/control_external.h	76;"	d
SND_CTL_EXT_VERSION_TINY	alsa/include/alsa/control_external.h	77;"	d
SND_CTL_NAME_CAPTURE	alsa/include/alsa/control.h	133;"	d
SND_CTL_NAME_IEC958	alsa/include/alsa/control.h	152;"	d
SND_CTL_NAME_IEC958_CON_MASK	alsa/include/alsa/control.h	146;"	d
SND_CTL_NAME_IEC958_DEFAULT	alsa/include/alsa/control.h	142;"	d
SND_CTL_NAME_IEC958_MASK	alsa/include/alsa/control.h	144;"	d
SND_CTL_NAME_IEC958_NONE	alsa/include/alsa/control.h	136;"	d
SND_CTL_NAME_IEC958_PCM_STREAM	alsa/include/alsa/control.h	150;"	d
SND_CTL_NAME_IEC958_PRO_MASK	alsa/include/alsa/control.h	148;"	d
SND_CTL_NAME_IEC958_SWITCH	alsa/include/alsa/control.h	138;"	d
SND_CTL_NAME_IEC958_VOLUME	alsa/include/alsa/control.h	140;"	d
SND_CTL_NAME_NONE	alsa/include/alsa/control.h	129;"	d
SND_CTL_NAME_PLAYBACK	alsa/include/alsa/control.h	131;"	d
SND_CTL_NONBLOCK	alsa/include/alsa/control.h	205;"	d
SND_CTL_PLUGIN_DEFINE_FUNC	alsa/include/alsa/control_external.h	53;"	d
SND_CTL_PLUGIN_ENTRY	alsa/include/alsa/control_external.h	43;"	d
SND_CTL_PLUGIN_SYMBOL	alsa/include/alsa/control_external.h	48;"	d
SND_CTL_POWER_D0	alsa/include/alsa/control.h	157;"	d
SND_CTL_POWER_D1	alsa/include/alsa/control.h	159;"	d
SND_CTL_POWER_D2	alsa/include/alsa/control.h	161;"	d
SND_CTL_POWER_D3	alsa/include/alsa/control.h	163;"	d
SND_CTL_POWER_D3cold	alsa/include/alsa/control.h	167;"	d
SND_CTL_POWER_D3hot	alsa/include/alsa/control.h	165;"	d
SND_CTL_POWER_MASK	alsa/include/alsa/control.h	155;"	d
SND_CTL_READONLY	alsa/include/alsa/control.h	211;"	d
SND_CTL_TLVT_CHMAP_FIXED	alsa/include/alsa/control.h	186;"	d
SND_CTL_TLVT_CHMAP_PAIRED	alsa/include/alsa/control.h	190;"	d
SND_CTL_TLVT_CHMAP_VAR	alsa/include/alsa/control.h	188;"	d
SND_CTL_TLVT_CONTAINER	alsa/include/alsa/control.h	170;"	d
SND_CTL_TLVT_DB_LINEAR	alsa/include/alsa/control.h	174;"	d
SND_CTL_TLVT_DB_MINMAX	alsa/include/alsa/control.h	178;"	d
SND_CTL_TLVT_DB_MINMAX_MUTE	alsa/include/alsa/control.h	180;"	d
SND_CTL_TLVT_DB_RANGE	alsa/include/alsa/control.h	176;"	d
SND_CTL_TLVT_DB_SCALE	alsa/include/alsa/control.h	172;"	d
SND_CTL_TLV_DB_GAIN_MUTE	alsa/include/alsa/control.h	183;"	d
SND_CTL_TYPE_EXT	alsa/include/alsa/control.h	/^	SND_CTL_TYPE_EXT$/;"	e	enum:_snd_ctl_type
SND_CTL_TYPE_HW	alsa/include/alsa/control.h	/^	SND_CTL_TYPE_HW,$/;"	e	enum:_snd_ctl_type
SND_CTL_TYPE_INET	alsa/include/alsa/control.h	/^	SND_CTL_TYPE_INET,$/;"	e	enum:_snd_ctl_type
SND_CTL_TYPE_SHM	alsa/include/alsa/control.h	/^	SND_CTL_TYPE_SHM,$/;"	e	enum:_snd_ctl_type
SND_DLSYM_BUILD_VERSION	alsa/include/alsa/global.h	62;"	d
SND_DLSYM_BUILD_VERSION	alsa/include/alsa/global.h	80;"	d
SND_DLSYM_VERSION	alsa/include/alsa/global.h	98;"	d
SND_ERROR_ALISP_NIL	alsa/include/alsa/error.h	43;"	d
SND_ERROR_BEGIN	alsa/include/alsa/error.h	41;"	d
SND_ERROR_INCOMPATIBLE_VERSION	alsa/include/alsa/error.h	42;"	d
SND_HWDEP_DLSYM_VERSION	alsa/include/alsa/hwdep.h	42;"	d
SND_HWDEP_IFACE_BLUETOOTH	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_BLUETOOTH,	\/**< Bluetooth audio *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_EMU10K1	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_EMU10K1,	\/**< EMU10K1 driver *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_EMUX_WAVETABLE	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_EMUX_WAVETABLE,	\/**< EmuX wavetable *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_FW_BEBOB	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_FW_BEBOB,	\/**< BridgeCo BeBoB based device *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_FW_DICE	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_FW_DICE,	\/**< TC DICE FireWire device *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_FW_DIGI00X	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_FW_DIGI00X,	\/* Digidesign Digi 002\/003 family *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_FW_FIREWORKS	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_FW_FIREWORKS,	\/**< Echo Audio Fireworks based device *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_FW_OXFW	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_FW_OXFW,	\/**< Oxford OXFW970\/971 based device *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_FW_TASCAM	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_FW_TASCAM,	\/* TASCAM FireWire series *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_HDA	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_HDA,		\/**< HD-audio *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_ICS2115	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_ICS2115,	\/**< ICS2115 driver *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_LAST	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_LAST = SND_HWDEP_IFACE_FW_TASCAM	\/**< last known hwdep interface *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_MIXART	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_MIXART,		\/**< Digigram miXart cards *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_OPL2	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_OPL2 = 0,	\/**< OPL2 raw driver *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_OPL3	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_OPL3,		\/**< OPL3 raw driver *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_OPL4	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_OPL4,		\/**< OPL4 raw driver *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_PCXHR	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_PCXHR,		\/**< Digigram PCXHR *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_SB16CSP	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_SB16CSP,	\/**< SB16CSP driver *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_SB_RC	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_SB_RC,		\/**< SB Extigy\/Audigy2NX remote control *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_SSCAPE	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_SSCAPE,		\/**< Ensoniq SoundScape ISA card (MC68EC000) *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_USB_STREAM	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_USB_STREAM,	\/**< direct access to usb stream *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_USX2Y	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_USX2Y,		\/**< Tascam US122, US224 & US428 usb *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_USX2Y_PCM	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_USX2Y_PCM,	\/**< Tascam US122, US224 & US428 raw USB PCM *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_VX	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_VX,		\/**< Digigram VX cards *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_IFACE_YSS225	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_IFACE_YSS225,		\/**< YSS225 driver *\/$/;"	e	enum:_snd_hwdep_iface
SND_HWDEP_OPEN_DUPLEX	alsa/include/alsa/hwdep.h	88;"	d
SND_HWDEP_OPEN_NONBLOCK	alsa/include/alsa/hwdep.h	90;"	d
SND_HWDEP_OPEN_READ	alsa/include/alsa/hwdep.h	84;"	d
SND_HWDEP_OPEN_WRITE	alsa/include/alsa/hwdep.h	86;"	d
SND_HWDEP_TYPE_HW	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_TYPE_HW,$/;"	e	enum:_snd_hwdep_type
SND_HWDEP_TYPE_INET	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_TYPE_INET$/;"	e	enum:_snd_hwdep_type
SND_HWDEP_TYPE_SHM	alsa/include/alsa/hwdep.h	/^	SND_HWDEP_TYPE_SHM,$/;"	e	enum:_snd_hwdep_type
SND_INPUT_BUFFER	alsa/include/alsa/input.h	/^	SND_INPUT_BUFFER$/;"	e	enum:_snd_input_type
SND_INPUT_STDIO	alsa/include/alsa/input.h	/^	SND_INPUT_STDIO,$/;"	e	enum:_snd_input_type
SND_LIB_EXTRAVER	alsa/include/alsa/version.h	8;"	d
SND_LIB_MAJOR	alsa/include/alsa/version.h	5;"	d
SND_LIB_MINOR	alsa/include/alsa/version.h	6;"	d
SND_LIB_SUBMINOR	alsa/include/alsa/version.h	7;"	d
SND_LIB_VERSION	alsa/include/alsa/version.h	10;"	d
SND_LIB_VERSION_STR	alsa/include/alsa/version.h	14;"	d
SND_MIXER_ELEM_LAST	alsa/include/alsa/mixer.h	/^	SND_MIXER_ELEM_LAST = SND_MIXER_ELEM_SIMPLE$/;"	e	enum:_snd_mixer_elem_type
SND_MIXER_ELEM_SIMPLE	alsa/include/alsa/mixer.h	/^	SND_MIXER_ELEM_SIMPLE,$/;"	e	enum:_snd_mixer_elem_type
SND_MIXER_SABSTRACT_BASIC	alsa/include/alsa/mixer.h	/^	SND_MIXER_SABSTRACT_BASIC,$/;"	e	enum:snd_mixer_selem_regopt_abstract
SND_MIXER_SABSTRACT_NONE	alsa/include/alsa/mixer.h	/^	SND_MIXER_SABSTRACT_NONE = 0,$/;"	e	enum:snd_mixer_selem_regopt_abstract
SND_MIXER_SCHN_FRONT_CENTER	alsa/include/alsa/mixer.h	/^	SND_MIXER_SCHN_FRONT_CENTER,$/;"	e	enum:_snd_mixer_selem_channel_id
SND_MIXER_SCHN_FRONT_LEFT	alsa/include/alsa/mixer.h	/^	SND_MIXER_SCHN_FRONT_LEFT = 0,$/;"	e	enum:_snd_mixer_selem_channel_id
SND_MIXER_SCHN_FRONT_RIGHT	alsa/include/alsa/mixer.h	/^	SND_MIXER_SCHN_FRONT_RIGHT,$/;"	e	enum:_snd_mixer_selem_channel_id
SND_MIXER_SCHN_LAST	alsa/include/alsa/mixer.h	/^	SND_MIXER_SCHN_LAST = 31,$/;"	e	enum:_snd_mixer_selem_channel_id
SND_MIXER_SCHN_MONO	alsa/include/alsa/mixer.h	/^	SND_MIXER_SCHN_MONO = SND_MIXER_SCHN_FRONT_LEFT$/;"	e	enum:_snd_mixer_selem_channel_id
SND_MIXER_SCHN_REAR_CENTER	alsa/include/alsa/mixer.h	/^	SND_MIXER_SCHN_REAR_CENTER,$/;"	e	enum:_snd_mixer_selem_channel_id
SND_MIXER_SCHN_REAR_LEFT	alsa/include/alsa/mixer.h	/^	SND_MIXER_SCHN_REAR_LEFT,$/;"	e	enum:_snd_mixer_selem_channel_id
SND_MIXER_SCHN_REAR_RIGHT	alsa/include/alsa/mixer.h	/^	SND_MIXER_SCHN_REAR_RIGHT,$/;"	e	enum:_snd_mixer_selem_channel_id
SND_MIXER_SCHN_SIDE_LEFT	alsa/include/alsa/mixer.h	/^	SND_MIXER_SCHN_SIDE_LEFT,$/;"	e	enum:_snd_mixer_selem_channel_id
SND_MIXER_SCHN_SIDE_RIGHT	alsa/include/alsa/mixer.h	/^	SND_MIXER_SCHN_SIDE_RIGHT,$/;"	e	enum:_snd_mixer_selem_channel_id
SND_MIXER_SCHN_UNKNOWN	alsa/include/alsa/mixer.h	/^	SND_MIXER_SCHN_UNKNOWN = -1,$/;"	e	enum:_snd_mixer_selem_channel_id
SND_MIXER_SCHN_WOOFER	alsa/include/alsa/mixer.h	/^	SND_MIXER_SCHN_WOOFER,$/;"	e	enum:_snd_mixer_selem_channel_id
SND_OUTPUT_BUFFER	alsa/include/alsa/output.h	/^	SND_OUTPUT_BUFFER$/;"	e	enum:_snd_output_type
SND_OUTPUT_STDIO	alsa/include/alsa/output.h	/^	SND_OUTPUT_STDIO,$/;"	e	enum:_snd_output_type
SND_PCM_ABORT	alsa/include/alsa/pcm.h	363;"	d
SND_PCM_ACCESS_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_ACCESS_LAST = SND_PCM_ACCESS_RW_NONINTERLEAVED$/;"	e	enum:_snd_pcm_access
SND_PCM_ACCESS_MMAP_COMPLEX	alsa/include/alsa/pcm.h	/^	SND_PCM_ACCESS_MMAP_COMPLEX,$/;"	e	enum:_snd_pcm_access
SND_PCM_ACCESS_MMAP_INTERLEAVED	alsa/include/alsa/pcm.h	/^	SND_PCM_ACCESS_MMAP_INTERLEAVED = 0,$/;"	e	enum:_snd_pcm_access
SND_PCM_ACCESS_MMAP_NONINTERLEAVED	alsa/include/alsa/pcm.h	/^	SND_PCM_ACCESS_MMAP_NONINTERLEAVED,$/;"	e	enum:_snd_pcm_access
SND_PCM_ACCESS_RW_INTERLEAVED	alsa/include/alsa/pcm.h	/^	SND_PCM_ACCESS_RW_INTERLEAVED,$/;"	e	enum:_snd_pcm_access
SND_PCM_ACCESS_RW_NONINTERLEAVED	alsa/include/alsa/pcm.h	/^	SND_PCM_ACCESS_RW_NONINTERLEAVED,$/;"	e	enum:_snd_pcm_access
SND_PCM_ASYNC	alsa/include/alsa/pcm.h	361;"	d
SND_PCM_CLASS_DIGITIZER	alsa/include/alsa/pcm.h	/^	SND_PCM_CLASS_DIGITIZER,$/;"	e	enum:_snd_pcm_class
SND_PCM_CLASS_GENERIC	alsa/include/alsa/pcm.h	/^	SND_PCM_CLASS_GENERIC = 0,$/;"	e	enum:_snd_pcm_class
SND_PCM_CLASS_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_CLASS_LAST = SND_PCM_CLASS_DIGITIZER$/;"	e	enum:_snd_pcm_class
SND_PCM_CLASS_MODEM	alsa/include/alsa/pcm.h	/^	SND_PCM_CLASS_MODEM,$/;"	e	enum:_snd_pcm_class
SND_PCM_CLASS_MULTI	alsa/include/alsa/pcm.h	/^	SND_PCM_CLASS_MULTI,$/;"	e	enum:_snd_pcm_class
SND_PCM_DLSYM_VERSION	alsa/include/alsa/pcm.h	43;"	d
SND_PCM_EXTPLUG_HW_CHANNELS	alsa/include/alsa/pcm_extplug.h	/^	SND_PCM_EXTPLUG_HW_CHANNELS,	\/**< channels *\/$/;"	e	enum:__anon15
SND_PCM_EXTPLUG_HW_FORMAT	alsa/include/alsa/pcm_extplug.h	/^	SND_PCM_EXTPLUG_HW_FORMAT,	\/**< format *\/$/;"	e	enum:__anon15
SND_PCM_EXTPLUG_HW_PARAMS	alsa/include/alsa/pcm_extplug.h	/^	SND_PCM_EXTPLUG_HW_PARAMS	\/**< max number of hw constraints *\/$/;"	e	enum:__anon15
SND_PCM_EXTPLUG_VERSION	alsa/include/alsa/pcm_extplug.h	67;"	d
SND_PCM_EXTPLUG_VERSION_MAJOR	alsa/include/alsa/pcm_extplug.h	61;"	d
SND_PCM_EXTPLUG_VERSION_MINOR	alsa/include/alsa/pcm_extplug.h	62;"	d
SND_PCM_EXTPLUG_VERSION_TINY	alsa/include/alsa/pcm_extplug.h	63;"	d
SND_PCM_FORMAT_A_LAW	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_A_LAW,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_DSD_U16_BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_DSD_U16_BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_DSD_U16_LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_DSD_U16_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_DSD_U32_BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_DSD_U32_BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_DSD_U32_LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_DSD_U32_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_DSD_U8	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_DSD_U8,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_FLOAT	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_FLOAT = SND_PCM_FORMAT_FLOAT_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_FLOAT64	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_FLOAT64 = SND_PCM_FORMAT_FLOAT64_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_FLOAT64_BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_FLOAT64_BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_FLOAT64_LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_FLOAT64_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_FLOAT_BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_FLOAT_BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_FLOAT_LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_FLOAT_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_G723_24	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_G723_24,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_G723_24_1B	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_G723_24_1B,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_G723_40	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_G723_40,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_G723_40_1B	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_G723_40_1B,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_GSM	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_GSM,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_IEC958_SUBFRAME	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_IEC958_SUBFRAME = SND_PCM_FORMAT_IEC958_SUBFRAME_LE$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_IEC958_SUBFRAME_BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_IEC958_SUBFRAME_BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_IEC958_SUBFRAME_LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_IEC958_SUBFRAME_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_IMA_ADPCM	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_IMA_ADPCM,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_LAST = SND_PCM_FORMAT_DSD_U32_BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_MPEG	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_MPEG,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_MU_LAW	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_MU_LAW,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S16	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S16 = SND_PCM_FORMAT_S16_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S16_BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S16_BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S16_LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S16_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S18_3BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S18_3BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S18_3LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S18_3LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S20_3BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S20_3BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S20_3LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S20_3LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S24	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S24 = SND_PCM_FORMAT_S24_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S24_3BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S24_3BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S24_3LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S24_3LE = 32,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S24_BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S24_BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S24_LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S24_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S32	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S32 = SND_PCM_FORMAT_S32_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S32_BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S32_BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S32_LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S32_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_S8	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_S8 = 0,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_SPECIAL	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_SPECIAL = 31,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U16	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U16 = SND_PCM_FORMAT_U16_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U16_BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U16_BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U16_LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U16_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U18_3BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U18_3BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U18_3LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U18_3LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U20_3BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U20_3BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U20_3LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U20_3LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U24	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U24 = SND_PCM_FORMAT_U24_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U24_3BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U24_3BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U24_3LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U24_3LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U24_BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U24_BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U24_LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U24_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U32	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U32 = SND_PCM_FORMAT_U32_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U32_BE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U32_BE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U32_LE	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U32_LE,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_U8	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_U8,$/;"	e	enum:_snd_pcm_format
SND_PCM_FORMAT_UNKNOWN	alsa/include/alsa/pcm.h	/^	SND_PCM_FORMAT_UNKNOWN = -1,$/;"	e	enum:_snd_pcm_format
SND_PCM_HOOK_TYPE_CLOSE	alsa/include/alsa/pcm.h	/^	SND_PCM_HOOK_TYPE_CLOSE,$/;"	e	enum:_snd_pcm_hook_type
SND_PCM_HOOK_TYPE_HW_FREE	alsa/include/alsa/pcm.h	/^	SND_PCM_HOOK_TYPE_HW_FREE,$/;"	e	enum:_snd_pcm_hook_type
SND_PCM_HOOK_TYPE_HW_PARAMS	alsa/include/alsa/pcm.h	/^	SND_PCM_HOOK_TYPE_HW_PARAMS = 0,$/;"	e	enum:_snd_pcm_hook_type
SND_PCM_HOOK_TYPE_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_HOOK_TYPE_LAST = SND_PCM_HOOK_TYPE_CLOSE$/;"	e	enum:_snd_pcm_hook_type
SND_PCM_IOPLUG_FLAG_LISTED	alsa/include/alsa/pcm_ioplug.h	66;"	d
SND_PCM_IOPLUG_FLAG_MONOTONIC	alsa/include/alsa/pcm_ioplug.h	67;"	d
SND_PCM_IOPLUG_HW_ACCESS	alsa/include/alsa/pcm_ioplug.h	/^	SND_PCM_IOPLUG_HW_ACCESS = 0,	\/**< access type *\/$/;"	e	enum:__anon16
SND_PCM_IOPLUG_HW_BUFFER_BYTES	alsa/include/alsa/pcm_ioplug.h	/^	SND_PCM_IOPLUG_HW_BUFFER_BYTES,	\/**< buffer bytes *\/$/;"	e	enum:__anon16
SND_PCM_IOPLUG_HW_CHANNELS	alsa/include/alsa/pcm_ioplug.h	/^	SND_PCM_IOPLUG_HW_CHANNELS,	\/**< channels *\/$/;"	e	enum:__anon16
SND_PCM_IOPLUG_HW_FORMAT	alsa/include/alsa/pcm_ioplug.h	/^	SND_PCM_IOPLUG_HW_FORMAT,	\/**< format *\/$/;"	e	enum:__anon16
SND_PCM_IOPLUG_HW_PARAMS	alsa/include/alsa/pcm_ioplug.h	/^	SND_PCM_IOPLUG_HW_PARAMS	\/**< max number of hw constraints *\/$/;"	e	enum:__anon16
SND_PCM_IOPLUG_HW_PERIODS	alsa/include/alsa/pcm_ioplug.h	/^	SND_PCM_IOPLUG_HW_PERIODS,	\/**< number of periods *\/$/;"	e	enum:__anon16
SND_PCM_IOPLUG_HW_PERIOD_BYTES	alsa/include/alsa/pcm_ioplug.h	/^	SND_PCM_IOPLUG_HW_PERIOD_BYTES,	\/**< period bytes *\/$/;"	e	enum:__anon16
SND_PCM_IOPLUG_HW_RATE	alsa/include/alsa/pcm_ioplug.h	/^	SND_PCM_IOPLUG_HW_RATE,		\/**< rate *\/$/;"	e	enum:__anon16
SND_PCM_IOPLUG_VERSION	alsa/include/alsa/pcm_ioplug.h	78;"	d
SND_PCM_IOPLUG_VERSION_MAJOR	alsa/include/alsa/pcm_ioplug.h	72;"	d
SND_PCM_IOPLUG_VERSION_MINOR	alsa/include/alsa/pcm_ioplug.h	73;"	d
SND_PCM_IOPLUG_VERSION_TINY	alsa/include/alsa/pcm_ioplug.h	74;"	d
SND_PCM_NONBLOCK	alsa/include/alsa/pcm.h	359;"	d
SND_PCM_NO_AUTO_CHANNELS	alsa/include/alsa/pcm.h	367;"	d
SND_PCM_NO_AUTO_FORMAT	alsa/include/alsa/pcm.h	369;"	d
SND_PCM_NO_AUTO_RESAMPLE	alsa/include/alsa/pcm.h	365;"	d
SND_PCM_NO_SOFTVOL	alsa/include/alsa/pcm.h	371;"	d
SND_PCM_PLUGIN_DEFINE_FUNC	alsa/include/alsa/pcm_external.h	53;"	d
SND_PCM_PLUGIN_ENTRY	alsa/include/alsa/pcm_external.h	43;"	d
SND_PCM_PLUGIN_RATE_MAX	alsa/include/alsa/pcm_plugin.h	42;"	d
SND_PCM_PLUGIN_RATE_MIN	alsa/include/alsa/pcm_plugin.h	41;"	d
SND_PCM_PLUGIN_ROUTE_FLOAT	alsa/include/alsa/pcm_plugin.h	46;"	d
SND_PCM_PLUGIN_ROUTE_FLOAT	alsa/include/alsa/pcm_plugin.h	48;"	d
SND_PCM_PLUGIN_ROUTE_FULL	alsa/include/alsa/pcm_plugin.h	57;"	d
SND_PCM_PLUGIN_ROUTE_FULL	alsa/include/alsa/pcm_plugin.h	62;"	d
SND_PCM_PLUGIN_ROUTE_HALF	alsa/include/alsa/pcm_plugin.h	56;"	d
SND_PCM_PLUGIN_ROUTE_HALF	alsa/include/alsa/pcm_plugin.h	61;"	d
SND_PCM_PLUGIN_ROUTE_RESOLUTION	alsa/include/alsa/pcm_plugin.h	51;"	d
SND_PCM_PLUGIN_SYMBOL	alsa/include/alsa/pcm_external.h	48;"	d
SND_PCM_RATE_PLUGIN_ENTRY	alsa/include/alsa/pcm_rate.h	126;"	d
SND_PCM_RATE_PLUGIN_VERSION	alsa/include/alsa/pcm_rate.h	41;"	d
SND_PCM_START_DATA	alsa/include/alsa/pcm.h	/^	SND_PCM_START_DATA = 0,$/;"	e	enum:_snd_pcm_start
SND_PCM_START_EXPLICIT	alsa/include/alsa/pcm.h	/^	SND_PCM_START_EXPLICIT,$/;"	e	enum:_snd_pcm_start
SND_PCM_START_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_START_LAST = SND_PCM_START_EXPLICIT$/;"	e	enum:_snd_pcm_start
SND_PCM_STATE_DISCONNECTED	alsa/include/alsa/pcm.h	/^	SND_PCM_STATE_DISCONNECTED,$/;"	e	enum:_snd_pcm_state
SND_PCM_STATE_DRAINING	alsa/include/alsa/pcm.h	/^	SND_PCM_STATE_DRAINING,$/;"	e	enum:_snd_pcm_state
SND_PCM_STATE_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_STATE_LAST = SND_PCM_STATE_DISCONNECTED$/;"	e	enum:_snd_pcm_state
SND_PCM_STATE_OPEN	alsa/include/alsa/pcm.h	/^	SND_PCM_STATE_OPEN = 0,$/;"	e	enum:_snd_pcm_state
SND_PCM_STATE_PAUSED	alsa/include/alsa/pcm.h	/^	SND_PCM_STATE_PAUSED,$/;"	e	enum:_snd_pcm_state
SND_PCM_STATE_PREPARED	alsa/include/alsa/pcm.h	/^	SND_PCM_STATE_PREPARED,$/;"	e	enum:_snd_pcm_state
SND_PCM_STATE_RUNNING	alsa/include/alsa/pcm.h	/^	SND_PCM_STATE_RUNNING,$/;"	e	enum:_snd_pcm_state
SND_PCM_STATE_SETUP	alsa/include/alsa/pcm.h	/^	SND_PCM_STATE_SETUP,$/;"	e	enum:_snd_pcm_state
SND_PCM_STATE_SUSPENDED	alsa/include/alsa/pcm.h	/^	SND_PCM_STATE_SUSPENDED,$/;"	e	enum:_snd_pcm_state
SND_PCM_STATE_XRUN	alsa/include/alsa/pcm.h	/^	SND_PCM_STATE_XRUN,$/;"	e	enum:_snd_pcm_state
SND_PCM_STREAM_CAPTURE	alsa/include/alsa/pcm.h	/^	SND_PCM_STREAM_CAPTURE,$/;"	e	enum:_snd_pcm_stream
SND_PCM_STREAM_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_STREAM_LAST = SND_PCM_STREAM_CAPTURE$/;"	e	enum:_snd_pcm_stream
SND_PCM_STREAM_PLAYBACK	alsa/include/alsa/pcm.h	/^	SND_PCM_STREAM_PLAYBACK = 0,$/;"	e	enum:_snd_pcm_stream
SND_PCM_SUBCLASS_GENERIC_MIX	alsa/include/alsa/pcm.h	/^	SND_PCM_SUBCLASS_GENERIC_MIX = 0,$/;"	e	enum:_snd_pcm_subclass
SND_PCM_SUBCLASS_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_SUBCLASS_LAST = SND_PCM_SUBCLASS_MULTI_MIX$/;"	e	enum:_snd_pcm_subclass
SND_PCM_SUBCLASS_MULTI_MIX	alsa/include/alsa/pcm.h	/^	SND_PCM_SUBCLASS_MULTI_MIX,$/;"	e	enum:_snd_pcm_subclass
SND_PCM_SUBFORMAT_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_SUBFORMAT_LAST = SND_PCM_SUBFORMAT_STD$/;"	e	enum:_snd_pcm_subformat
SND_PCM_SUBFORMAT_STD	alsa/include/alsa/pcm.h	/^	SND_PCM_SUBFORMAT_STD = 0,$/;"	e	enum:_snd_pcm_subformat
SND_PCM_TSTAMP_ENABLE	alsa/include/alsa/pcm.h	/^	SND_PCM_TSTAMP_ENABLE,$/;"	e	enum:_snd_pcm_tstamp
SND_PCM_TSTAMP_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_TSTAMP_LAST = SND_PCM_TSTAMP_ENABLE$/;"	e	enum:_snd_pcm_tstamp
SND_PCM_TSTAMP_MMAP	alsa/include/alsa/pcm.h	/^	SND_PCM_TSTAMP_MMAP = SND_PCM_TSTAMP_ENABLE,$/;"	e	enum:_snd_pcm_tstamp
SND_PCM_TSTAMP_NONE	alsa/include/alsa/pcm.h	/^	SND_PCM_TSTAMP_NONE = 0,$/;"	e	enum:_snd_pcm_tstamp
SND_PCM_TSTAMP_TYPE_GETTIMEOFDAY	alsa/include/alsa/pcm.h	/^	SND_PCM_TSTAMP_TYPE_GETTIMEOFDAY = 0,	\/**< gettimeofday equivalent *\/$/;"	e	enum:_snd_pcm_tstamp_type
SND_PCM_TSTAMP_TYPE_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_TSTAMP_TYPE_LAST = SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW,$/;"	e	enum:_snd_pcm_tstamp_type
SND_PCM_TSTAMP_TYPE_MONOTONIC	alsa/include/alsa/pcm.h	/^	SND_PCM_TSTAMP_TYPE_MONOTONIC,	\/**< posix_clock_monotonic equivalent *\/$/;"	e	enum:_snd_pcm_tstamp_type
SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW	alsa/include/alsa/pcm.h	/^	SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW,	\/**< monotonic_raw (no NTP) *\/$/;"	e	enum:_snd_pcm_tstamp_type
SND_PCM_TYPE_ADPCM	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_ADPCM,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_ALAW	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_ALAW,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_COPY	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_COPY,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_DMIX	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_DMIX,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_DROUTE	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_DROUTE,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_DSHARE	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_DSHARE,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_DSNOOP	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_DSNOOP,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_EXTPLUG	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_EXTPLUG,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_FILE	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_FILE,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_HOOKS	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_HOOKS,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_HW	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_HW = 0,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_IEC958	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_IEC958,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_INET	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_INET,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_IOPLUG	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_IOPLUG,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_JACK	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_JACK,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_LADSPA	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_LADSPA,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_LAST = SND_PCM_TYPE_MMAP_EMUL$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_LBSERVER	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_LBSERVER,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_LINEAR	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_LINEAR,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_LINEAR_FLOAT	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_LINEAR_FLOAT,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_METER	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_METER,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_MIX	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_MIX,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_MMAP_EMUL	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_MMAP_EMUL,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_MULAW	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_MULAW,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_MULTI	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_MULTI,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_NULL	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_NULL,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_PLUG	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_PLUG,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_RATE	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_RATE,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_ROUTE	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_ROUTE,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_SHARE	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_SHARE,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_SHM	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_SHM,$/;"	e	enum:_snd_pcm_type
SND_PCM_TYPE_SOFTVOL	alsa/include/alsa/pcm.h	/^	SND_PCM_TYPE_SOFTVOL,$/;"	e	enum:_snd_pcm_type
SND_PCM_XRUN_LAST	alsa/include/alsa/pcm.h	/^	SND_PCM_XRUN_LAST = SND_PCM_XRUN_STOP$/;"	e	enum:_snd_pcm_xrun
SND_PCM_XRUN_NONE	alsa/include/alsa/pcm.h	/^	SND_PCM_XRUN_NONE = 0,$/;"	e	enum:_snd_pcm_xrun
SND_PCM_XRUN_STOP	alsa/include/alsa/pcm.h	/^	SND_PCM_XRUN_STOP,$/;"	e	enum:_snd_pcm_xrun
SND_RAWMIDI_APPEND	alsa/include/alsa/rawmidi.h	61;"	d
SND_RAWMIDI_DLSYM_VERSION	alsa/include/alsa/rawmidi.h	42;"	d
SND_RAWMIDI_NONBLOCK	alsa/include/alsa/rawmidi.h	63;"	d
SND_RAWMIDI_STREAM_INPUT	alsa/include/alsa/rawmidi.h	/^	SND_RAWMIDI_STREAM_INPUT,$/;"	e	enum:_snd_rawmidi_stream
SND_RAWMIDI_STREAM_LAST	alsa/include/alsa/rawmidi.h	/^	SND_RAWMIDI_STREAM_LAST = SND_RAWMIDI_STREAM_INPUT$/;"	e	enum:_snd_rawmidi_stream
SND_RAWMIDI_STREAM_OUTPUT	alsa/include/alsa/rawmidi.h	/^	SND_RAWMIDI_STREAM_OUTPUT = 0,$/;"	e	enum:_snd_rawmidi_stream
SND_RAWMIDI_SYNC	alsa/include/alsa/rawmidi.h	65;"	d
SND_RAWMIDI_TYPE_HW	alsa/include/alsa/rawmidi.h	/^	SND_RAWMIDI_TYPE_HW,$/;"	e	enum:_snd_rawmidi_type
SND_RAWMIDI_TYPE_INET	alsa/include/alsa/rawmidi.h	/^	SND_RAWMIDI_TYPE_INET,$/;"	e	enum:_snd_rawmidi_type
SND_RAWMIDI_TYPE_SHM	alsa/include/alsa/rawmidi.h	/^	SND_RAWMIDI_TYPE_SHM,$/;"	e	enum:_snd_rawmidi_type
SND_RAWMIDI_TYPE_VIRTUAL	alsa/include/alsa/rawmidi.h	/^	SND_RAWMIDI_TYPE_VIRTUAL$/;"	e	enum:_snd_rawmidi_type
SND_SCTL_NOFREE	alsa/include/alsa/control.h	217;"	d
SND_SEQ_ADDRESS_BROADCAST	alsa/include/alsa/seq.h	71;"	d
SND_SEQ_ADDRESS_SUBSCRIBERS	alsa/include/alsa/seq.h	70;"	d
SND_SEQ_ADDRESS_UNKNOWN	alsa/include/alsa/seq.h	69;"	d
SND_SEQ_CLIENT_SYSTEM	alsa/include/alsa/seq.h	74;"	d
SND_SEQ_DLSYM_VERSION	alsa/include/alsa/seq.h	44;"	d
SND_SEQ_EVENT_BOUNCE	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_BOUNCE,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_CHANPRESS	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_CHANPRESS,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_CLIENT_CHANGE	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_CLIENT_CHANGE,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_CLIENT_EXIT	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_CLIENT_EXIT,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_CLIENT_START	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_CLIENT_START = 60,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_CLOCK	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_CLOCK,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_CONTINUE	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_CONTINUE,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_CONTROL14	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_CONTROL14,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_CONTROLLER	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_CONTROLLER = 10,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_ECHO	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_ECHO = 50,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_KEYPRESS	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_KEYPRESS,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_KEYSIGN	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_KEYSIGN,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_LENGTH_FIXED	alsa/include/alsa/seq_event.h	219;"	d
SND_SEQ_EVENT_LENGTH_MASK	alsa/include/alsa/seq_event.h	222;"	d
SND_SEQ_EVENT_LENGTH_VARIABLE	alsa/include/alsa/seq_event.h	220;"	d
SND_SEQ_EVENT_LENGTH_VARUSR	alsa/include/alsa/seq_event.h	221;"	d
SND_SEQ_EVENT_NONE	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_NONE = 255$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_NONREGPARAM	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_NONREGPARAM,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_NOTE	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_NOTE = 5,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_NOTEOFF	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_NOTEOFF,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_NOTEON	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_NOTEON,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_OSS	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_OSS,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_PGMCHANGE	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_PGMCHANGE,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_PITCHBEND	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_PITCHBEND,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_PORT_CHANGE	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_PORT_CHANGE,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_PORT_EXIT	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_PORT_EXIT,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_PORT_START	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_PORT_START,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_PORT_SUBSCRIBED	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_PORT_SUBSCRIBED,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_PORT_UNSUBSCRIBED	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_PORT_UNSUBSCRIBED,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_QFRAME	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_QFRAME,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_QUEUE_SKEW	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_QUEUE_SKEW,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_REGPARAM	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_REGPARAM,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_RESET	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_RESET,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_RESULT	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_RESULT,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_SENSING	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_SENSING,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_SETPOS_TICK	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_SETPOS_TICK,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_SETPOS_TIME	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_SETPOS_TIME,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_SONGPOS	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_SONGPOS = 20,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_SONGSEL	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_SONGSEL,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_START	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_START = 30,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_STOP	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_STOP,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_SYNC_POS	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_SYNC_POS,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_SYSEX	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_SYSEX = 130,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_SYSTEM	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_SYSTEM = 0,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_TEMPO	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_TEMPO,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_TICK	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_TICK,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_TIMESIGN	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_TIMESIGN,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_TUNE_REQUEST	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_TUNE_REQUEST = 40,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR0	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR0 = 90,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR1	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR1,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR2	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR2,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR3	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR3,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR4	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR4,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR5	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR5,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR6	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR6,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR7	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR7,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR8	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR8,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR9	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR9,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR_VAR0	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR_VAR0 = 135,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR_VAR1	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR_VAR1,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR_VAR2	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR_VAR2,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR_VAR3	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR_VAR3,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVENT_USR_VAR4	alsa/include/alsa/seq_event.h	/^	SND_SEQ_EVENT_USR_VAR4,$/;"	e	enum:snd_seq_event_type
SND_SEQ_EVFLG_CONNECTION	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_CONNECTION,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_CONTROL	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_CONTROL,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_FIXED	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_FIXED,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_INSTR	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_INSTR,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_MESSAGE	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_MESSAGE,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_NONE	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_NONE,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_NOTE	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_NOTE,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_NOTE_ONEARG	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_NOTE_ONEARG,$/;"	e	enum:__anon20
SND_SEQ_EVFLG_NOTE_TWOARG	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_NOTE_TWOARG$/;"	e	enum:__anon20
SND_SEQ_EVFLG_QUEUE	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_QUEUE,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_QUEUE_NOARG	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_QUEUE_NOARG,$/;"	e	enum:__anon21
SND_SEQ_EVFLG_QUEUE_TICK	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_QUEUE_TICK,$/;"	e	enum:__anon21
SND_SEQ_EVFLG_QUEUE_TIME	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_QUEUE_TIME,$/;"	e	enum:__anon21
SND_SEQ_EVFLG_QUEUE_VALUE	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_QUEUE_VALUE$/;"	e	enum:__anon21
SND_SEQ_EVFLG_QUOTE	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_QUOTE,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_RAW	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_RAW,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_RESULT	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_RESULT,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_SAMPLE	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_SAMPLE,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_SYSTEM	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_SYSTEM,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_USERS	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_USERS,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_VARIABLE	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_VARIABLE,$/;"	e	enum:__anon19
SND_SEQ_EVFLG_VARUSR	alsa/include/alsa/seq.h	/^	SND_SEQ_EVFLG_VARUSR$/;"	e	enum:__anon19
SND_SEQ_KERNEL_CLIENT	alsa/include/alsa/seq.h	/^	SND_SEQ_KERNEL_CLIENT   = 2	\/**< kernel client *\/$/;"	e	enum:snd_seq_client_type
SND_SEQ_NONBLOCK	alsa/include/alsa/seq.h	59;"	d
SND_SEQ_OPEN_DUPLEX	alsa/include/alsa/seq.h	54;"	d
SND_SEQ_OPEN_INPUT	alsa/include/alsa/seq.h	53;"	d
SND_SEQ_OPEN_OUTPUT	alsa/include/alsa/seq.h	52;"	d
SND_SEQ_PORT_CAP_DUPLEX	alsa/include/alsa/seq.h	220;"	d
SND_SEQ_PORT_CAP_NO_EXPORT	alsa/include/alsa/seq.h	224;"	d
SND_SEQ_PORT_CAP_READ	alsa/include/alsa/seq.h	214;"	d
SND_SEQ_PORT_CAP_SUBS_READ	alsa/include/alsa/seq.h	222;"	d
SND_SEQ_PORT_CAP_SUBS_WRITE	alsa/include/alsa/seq.h	223;"	d
SND_SEQ_PORT_CAP_SYNC_READ	alsa/include/alsa/seq.h	217;"	d
SND_SEQ_PORT_CAP_SYNC_WRITE	alsa/include/alsa/seq.h	218;"	d
SND_SEQ_PORT_CAP_WRITE	alsa/include/alsa/seq.h	215;"	d
SND_SEQ_PORT_SYSTEM_ANNOUNCE	alsa/include/alsa/seq.h	211;"	d
SND_SEQ_PORT_SYSTEM_TIMER	alsa/include/alsa/seq.h	210;"	d
SND_SEQ_PORT_TYPE_APPLICATION	alsa/include/alsa/seq.h	260;"	d
SND_SEQ_PORT_TYPE_DIRECT_SAMPLE	alsa/include/alsa/seq.h	246;"	d
SND_SEQ_PORT_TYPE_HARDWARE	alsa/include/alsa/seq.h	251;"	d
SND_SEQ_PORT_TYPE_MIDI_GENERIC	alsa/include/alsa/seq.h	230;"	d
SND_SEQ_PORT_TYPE_MIDI_GM	alsa/include/alsa/seq.h	232;"	d
SND_SEQ_PORT_TYPE_MIDI_GM2	alsa/include/alsa/seq.h	240;"	d
SND_SEQ_PORT_TYPE_MIDI_GS	alsa/include/alsa/seq.h	234;"	d
SND_SEQ_PORT_TYPE_MIDI_MT32	alsa/include/alsa/seq.h	238;"	d
SND_SEQ_PORT_TYPE_MIDI_XG	alsa/include/alsa/seq.h	236;"	d
SND_SEQ_PORT_TYPE_PORT	alsa/include/alsa/seq.h	258;"	d
SND_SEQ_PORT_TYPE_SAMPLE	alsa/include/alsa/seq.h	249;"	d
SND_SEQ_PORT_TYPE_SOFTWARE	alsa/include/alsa/seq.h	253;"	d
SND_SEQ_PORT_TYPE_SPECIFIC	alsa/include/alsa/seq.h	228;"	d
SND_SEQ_PORT_TYPE_SYNTH	alsa/include/alsa/seq.h	243;"	d
SND_SEQ_PORT_TYPE_SYNTHESIZER	alsa/include/alsa/seq.h	255;"	d
SND_SEQ_PRIORITY_HIGH	alsa/include/alsa/seq_event.h	225;"	d
SND_SEQ_PRIORITY_MASK	alsa/include/alsa/seq_event.h	226;"	d
SND_SEQ_PRIORITY_NORMAL	alsa/include/alsa/seq_event.h	224;"	d
SND_SEQ_QUERY_SUBS_READ	alsa/include/alsa/seq.h	/^	SND_SEQ_QUERY_SUBS_READ,	\/**< query read subscriptions *\/$/;"	e	enum:__anon17
SND_SEQ_QUERY_SUBS_WRITE	alsa/include/alsa/seq.h	/^	SND_SEQ_QUERY_SUBS_WRITE	\/**< query write subscriptions *\/$/;"	e	enum:__anon17
SND_SEQ_QUEUE_DIRECT	alsa/include/alsa/seq.h	407;"	d
SND_SEQ_REMOVE_DEST	alsa/include/alsa/seq.h	540;"	d
SND_SEQ_REMOVE_DEST_CHANNEL	alsa/include/alsa/seq.h	541;"	d
SND_SEQ_REMOVE_EVENT_TYPE	alsa/include/alsa/seq.h	545;"	d
SND_SEQ_REMOVE_IGNORE_OFF	alsa/include/alsa/seq.h	546;"	d
SND_SEQ_REMOVE_INPUT	alsa/include/alsa/seq.h	538;"	d
SND_SEQ_REMOVE_OUTPUT	alsa/include/alsa/seq.h	539;"	d
SND_SEQ_REMOVE_TAG_MATCH	alsa/include/alsa/seq.h	547;"	d
SND_SEQ_REMOVE_TIME_AFTER	alsa/include/alsa/seq.h	543;"	d
SND_SEQ_REMOVE_TIME_BEFORE	alsa/include/alsa/seq.h	542;"	d
SND_SEQ_REMOVE_TIME_TICK	alsa/include/alsa/seq.h	544;"	d
SND_SEQ_TIMER_ALSA	alsa/include/alsa/seq.h	/^	SND_SEQ_TIMER_ALSA = 0,		\/* ALSA timer *\/$/;"	e	enum:__anon18
SND_SEQ_TIMER_MIDI_CLOCK	alsa/include/alsa/seq.h	/^	SND_SEQ_TIMER_MIDI_CLOCK = 1,	\/* Midi Clock (CLOCK event) *\/$/;"	e	enum:__anon18
SND_SEQ_TIMER_MIDI_TICK	alsa/include/alsa/seq.h	/^	SND_SEQ_TIMER_MIDI_TICK = 2	\/* Midi Timer Tick (TICK event *\/$/;"	e	enum:__anon18
SND_SEQ_TIME_MODE_ABS	alsa/include/alsa/seq_event.h	215;"	d
SND_SEQ_TIME_MODE_MASK	alsa/include/alsa/seq_event.h	217;"	d
SND_SEQ_TIME_MODE_REL	alsa/include/alsa/seq_event.h	216;"	d
SND_SEQ_TIME_STAMP_MASK	alsa/include/alsa/seq_event.h	213;"	d
SND_SEQ_TIME_STAMP_REAL	alsa/include/alsa/seq_event.h	212;"	d
SND_SEQ_TIME_STAMP_TICK	alsa/include/alsa/seq_event.h	211;"	d
SND_SEQ_TYPE_HW	alsa/include/alsa/seq.h	/^	SND_SEQ_TYPE_HW,		\/**< hardware *\/$/;"	e	enum:_snd_seq_type
SND_SEQ_TYPE_INET	alsa/include/alsa/seq.h	/^	SND_SEQ_TYPE_INET		\/**< network (NYI) *\/$/;"	e	enum:_snd_seq_type
SND_SEQ_TYPE_SHM	alsa/include/alsa/seq.h	/^	SND_SEQ_TYPE_SHM,		\/**< shared memory (NYI) *\/$/;"	e	enum:_snd_seq_type
SND_SEQ_USER_CLIENT	alsa/include/alsa/seq.h	/^	SND_SEQ_USER_CLIENT     = 1,	\/**< user client *\/$/;"	e	enum:snd_seq_client_type
SND_SOC_TPLG_ABI_VERSION	alsa/include/alsa/sound/asoc.h	77;"	d
SND_SOC_TPLG_CTL_BYTES	alsa/include/alsa/sound/asoc.h	38;"	d
SND_SOC_TPLG_CTL_ENUM	alsa/include/alsa/sound/asoc.h	37;"	d
SND_SOC_TPLG_CTL_ENUM_VALUE	alsa/include/alsa/sound/asoc.h	39;"	d
SND_SOC_TPLG_CTL_RANGE	alsa/include/alsa/sound/asoc.h	40;"	d
SND_SOC_TPLG_CTL_STROBE	alsa/include/alsa/sound/asoc.h	41;"	d
SND_SOC_TPLG_CTL_VOLSW	alsa/include/alsa/sound/asoc.h	34;"	d
SND_SOC_TPLG_CTL_VOLSW_SX	alsa/include/alsa/sound/asoc.h	35;"	d
SND_SOC_TPLG_CTL_VOLSW_XR_SX	alsa/include/alsa/sound/asoc.h	36;"	d
SND_SOC_TPLG_DAPM_ADC	alsa/include/alsa/sound/asoc.h	58;"	d
SND_SOC_TPLG_DAPM_AIF_IN	alsa/include/alsa/sound/asoc.h	63;"	d
SND_SOC_TPLG_DAPM_AIF_OUT	alsa/include/alsa/sound/asoc.h	64;"	d
SND_SOC_TPLG_DAPM_CTL_ENUM_DOUBLE	alsa/include/alsa/sound/asoc.h	46;"	d
SND_SOC_TPLG_DAPM_CTL_ENUM_VALUE	alsa/include/alsa/sound/asoc.h	48;"	d
SND_SOC_TPLG_DAPM_CTL_ENUM_VIRT	alsa/include/alsa/sound/asoc.h	47;"	d
SND_SOC_TPLG_DAPM_CTL_PIN	alsa/include/alsa/sound/asoc.h	49;"	d
SND_SOC_TPLG_DAPM_CTL_VOLSW	alsa/include/alsa/sound/asoc.h	45;"	d
SND_SOC_TPLG_DAPM_DAC	alsa/include/alsa/sound/asoc.h	59;"	d
SND_SOC_TPLG_DAPM_DAI_IN	alsa/include/alsa/sound/asoc.h	65;"	d
SND_SOC_TPLG_DAPM_DAI_LINK	alsa/include/alsa/sound/asoc.h	67;"	d
SND_SOC_TPLG_DAPM_DAI_OUT	alsa/include/alsa/sound/asoc.h	66;"	d
SND_SOC_TPLG_DAPM_INPUT	alsa/include/alsa/sound/asoc.h	52;"	d
SND_SOC_TPLG_DAPM_LAST	alsa/include/alsa/sound/asoc.h	68;"	d
SND_SOC_TPLG_DAPM_MIXER	alsa/include/alsa/sound/asoc.h	55;"	d
SND_SOC_TPLG_DAPM_MUX	alsa/include/alsa/sound/asoc.h	54;"	d
SND_SOC_TPLG_DAPM_OUTPUT	alsa/include/alsa/sound/asoc.h	53;"	d
SND_SOC_TPLG_DAPM_OUT_DRV	alsa/include/alsa/sound/asoc.h	57;"	d
SND_SOC_TPLG_DAPM_PGA	alsa/include/alsa/sound/asoc.h	56;"	d
SND_SOC_TPLG_DAPM_POST	alsa/include/alsa/sound/asoc.h	62;"	d
SND_SOC_TPLG_DAPM_PRE	alsa/include/alsa/sound/asoc.h	61;"	d
SND_SOC_TPLG_DAPM_SWITCH	alsa/include/alsa/sound/asoc.h	60;"	d
SND_SOC_TPLG_MAGIC	alsa/include/alsa/sound/asoc.h	71;"	d
SND_SOC_TPLG_MAX_CHAN	alsa/include/alsa/sound/asoc.h	21;"	d
SND_SOC_TPLG_MAX_FORMATS	alsa/include/alsa/sound/asoc.h	26;"	d
SND_SOC_TPLG_NUM_TEXTS	alsa/include/alsa/sound/asoc.h	74;"	d
SND_SOC_TPLG_STREAM_CAPTURE	alsa/include/alsa/sound/asoc.h	108;"	d
SND_SOC_TPLG_STREAM_CONFIG_MAX	alsa/include/alsa/sound/asoc.h	31;"	d
SND_SOC_TPLG_STREAM_PLAYBACK	alsa/include/alsa/sound/asoc.h	107;"	d
SND_SOC_TPLG_TLV_SIZE	alsa/include/alsa/sound/asoc.h	80;"	d
SND_SOC_TPLG_TUPLE_TYPE_BOOL	alsa/include/alsa/sound/asoc.h	113;"	d
SND_SOC_TPLG_TUPLE_TYPE_BYTE	alsa/include/alsa/sound/asoc.h	114;"	d
SND_SOC_TPLG_TUPLE_TYPE_SHORT	alsa/include/alsa/sound/asoc.h	116;"	d
SND_SOC_TPLG_TUPLE_TYPE_STRING	alsa/include/alsa/sound/asoc.h	112;"	d
SND_SOC_TPLG_TUPLE_TYPE_UUID	alsa/include/alsa/sound/asoc.h	111;"	d
SND_SOC_TPLG_TUPLE_TYPE_WORD	alsa/include/alsa/sound/asoc.h	115;"	d
SND_SOC_TPLG_TYPEVENDOR_CODEC	alsa/include/alsa/sound/asoc.h	105;"	d
SND_SOC_TPLG_TYPE_BACKEND_LINK	alsa/include/alsa/sound/asoc.h	97;"	d
SND_SOC_TPLG_TYPE_BYTES	alsa/include/alsa/sound/asoc.h	89;"	d
SND_SOC_TPLG_TYPE_CODEC_LINK	alsa/include/alsa/sound/asoc.h	96;"	d
SND_SOC_TPLG_TYPE_DAI_LINK	alsa/include/alsa/sound/asoc.h	93;"	d
SND_SOC_TPLG_TYPE_DAPM_GRAPH	alsa/include/alsa/sound/asoc.h	91;"	d
SND_SOC_TPLG_TYPE_DAPM_WIDGET	alsa/include/alsa/sound/asoc.h	92;"	d
SND_SOC_TPLG_TYPE_ENUM	alsa/include/alsa/sound/asoc.h	90;"	d
SND_SOC_TPLG_TYPE_MANIFEST	alsa/include/alsa/sound/asoc.h	95;"	d
SND_SOC_TPLG_TYPE_MAX	alsa/include/alsa/sound/asoc.h	99;"	d
SND_SOC_TPLG_TYPE_MIXER	alsa/include/alsa/sound/asoc.h	88;"	d
SND_SOC_TPLG_TYPE_PCM	alsa/include/alsa/sound/asoc.h	94;"	d
SND_SOC_TPLG_TYPE_PDATA	alsa/include/alsa/sound/asoc.h	98;"	d
SND_SOC_TPLG_TYPE_VENDOR_COEFF	alsa/include/alsa/sound/asoc.h	104;"	d
SND_SOC_TPLG_TYPE_VENDOR_CONFIG	alsa/include/alsa/sound/asoc.h	103;"	d
SND_SOC_TPLG_TYPE_VENDOR_FW	alsa/include/alsa/sound/asoc.h	102;"	d
SND_SPCM_DUPLEX_LIBERAL	alsa/include/alsa/pcm.h	/^	SND_SPCM_DUPLEX_LIBERAL = 0,$/;"	e	enum:_snd_spcm_duplex_type
SND_SPCM_DUPLEX_PEDANTIC	alsa/include/alsa/pcm.h	/^	SND_SPCM_DUPLEX_PEDANTIC$/;"	e	enum:_snd_spcm_duplex_type
SND_SPCM_LATENCY_MEDIUM	alsa/include/alsa/pcm.h	/^	SND_SPCM_LATENCY_MEDIUM,$/;"	e	enum:_snd_spcm_latency
SND_SPCM_LATENCY_REALTIME	alsa/include/alsa/pcm.h	/^	SND_SPCM_LATENCY_REALTIME$/;"	e	enum:_snd_spcm_latency
SND_SPCM_LATENCY_STANDARD	alsa/include/alsa/pcm.h	/^	SND_SPCM_LATENCY_STANDARD = 0,$/;"	e	enum:_snd_spcm_latency
SND_SPCM_XRUN_IGNORE	alsa/include/alsa/pcm.h	/^	SND_SPCM_XRUN_IGNORE = 0,$/;"	e	enum:_snd_spcm_xrun_type
SND_SPCM_XRUN_STOP	alsa/include/alsa/pcm.h	/^	SND_SPCM_XRUN_STOP$/;"	e	enum:_snd_spcm_xrun_type
SND_SSCAPE_LOAD_BOOTB	alsa/include/alsa/sound/sscape_ioctl.h	18;"	d
SND_SSCAPE_LOAD_MCODE	alsa/include/alsa/sound/sscape_ioctl.h	19;"	d
SND_TIMER_CLASS_CARD	alsa/include/alsa/timer.h	/^	SND_TIMER_CLASS_CARD,		\/**< card timer *\/$/;"	e	enum:_snd_timer_class
SND_TIMER_CLASS_GLOBAL	alsa/include/alsa/timer.h	/^	SND_TIMER_CLASS_GLOBAL,		\/**< global timer *\/$/;"	e	enum:_snd_timer_class
SND_TIMER_CLASS_LAST	alsa/include/alsa/timer.h	/^	SND_TIMER_CLASS_LAST = SND_TIMER_CLASS_PCM	\/**< last timer *\/$/;"	e	enum:_snd_timer_class
SND_TIMER_CLASS_NONE	alsa/include/alsa/timer.h	/^	SND_TIMER_CLASS_NONE = -1,	\/**< invalid *\/$/;"	e	enum:_snd_timer_class
SND_TIMER_CLASS_PCM	alsa/include/alsa/timer.h	/^	SND_TIMER_CLASS_PCM,		\/**< PCM timer *\/$/;"	e	enum:_snd_timer_class
SND_TIMER_CLASS_SLAVE	alsa/include/alsa/timer.h	/^	SND_TIMER_CLASS_SLAVE = 0,	\/**< slave timer *\/$/;"	e	enum:_snd_timer_class
SND_TIMER_DLSYM_VERSION	alsa/include/alsa/timer.h	42;"	d
SND_TIMER_EVENT_CONTINUE	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_CONTINUE,	\/* val = resolution in ns *\/$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_EARLY	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_EARLY,		\/* val = 0 *\/$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_MCONTINUE	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_MCONTINUE = SND_TIMER_EVENT_CONTINUE + 10,$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_MPAUSE	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_MPAUSE = SND_TIMER_EVENT_PAUSE + 10,$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_MRESUME	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_MRESUME = SND_TIMER_EVENT_RESUME + 10	$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_MSTART	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_MSTART = SND_TIMER_EVENT_START + 10,$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_MSTOP	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_MSTOP = SND_TIMER_EVENT_STOP + 10,$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_MSUSPEND	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_MSUSPEND = SND_TIMER_EVENT_SUSPEND + 10,$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_PAUSE	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_PAUSE,		\/* val = 0 *\/$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_RESOLUTION	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_RESOLUTION = 0,	\/* val = resolution in ns *\/$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_RESUME	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_RESUME,		\/* val = resolution in ns *\/$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_START	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_START,		\/* val = resolution in ns *\/$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_STOP	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_STOP,		\/* val = 0 *\/$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_SUSPEND	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_SUSPEND,	\/* val = 0 *\/$/;"	e	enum:_snd_timer_event
SND_TIMER_EVENT_TICK	alsa/include/alsa/timer.h	/^	SND_TIMER_EVENT_TICK,		\/* val = ticks *\/$/;"	e	enum:_snd_timer_event
SND_TIMER_GLOBAL_HPET	alsa/include/alsa/timer.h	117;"	d
SND_TIMER_GLOBAL_HRTIMER	alsa/include/alsa/timer.h	119;"	d
SND_TIMER_GLOBAL_RTC	alsa/include/alsa/timer.h	115;"	d
SND_TIMER_GLOBAL_SYSTEM	alsa/include/alsa/timer.h	113;"	d
SND_TIMER_OPEN_NONBLOCK	alsa/include/alsa/timer.h	122;"	d
SND_TIMER_OPEN_TREAD	alsa/include/alsa/timer.h	124;"	d
SND_TIMER_QUERY_DLSYM_VERSION	alsa/include/alsa/timer.h	44;"	d
SND_TIMER_SCLASS_APPLICATION	alsa/include/alsa/timer.h	/^	SND_TIMER_SCLASS_APPLICATION,		\/**< for internal use *\/$/;"	e	enum:_snd_timer_slave_class
SND_TIMER_SCLASS_LAST	alsa/include/alsa/timer.h	/^	SND_TIMER_SCLASS_LAST = SND_TIMER_SCLASS_OSS_SEQUENCER	\/**< last slave timer *\/$/;"	e	enum:_snd_timer_slave_class
SND_TIMER_SCLASS_NONE	alsa/include/alsa/timer.h	/^	SND_TIMER_SCLASS_NONE = 0,		\/**< none *\/$/;"	e	enum:_snd_timer_slave_class
SND_TIMER_SCLASS_OSS_SEQUENCER	alsa/include/alsa/timer.h	/^	SND_TIMER_SCLASS_OSS_SEQUENCER,		\/**< OSS sequencer timer *\/$/;"	e	enum:_snd_timer_slave_class
SND_TIMER_SCLASS_SEQUENCER	alsa/include/alsa/timer.h	/^	SND_TIMER_SCLASS_SEQUENCER,		\/**< sequencer timer *\/$/;"	e	enum:_snd_timer_slave_class
SND_TIMER_TYPE_HW	alsa/include/alsa/timer.h	/^	SND_TIMER_TYPE_HW = 0,$/;"	e	enum:_snd_timer_type
SND_TIMER_TYPE_INET	alsa/include/alsa/timer.h	/^	SND_TIMER_TYPE_INET$/;"	e	enum:_snd_timer_type
SND_TIMER_TYPE_SHM	alsa/include/alsa/timer.h	/^	SND_TIMER_TYPE_SHM,$/;"	e	enum:_snd_timer_type
SND_TPLG_MAX_CHAN	alsa/include/alsa/topology.h	629;"	d
SND_TPLG_TYPE_BE	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_BE,		\/*!< BE DAI link *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_BYTES	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_BYTES,		\/*!< Byte control *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_CC	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_CC,		\/*!< Hostless codec <-> codec link *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_DAPM_GRAPH	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_DAPM_GRAPH,	\/*!< DAPM graph elements *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_DAPM_WIDGET	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_DAPM_WIDGET,	\/*!< DAPM widget *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_DATA	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_DATA,		\/*!< Private data *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_ENUM	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_ENUM,		\/*!< Enumerated control *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_MANIFEST	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_MANIFEST,		\/*!< Topology manifest *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_MIXER	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_MIXER,		\/*!< Mixer control*\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_PCM	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_PCM,		\/*!< PCM stream device *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_STREAM_CAPS	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_STREAM_CAPS,	\/*!< PCM Stream capabilities *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_STREAM_CONFIG	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_STREAM_CONFIG,	\/*!< PCM Stream configuration *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_TEXT	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_TEXT,		\/*!< Text data *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_TLV	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_TLV = 0,		\/*!< TLV Data *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_TOKEN	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_TOKEN,		\/*!< Vendor tokens *\/$/;"	e	enum:snd_tplg_type
SND_TPLG_TYPE_TUPLE	alsa/include/alsa/topology.h	/^	SND_TPLG_TYPE_TUPLE,		\/*!< Vendor tuples *\/$/;"	e	enum:snd_tplg_type
SND_USE_CASE_DEV_BLUETOOTH	alsa/include/alsa/use-case.h	122;"	d
SND_USE_CASE_DEV_EARPIECE	alsa/include/alsa/use-case.h	123;"	d
SND_USE_CASE_DEV_HANDSET	alsa/include/alsa/use-case.h	121;"	d
SND_USE_CASE_DEV_HDMI	alsa/include/alsa/use-case.h	125;"	d
SND_USE_CASE_DEV_HEADPHONES	alsa/include/alsa/use-case.h	119;"	d
SND_USE_CASE_DEV_HEADSET	alsa/include/alsa/use-case.h	120;"	d
SND_USE_CASE_DEV_LINE	alsa/include/alsa/use-case.h	118;"	d
SND_USE_CASE_DEV_NONE	alsa/include/alsa/use-case.h	116;"	d
SND_USE_CASE_DEV_SPDIF	alsa/include/alsa/use-case.h	124;"	d
SND_USE_CASE_DEV_SPEAKER	alsa/include/alsa/use-case.h	117;"	d
SND_USE_CASE_MOD_CAPTURE_MUSIC	alsa/include/alsa/use-case.h	148;"	d
SND_USE_CASE_MOD_CAPTURE_VOICE	alsa/include/alsa/use-case.h	147;"	d
SND_USE_CASE_MOD_ECHO_REF	alsa/include/alsa/use-case.h	152;"	d
SND_USE_CASE_MOD_PLAY_MUSIC	alsa/include/alsa/use-case.h	149;"	d
SND_USE_CASE_MOD_PLAY_TONE	alsa/include/alsa/use-case.h	151;"	d
SND_USE_CASE_MOD_PLAY_VOICE	alsa/include/alsa/use-case.h	150;"	d
SND_USE_CASE_TQ_MUSIC	alsa/include/alsa/use-case.h	164;"	d
SND_USE_CASE_TQ_TONES	alsa/include/alsa/use-case.h	166;"	d
SND_USE_CASE_TQ_VOICE	alsa/include/alsa/use-case.h	165;"	d
SND_USE_CASE_VERB_ANALOG_RADIO	alsa/include/alsa/use-case.h	105;"	d
SND_USE_CASE_VERB_DIGITAL_RADIO	alsa/include/alsa/use-case.h	106;"	d
SND_USE_CASE_VERB_HIFI	alsa/include/alsa/use-case.h	99;"	d
SND_USE_CASE_VERB_HIFI_LOW_POWER	alsa/include/alsa/use-case.h	100;"	d
SND_USE_CASE_VERB_INACTIVE	alsa/include/alsa/use-case.h	98;"	d
SND_USE_CASE_VERB_IP_VOICECALL	alsa/include/alsa/use-case.h	104;"	d
SND_USE_CASE_VERB_VOICE	alsa/include/alsa/use-case.h	101;"	d
SND_USE_CASE_VERB_VOICECALL	alsa/include/alsa/use-case.h	103;"	d
SND_USE_CASE_VERB_VOICE_LOW_POWER	alsa/include/alsa/use-case.h	102;"	d
SNPRINTF	picojson/picojson.h	100;"	d
SNPRINTF	picojson/picojson.h	94;"	d
SOURCE_IP_ADDRESS	tcpserver.cpp	24;"	d	file:
SOURCE_PORT	tcpserver.cpp	23;"	d	file:
SSCAPE_IOCTL_H	alsa/include/alsa/sound/sscape_ioctl.h	2;"	d
SSCAPE_MICROCODE_SIZE	alsa/include/alsa/sound/sscape_ioctl.h	11;"	d
STDC_HEADERS	configure.h	53;"	d
STLENLEN	tcpserver.cpp	28;"	d	file:
SUMLEN	tcpserver.cpp	30;"	d	file:
SYSERR	alsa/include/alsa/error.h	65;"	d
SYSERR	alsa/include/alsa/error.h	68;"	d
SYS_COMMNAD	tcpserver.cpp	/^    SYS_COMMNAD=0x40,$/;"	e	enum:__anon33	file:
SYS_DEVINFO	tcpserver.cpp	/^    SYS_DEVINFO=0x54,$/;"	e	enum:__anon33	file:
SYS_GETINFO	tcpserver.cpp	/^    SYS_GETINFO=0x56,$/;"	e	enum:__anon33	file:
SYS_GET_VERSION	tcpserver.cpp	/^    SYS_GET_VERSION,$/;"	e	enum:__anon33	file:
SYS_HEARTBEAT	tcpserver.cpp	/^    SYS_HEARTBEAT=0x51,$/;"	e	enum:__anon33	file:
SYS_NETSTATUS	tcpserver.cpp	/^    SYS_NETSTATUS,$/;"	e	enum:__anon33	file:
SYS_PBINFO	tcpserver.cpp	/^    SYS_PBINFO=0x53,$/;"	e	enum:__anon33	file:
SYS_PBSTATUS	tcpserver.cpp	/^    SYS_PBSTATUS,$/;"	e	enum:__anon33	file:
SYS_PLAY_WARNINGTONE	tcpserver.cpp	/^    SYS_PLAY_WARNINGTONE=0x50,$/;"	e	enum:__anon33	file:
SYS_RESET	tcpserver.cpp	/^    SYS_RESET,$/;"	e	enum:__anon33	file:
SYS_RETURN_VERSION	tcpserver.cpp	/^    SYS_RETURN_VERSION,$/;"	e	enum:__anon33	file:
SYS_SIMPLELINK	tcpserver.cpp	/^    SYS_SIMPLELINK,$/;"	e	enum:__anon33	file:
SYS_SONGSWITCH	tcpserver.cpp	/^    SYS_SONGSWITCH=0x52,$/;"	e	enum:__anon33	file:
SYS_STUS	tcpserver.cpp	/^    SYS_STUS,$/;"	e	enum:__anon33	file:
SYS_UPGRADE	tcpserver.cpp	/^    SYS_UPGRADE,$/;"	e	enum:__anon33	file:
SYS_USERREG	tcpserver.cpp	/^    SYS_USERREG=0x55,$/;"	e	enum:__anon33	file:
SendData	Simple-WebSocket-Server/client_ws.hpp	/^                SendData(const std::shared_ptr<SendStream> &send_stream, const std::function<void(const boost::system::error_code)> &callback) :$/;"	f	class:SimpleWeb::SocketClientBase::Connection::SendData
SendData	Simple-WebSocket-Server/client_ws.hpp	/^            class SendData {$/;"	c	class:SimpleWeb::SocketClientBase::Connection
SendData	Simple-WebSocket-Server/server_ws.hpp	/^                SendData(const std::shared_ptr<SendStream> &header_stream, const std::shared_ptr<SendStream> &message_stream,$/;"	f	class:SimpleWeb::SocketServerBase::Connection::SendData
SendData	Simple-WebSocket-Server/server_ws.hpp	/^            class SendData {$/;"	c	class:SimpleWeb::SocketServerBase::Connection
SendStream	Simple-WebSocket-Server/client_ws.hpp	/^            SendStream(): std::iostream(&streambuf) {}$/;"	f	class:SimpleWeb::SocketClientBase::SendStream
SendStream	Simple-WebSocket-Server/client_ws.hpp	/^        class SendStream : public std::iostream {$/;"	c	class:SimpleWeb::SocketClientBase
SendStream	Simple-WebSocket-Server/server_ws.hpp	/^            SendStream(): std::ostream(&streambuf) {}$/;"	f	class:SimpleWeb::SocketServerBase::SendStream
SendStream	Simple-WebSocket-Server/server_ws.hpp	/^        class SendStream : public std::ostream {$/;"	c	class:SimpleWeb::SocketServerBase
SimpleWeb	Simple-WebSocket-Server/client_ws.hpp	/^namespace SimpleWeb {$/;"	n
SimpleWeb	Simple-WebSocket-Server/client_wss.hpp	/^namespace SimpleWeb {$/;"	n
SimpleWeb	Simple-WebSocket-Server/crypto.hpp	/^namespace SimpleWeb {$/;"	n
SimpleWeb	Simple-WebSocket-Server/server_ws.hpp	/^namespace SimpleWeb {$/;"	n
SimpleWeb	Simple-WebSocket-Server/server_wss.hpp	/^namespace SimpleWeb {$/;"	n
SocketClient	Simple-WebSocket-Server/client_ws.hpp	/^        SocketClient(const std::string& server_port_path) : SocketClientBase<WS>::SocketClientBase(server_port_path, 80) {};$/;"	f	class:SimpleWeb::SocketClient
SocketClient	Simple-WebSocket-Server/client_ws.hpp	/^    class SocketClient : public SocketClientBase<socket_type> {};$/;"	c	namespace:SimpleWeb
SocketClient	Simple-WebSocket-Server/client_ws.hpp	/^    class SocketClient<WS> : public SocketClientBase<WS> {$/;"	c	namespace:SimpleWeb
SocketClient	Simple-WebSocket-Server/client_wss.hpp	/^        SocketClient(const std::string& server_port_path, bool verify_certificate=true, $/;"	f	class:SimpleWeb::SocketClient
SocketClient	Simple-WebSocket-Server/client_wss.hpp	/^    class SocketClient<WSS> : public SocketClientBase<WSS> {$/;"	c	namespace:SimpleWeb
SocketClientBase	Simple-WebSocket-Server/client_ws.hpp	/^        SocketClientBase(const std::string& host_port_path, unsigned short default_port) {$/;"	f	class:SimpleWeb::SocketClientBase
SocketClientBase	Simple-WebSocket-Server/client_ws.hpp	/^    class SocketClientBase {$/;"	c	namespace:SimpleWeb
SocketClientTest	Simple-WebSocket-Server/tests/parse_test.cpp	/^    SocketClientTest(const std::string& server_port_path) : SocketClientBase<WS>::SocketClientBase(server_port_path, 80) {}$/;"	f	class:SocketClientTest
SocketClientTest	Simple-WebSocket-Server/tests/parse_test.cpp	/^class SocketClientTest : public SocketClientBase<WS> {$/;"	c	file:
SocketServer	Simple-WebSocket-Server/server_ws.hpp	/^        DEPRECATED SocketServer(unsigned short port, size_t thread_pool_size=1, size_t timeout_request=5, size_t timeout_idle=0) : $/;"	f	class:SimpleWeb::SocketServer
SocketServer	Simple-WebSocket-Server/server_ws.hpp	/^        SocketServer() : SocketServerBase<WS>(80) {}$/;"	f	class:SimpleWeb::SocketServer
SocketServer	Simple-WebSocket-Server/server_ws.hpp	/^    class SocketServer : public SocketServerBase<socket_type> {};$/;"	c	namespace:SimpleWeb
SocketServer	Simple-WebSocket-Server/server_ws.hpp	/^    class SocketServer<WS> : public SocketServerBase<WS> {$/;"	c	namespace:SimpleWeb
SocketServer	Simple-WebSocket-Server/server_wss.hpp	/^        DEPRECATED SocketServer(unsigned short port, size_t thread_pool_size, const std::string& cert_file, const std::string& private_key_file, $/;"	f	class:SimpleWeb::SocketServer
SocketServer	Simple-WebSocket-Server/server_wss.hpp	/^        SocketServer(const std::string& cert_file, const std::string& private_key_file,$/;"	f	class:SimpleWeb::SocketServer
SocketServer	Simple-WebSocket-Server/server_wss.hpp	/^    class SocketServer<WSS> : public SocketServerBase<WSS> {$/;"	c	namespace:SimpleWeb
SocketServerBase	Simple-WebSocket-Server/server_ws.hpp	/^        SocketServerBase(unsigned short port) : config(port) {}$/;"	f	class:SimpleWeb::SocketServerBase
SocketServerBase	Simple-WebSocket-Server/server_ws.hpp	/^    class SocketServerBase {$/;"	c	namespace:SimpleWeb
SocketServerTest	Simple-WebSocket-Server/tests/parse_test.cpp	/^    SocketServerTest() : $/;"	f	class:SocketServerTest
SocketServerTest	Simple-WebSocket-Server/tests/parse_test.cpp	/^class SocketServerTest : public SocketServerBase<WS> {$/;"	c	file:
TAGLEN	tcpserver.cpp	27;"	d	file:
TANKMEMADDRREG_ADDR_MASK	alsa/include/alsa/sound/emu10k1.h	238;"	d
TANKMEMADDRREG_ALIGN	alsa/include/alsa/sound/emu10k1.h	240;"	d
TANKMEMADDRREG_CLEAR	alsa/include/alsa/sound/emu10k1.h	239;"	d
TANKMEMADDRREG_READ	alsa/include/alsa/sound/emu10k1.h	242;"	d
TANKMEMADDRREG_WRITE	alsa/include/alsa/sound/emu10k1.h	241;"	d
TCPSERVERRUN_HH	tcpserver.h	4;"	d
TEST	picojson/test.cc	106;"	d	file:
TEST	picojson/test.cc	108;"	d	file:
TEST	picojson/test.cc	118;"	d	file:
TEST	picojson/test.cc	165;"	d	file:
TEST	picojson/test.cc	175;"	d	file:
TEST	picojson/test.cc	51;"	d	file:
TEST	picojson/test.cc	77;"	d	file:
TEST	picojson/test.cc	79;"	d	file:
THF	mw_asr.h	/^	THF$/;"	e	enum:__anon24
UART_COMMAD	tcpserver.cpp	/^    UART_COMMAD=0x0,$/;"	e	enum:__anon33	file:
UOP_GETPBINFO	tcpserver.cpp	/^    UOP_GETPBINFO,$/;"	e	enum:__anon33	file:
UOP_GETSTATUS	tcpserver.cpp	/^    UOP_GETSTATUS,$/;"	e	enum:__anon33	file:
UOP_GETVOL	tcpserver.cpp	/^    UOP_GETVOL,$/;"	e	enum:__anon33	file:
UOP_MUTE	tcpserver.cpp	/^    UOP_MUTE,$/;"	e	enum:__anon33	file:
UOP_NETMUSIC	tcpserver.cpp	/^    UOP_NETMUSIC,$/;"	e	enum:__anon33	file:
UOP_NEXT	tcpserver.cpp	/^    UOP_NEXT,$/;"	e	enum:__anon33	file:
UOP_NEXTALBUM	tcpserver.cpp	/^    UOP_NEXTALBUM,$/;"	e	enum:__anon33	file:
UOP_NEXTARTIST	tcpserver.cpp	/^    UOP_NEXTARTIST,$/;"	e	enum:__anon33	file:
UOP_NEXTC	tcpserver.cpp	/^    UOP_NEXTC,$/;"	e	enum:__anon33	file:
UOP_PLAYPAUSE	tcpserver.cpp	/^    UOP_PLAYPAUSE,$/;"	e	enum:__anon33	file:
UOP_PREV	tcpserver.cpp	/^    UOP_PREV,$/;"	e	enum:__anon33	file:
UOP_PREVALBUM	tcpserver.cpp	/^    UOP_PREVALBUM,$/;"	e	enum:__anon33	file:
UOP_PREVARTIST	tcpserver.cpp	/^    UOP_PREVARTIST,$/;"	e	enum:__anon33	file:
UOP_PREVC	tcpserver.cpp	/^    UOP_PREVC,$/;"	e	enum:__anon33	file:
UOP_SETVOL	tcpserver.cpp	/^    UOP_SETVOL,$/;"	e	enum:__anon33	file:
UOP_STOP	tcpserver.cpp	/^    UOP_STOP,$/;"	e	enum:__anon33	file:
UOP_SWITCHSCR	tcpserver.cpp	/^    UOP_SWITCHSCR,$/;"	e	enum:__anon33	file:
UOP_VOLDOWN	tcpserver.cpp	/^    UOP_VOLDOWN,$/;"	e	enum:__anon33	file:
UOP_VOLUP	tcpserver.cpp	/^    UOP_VOLUP,$/;"	e	enum:__anon33	file:
UPLOAD_APP_URL	config.h	33;"	d
UPLOAD_INDEX_DIR	config.h	35;"	d
UPLOAD_INDEX_URL	config.h	34;"	d
USER_BROWSE_ALARM	tcpserver.cpp	/^    USER_BROWSE_ALARM = 0x72,$/;"	e	enum:__anon33	file:
USER_BROWSE_ALARM_RES	tcpserver.cpp	/^    USER_BROWSE_ALARM_RES = 0x73,$/;"	e	enum:__anon33	file:
USER_COMMAND	tcpserver.cpp	/^    USER_COMMAND=0x60,$/;"	e	enum:__anon33	file:
USER_GET_TIMEZONE	tcpserver.cpp	/^    USER_GET_TIMEZONE = 0x76,$/;"	e	enum:__anon33	file:
USER_GET_TIMEZONE_RES	tcpserver.cpp	/^    USER_GET_TIMEZONE_RES = 0x77,$/;"	e	enum:__anon33	file:
USER_REMOVE_ALARM	tcpserver.cpp	/^    USER_REMOVE_ALARM = 0x74,$/;"	e	enum:__anon33	file:
USER_SET_ALARM	tcpserver.cpp	/^    USER_SET_ALARM = 0x71,$/;"	e	enum:__anon33	file:
USER_SET_TIMEZONE	tcpserver.cpp	/^    USER_SET_TIMEZONE = 0x75,$/;"	e	enum:__anon33	file:
USER_TRANSFER_BRIDGE	config.h	39;"	d
USER_WAKE_UP	config.h	12;"	d
Uartcmd_Notify	tcpserver.cpp	/^unsigned short Uartcmd_Notify(int usock, unsigned char opCode, unsigned char * data,unsigned int len)$/;"	f
Undefined	alsa/include/alsa/sound/hdsp.h	/^	Undefined,$/;"	e	enum:__anon7
VAD_BEGIN	mw_asr.h	/^	VAD_BEGIN,$/;"	e	enum:__anon25
VAD_END	mw_asr.h	/^	VAD_END$/;"	e	enum:__anon25
VERSION	configure.h	56;"	d
VOLUME_CONFIG_FILE	config.h	23;"	d
VOLUME_MAX	config.h	26;"	d
VOLUME_MIN	config.h	25;"	d
WAKEN	mw_asr.h	/^	WAKEN = 0,$/;"	e	enum:__anon25
WAKE_UP_RINGBUFFER_SIZE	config.h	10;"	d
WIFI_CONFIG_FILE	config.h	21;"	d
WS	Simple-WebSocket-Server/client_ws.hpp	/^    typedef boost::asio::ip::tcp::socket WS;$/;"	t	namespace:SimpleWeb
WS	Simple-WebSocket-Server/server_ws.hpp	/^    typedef boost::asio::ip::tcp::socket WS;$/;"	t	namespace:SimpleWeb
WSS	Simple-WebSocket-Server/client_wss.hpp	/^    typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> WSS;    $/;"	t	namespace:SimpleWeb
WSS	Simple-WebSocket-Server/server_wss.hpp	/^    typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> WSS;    $/;"	t	namespace:SimpleWeb
WsClient	Simple-WebSocket-Server/tests/io_test.cpp	/^typedef SimpleWeb::SocketClient<SimpleWeb::WS> WsClient;$/;"	t	file:
WsClient	Simple-WebSocket-Server/ws_examples.cpp	/^typedef SimpleWeb::SocketClient<SimpleWeb::WS> WsClient;$/;"	t	file:
WsServer	Simple-WebSocket-Server/tests/io_test.cpp	/^typedef SimpleWeb::SocketServer<SimpleWeb::WS> WsServer;$/;"	t	file:
WsServer	Simple-WebSocket-Server/ws_examples.cpp	/^typedef SimpleWeb::SocketServer<SimpleWeb::WS> WsServer;$/;"	t	file:
WssClient	Simple-WebSocket-Server/wss_examples.cpp	/^typedef SimpleWeb::SocketClient<SimpleWeb::WSS> WssClient;$/;"	t	file:
WssServer	Simple-WebSocket-Server/wss_examples.cpp	/^typedef SimpleWeb::SocketServer<SimpleWeb::WSS> WssServer;$/;"	t	file:
_MW_ASR_H_	mw_asr.h	2;"	d
_SND_SEQ_TYPE	alsa/include/alsa/seq.h	638;"	d
_SND_SEQ_TYPE_OPT	alsa/include/alsa/seq.h	639;"	d
__ALSA_ASOUNDEF_H	alsa/include/alsa/asoundef.h	29;"	d
__ALSA_CONF_H	alsa/include/alsa/conf.h	29;"	d
__ALSA_CONTROL_EXTERNAL_H	alsa/include/alsa/control_external.h	27;"	d
__ALSA_CONTROL_H	alsa/include/alsa/control.h	29;"	d
__ALSA_ERROR_H	alsa/include/alsa/error.h	29;"	d
__ALSA_GLOBAL_H_	alsa/include/alsa/global.h	29;"	d
__ALSA_HWDEP_H	alsa/include/alsa/hwdep.h	29;"	d
__ALSA_INPUT_H	alsa/include/alsa/input.h	29;"	d
__ALSA_MIXER_ABST_H	alsa/include/alsa/mixer_abst.h	27;"	d
__ALSA_MIXER_H	alsa/include/alsa/mixer.h	29;"	d
__ALSA_OUTPUT_H	alsa/include/alsa/output.h	29;"	d
__ALSA_PCM_EXTERNAL_H	alsa/include/alsa/pcm_external.h	27;"	d
__ALSA_PCM_EXTPLUG_H	alsa/include/alsa/pcm_extplug.h	32;"	d
__ALSA_PCM_H	alsa/include/alsa/pcm.h	30;"	d
__ALSA_PCM_IOPLUG_H	alsa/include/alsa/pcm_ioplug.h	32;"	d
__ALSA_PCM_RATE_H	alsa/include/alsa/pcm_rate.h	32;"	d
__ALSA_RAWMIDI_H	alsa/include/alsa/rawmidi.h	29;"	d
__ALSA_SEQMID_H	alsa/include/alsa/seqmid.h	29;"	d
__ALSA_SEQ_EVENT_H	alsa/include/alsa/seq_event.h	29;"	d
__ALSA_SEQ_H	alsa/include/alsa/seq.h	30;"	d
__ALSA_SEQ_MIDI_EVENT_H	alsa/include/alsa/seq_midi_event.h	29;"	d
__ALSA_TIMER_H	alsa/include/alsa/timer.h	29;"	d
__ALSA_TOPOLOGY_H	alsa/include/alsa/topology.h	22;"	d
__ALSA_USE_CASE_H	alsa/include/alsa/use-case.h	39;"	d
__ASOUNDLIB_H	alsa/include/alsa/asoundlib.h	29;"	d
__LINUX_UAPI_SND_ASOC_H	alsa/include/alsa/sound/asoc.h	16;"	d
__RINGBUFFER_H__	ringbuffer.h	3;"	d
__SND_DLSYM_VERSION	alsa/include/alsa/global.h	57;"	d
__SND_DLSYM_VERSION	alsa/include/alsa/global.h	75;"	d
__SOUND_ASOUND_FM_H	alsa/include/alsa/sound/asound_fm.h	2;"	d
__SOUND_EMU10K1_H	alsa/include/alsa/sound/emu10k1.h	2;"	d
__SOUND_HDSPM_H	alsa/include/alsa/sound/hdspm.h	2;"	d
__SOUND_HDSP_H	alsa/include/alsa/sound/hdsp.h	2;"	d
__SOUND_SB16_CSP_H	alsa/include/alsa/sound/sb16_csp.h	2;"	d
__STDC_FORMAT_MACROS	picojson/picojson.h	70;"	d
__STRING	alsa/include/alsa/global.h	94;"	d
__TYPE_COMPAT_H	alsa/include/alsa/sound/type_compat.h	2;"	d
__UAPI_SOUND_TLV_H	alsa/include/alsa/sound/tlv.h	14;"	d
__be16	alsa/include/alsa/sound/type_compat.h	38;"	d
__be16_to_cpu	alsa/include/alsa/sound/type_compat.h	30;"	d
__be32	alsa/include/alsa/sound/type_compat.h	37;"	d
__be32_to_cpu	alsa/include/alsa/sound/type_compat.h	28;"	d
__be64	alsa/include/alsa/sound/type_compat.h	36;"	d
__be8	alsa/include/alsa/sound/type_compat.h	39;"	d
__cpu_to_be16	alsa/include/alsa/sound/type_compat.h	19;"	d
__cpu_to_be16	alsa/include/alsa/sound/type_compat.h	24;"	d
__cpu_to_be32	alsa/include/alsa/sound/type_compat.h	17;"	d
__cpu_to_be32	alsa/include/alsa/sound/type_compat.h	22;"	d
__cpu_to_le16	alsa/include/alsa/sound/type_compat.h	18;"	d
__cpu_to_le16	alsa/include/alsa/sound/type_compat.h	23;"	d
__cpu_to_le32	alsa/include/alsa/sound/type_compat.h	16;"	d
__cpu_to_le32	alsa/include/alsa/sound/type_compat.h	21;"	d
__inline__	alsa/include/alsa/asoundlib.h	44;"	d
__le16	alsa/include/alsa/sound/type_compat.h	34;"	d
__le16_to_cpu	alsa/include/alsa/sound/type_compat.h	29;"	d
__le32	alsa/include/alsa/sound/type_compat.h	33;"	d
__le32_to_cpu	alsa/include/alsa/sound/type_compat.h	27;"	d
__le64	alsa/include/alsa/sound/type_compat.h	32;"	d
__le8	alsa/include/alsa/sound/type_compat.h	35;"	d
__s16	alsa/include/alsa/sound/type_compat.h	/^typedef int16_t __s16;$/;"	t
__s32	alsa/include/alsa/sound/type_compat.h	/^typedef int32_t __s32;$/;"	t
__s8	alsa/include/alsa/sound/type_compat.h	/^typedef int8_t __s8;$/;"	t
__snd_alloca	alsa/include/alsa/global.h	106;"	d
__u16	alsa/include/alsa/sound/type_compat.h	/^typedef uint16_t __u16;$/;"	t
__u32	alsa/include/alsa/sound/type_compat.h	/^typedef uint32_t __u32;$/;"	t
__u8	alsa/include/alsa/sound/type_compat.h	/^typedef uint8_t __u8;$/;"	t
_indent	picojson/picojson.h	/^template <typename Iter> void value::_indent(Iter oi, int indent) {$/;"	f	class:picojson::value
_jsa	json.h	/^inline t_get<picojson::value::array> operator""_jsa(const char* a_name, size_t a_n)$/;"	f
_jsb	json.h	/^inline t_get<bool> operator""_jsb(const char* a_name, size_t a_n)$/;"	f
_jsn	json.h	/^inline t_get<double> operator""_jsn(const char* a_name, size_t a_n)$/;"	f
_jso	json.h	/^inline t_get<picojson::value::object> operator""_jso(const char* a_name, size_t a_n)$/;"	f
_jss	json.h	/^inline t_get<std::string> operator""_jss(const char* a_name, size_t a_n)$/;"	f
_ok	picojson/picotest/picotest.c	/^void _ok(int cond, const char *fmt, ...)$/;"	f
_parse	picojson/picojson.h	/^template <typename Context, typename Iter> inline Iter _parse(Context &ctx, const Iter &first, const Iter &last, std::string *err) {$/;"	f	namespace:picojson
_parse	picojson/picojson.h	/^template <typename Context, typename Iter> inline bool _parse(Context &ctx, input<Iter> &in) {$/;"	f	namespace:picojson
_parse_array	picojson/picojson.h	/^template <typename Context, typename Iter> inline bool _parse_array(Context &ctx, input<Iter> &in) {$/;"	f	namespace:picojson
_parse_codepoint	picojson/picojson.h	/^template <typename String, typename Iter> inline bool _parse_codepoint(String &out, input<Iter> &in) {$/;"	f	namespace:picojson
_parse_number	picojson/picojson.h	/^template <typename Iter> inline std::string _parse_number(input<Iter> &in) {$/;"	f	namespace:picojson
_parse_object	picojson/picojson.h	/^template <typename Context, typename Iter> inline bool _parse_object(Context &ctx, input<Iter> &in) {$/;"	f	namespace:picojson
_parse_quadhex	picojson/picojson.h	/^template <typename Iter> inline int _parse_quadhex(input<Iter> &in) {$/;"	f	namespace:picojson
_parse_string	picojson/picojson.h	/^template <typename String, typename Iter> inline bool _parse_string(String &out, input<Iter> &in) {$/;"	f	namespace:picojson
_remote_cmd_	tcpserver.cpp	/^typedef struct _remote_cmd_{$/;"	s	file:
_serialize	picojson/picojson.h	/^inline std::string value::_serialize(int indent) const {$/;"	f	class:picojson::value
_serialize	picojson/picojson.h	/^template <typename Iter> void value::_serialize(Iter oi, int indent) const {$/;"	f	class:picojson::value
_sm_class_basic	alsa/include/alsa/mixer_abst.h	/^typedef struct _sm_class_basic {$/;"	s
_sm_selem	alsa/include/alsa/mixer_abst.h	/^typedef struct _sm_selem {$/;"	s
_snd_config_type	alsa/include/alsa/conf.h	/^typedef enum _snd_config_type {$/;"	g
_snd_ctl_elem_iface	alsa/include/alsa/control.h	/^typedef enum _snd_ctl_elem_iface {$/;"	g
_snd_ctl_elem_type	alsa/include/alsa/control.h	/^typedef enum _snd_ctl_elem_type {$/;"	g
_snd_ctl_event_type	alsa/include/alsa/control.h	/^typedef enum _snd_ctl_event_type {$/;"	g
_snd_ctl_type	alsa/include/alsa/control.h	/^typedef enum _snd_ctl_type {$/;"	g
_snd_hdsp_9632_aeb	alsa/include/alsa/sound/hdsp.h	/^struct _snd_hdsp_9632_aeb {$/;"	s
_snd_hdsp_config_info	alsa/include/alsa/sound/hdsp.h	/^struct _snd_hdsp_config_info {$/;"	s
_snd_hdsp_firmware	alsa/include/alsa/sound/hdsp.h	/^struct _snd_hdsp_firmware {$/;"	s
_snd_hdsp_mixer	alsa/include/alsa/sound/hdsp.h	/^struct _snd_hdsp_mixer {$/;"	s
_snd_hdsp_peak_rms	alsa/include/alsa/sound/hdsp.h	/^struct _snd_hdsp_peak_rms {$/;"	s
_snd_hdsp_version	alsa/include/alsa/sound/hdsp.h	/^struct _snd_hdsp_version {$/;"	s
_snd_hwdep_iface	alsa/include/alsa/hwdep.h	/^typedef enum _snd_hwdep_iface {$/;"	g
_snd_hwdep_type	alsa/include/alsa/hwdep.h	/^typedef enum _snd_hwdep_type {$/;"	g
_snd_input_type	alsa/include/alsa/input.h	/^typedef enum _snd_input_type {$/;"	g
_snd_mixer_elem_type	alsa/include/alsa/mixer.h	/^typedef enum _snd_mixer_elem_type {$/;"	g
_snd_mixer_selem_channel_id	alsa/include/alsa/mixer.h	/^typedef enum _snd_mixer_selem_channel_id {$/;"	g
_snd_output_type	alsa/include/alsa/output.h	/^typedef enum _snd_output_type {$/;"	g
_snd_pcm_access	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_access {$/;"	g
_snd_pcm_audio_tstamp_config	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm_audio_tstamp_config {$/;"	s
_snd_pcm_audio_tstamp_report	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm_audio_tstamp_report {$/;"	s
_snd_pcm_channel_area	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm_channel_area {$/;"	s
_snd_pcm_class	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_class {$/;"	g
_snd_pcm_format	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_format {$/;"	g
_snd_pcm_hook_type	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_hook_type {$/;"	g
_snd_pcm_scope_ops	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm_scope_ops {$/;"	s
_snd_pcm_start	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_start {$/;"	g
_snd_pcm_state	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_state {$/;"	g
_snd_pcm_stream	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_stream {$/;"	g
_snd_pcm_subclass	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_subclass {$/;"	g
_snd_pcm_subformat	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_subformat {$/;"	g
_snd_pcm_sync_id	alsa/include/alsa/pcm.h	/^typedef union _snd_pcm_sync_id {$/;"	u
_snd_pcm_tstamp	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_tstamp {$/;"	g
_snd_pcm_tstamp_type	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_tstamp_type {$/;"	g
_snd_pcm_type	alsa/include/alsa/pcm.h	/^enum _snd_pcm_type {$/;"	g
_snd_pcm_xrun	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_xrun {$/;"	g
_snd_rawmidi_stream	alsa/include/alsa/rawmidi.h	/^typedef enum _snd_rawmidi_stream {$/;"	g
_snd_rawmidi_type	alsa/include/alsa/rawmidi.h	/^typedef enum _snd_rawmidi_type {$/;"	g
_snd_seq_type	alsa/include/alsa/seq.h	/^typedef enum _snd_seq_type {$/;"	g
_snd_spcm_duplex_type	alsa/include/alsa/pcm.h	/^typedef enum _snd_spcm_duplex_type {$/;"	g
_snd_spcm_latency	alsa/include/alsa/pcm.h	/^typedef enum _snd_spcm_latency {$/;"	g
_snd_spcm_xrun_type	alsa/include/alsa/pcm.h	/^typedef enum _snd_spcm_xrun_type {$/;"	g
_snd_timer_class	alsa/include/alsa/timer.h	/^typedef enum _snd_timer_class {$/;"	g
_snd_timer_event	alsa/include/alsa/timer.h	/^typedef enum _snd_timer_event {$/;"	g
_snd_timer_read	alsa/include/alsa/timer.h	/^typedef struct _snd_timer_read {$/;"	s
_snd_timer_slave_class	alsa/include/alsa/timer.h	/^typedef enum _snd_timer_slave_class {$/;"	g
_snd_timer_tread	alsa/include/alsa/timer.h	/^typedef struct _snd_timer_tread {$/;"	s
_snd_timer_type	alsa/include/alsa/timer.h	/^typedef enum _snd_timer_type {$/;"	g
_storage	picojson/picojson.h	/^  union _storage {$/;"	u	class:picojson::value
abi	alsa/include/alsa/sound/asoc.h	/^	__le32 abi;		\/* ABI version *\/$/;"	m	struct:snd_soc_tplg_hdr
abstract	alsa/include/alsa/mixer.h	/^	enum snd_mixer_selem_regopt_abstract abstract;$/;"	m	struct:snd_mixer_selem_regopt	typeref:enum:snd_mixer_selem_regopt::snd_mixer_selem_regopt_abstract
ac_check_option	alsa/sbin/alsaconf	/^ac_check_option () {$/;"	f
ac_config_card	alsa/sbin/alsaconf	/^ac_config_card () {$/;"	f
ac_config_legacy	alsa/sbin/alsaconf	/^ac_config_legacy () {$/;"	f
ac_try_capture	alsa/sbin/alsaconf	/^ac_try_capture () {$/;"	f
ac_try_card_cs4231	alsa/sbin/alsaconf	/^ac_try_card_cs4231 () {$/;"	f
ac_try_card_cs4232	alsa/sbin/alsaconf	/^ac_try_card_cs4232 () {$/;"	f
ac_try_card_cs4236	alsa/sbin/alsaconf	/^ac_try_card_cs4236 () {$/;"	f
ac_try_card_es1688	alsa/sbin/alsaconf	/^ac_try_card_es1688 () {$/;"	f
ac_try_card_es18xx	alsa/sbin/alsaconf	/^ac_try_card_es18xx () {$/;"	f
ac_try_card_opl3sa2	alsa/sbin/alsaconf	/^ac_try_card_opl3sa2 () {$/;"	f
ac_try_card_sb16	alsa/sbin/alsaconf	/^ac_try_card_sb16 () {$/;"	f
ac_try_card_sb8	alsa/sbin/alsaconf	/^ac_try_card_sb8 () {$/;"	f
ac_try_dmas	alsa/sbin/alsaconf	/^ac_try_dmas () {$/;"	f
ac_try_irq	alsa/sbin/alsaconf	/^ac_try_irq () {$/;"	f
ac_try_load	alsa/sbin/alsaconf	/^ac_try_load () {$/;"	f
acc_channels	alsa/include/alsa/sound/sb16_csp.h	/^	unsigned short acc_channels;	\/* accepted channels *\/$/;"	m	struct:snd_sb_csp_info
acc_format	alsa/include/alsa/sound/sb16_csp.h	/^	unsigned int acc_format;	\/* accepted PCM formats *\/$/;"	m	struct:snd_sb_csp_info
acc_rates	alsa/include/alsa/sound/sb16_csp.h	/^	unsigned short acc_rates;	\/* accepted sample rates *\/$/;"	m	struct:snd_sb_csp_info
acc_width	alsa/include/alsa/sound/sb16_csp.h	/^	unsigned short acc_width;	\/* accepted sample width *\/$/;"	m	struct:snd_sb_csp_info
accept	Simple-WebSocket-Server/server_ws.hpp	/^        void accept() {$/;"	f	class:SimpleWeb::SocketServer
accept	Simple-WebSocket-Server/server_wss.hpp	/^        void accept() {$/;"	f	class:SimpleWeb::SocketServer
accept	Simple-WebSocket-Server/tests/parse_test.cpp	/^    void accept() {}$/;"	f	class:SocketServerTest
acceptor	Simple-WebSocket-Server/server_ws.hpp	/^        std::unique_ptr<boost::asio::ip::tcp::acceptor> acceptor;$/;"	m	class:SimpleWeb::SocketServerBase
access	alsa/include/alsa/pcm_ioplug.h	/^	snd_pcm_access_t access;	\/**< access type; filled after hw_params is called *\/$/;"	m	struct:snd_pcm_ioplug
access	alsa/include/alsa/sound/asoc.h	/^	__le32 access;$/;"	m	struct:snd_soc_tplg_ctl_hdr
access	alsa/include/alsa/topology.h	/^	int access;		\/*!< Control access *\/$/;"	m	struct:snd_tplg_ctl_template
accuracy	alsa/include/alsa/pcm.h	/^	unsigned int accuracy; \/* up to 4.29s, will be packed in separate field  *\/$/;"	m	struct:_snd_pcm_audio_tstamp_report
accuracy_report	alsa/include/alsa/pcm.h	/^	unsigned int accuracy_report:1; \/* 0 if accuracy unknown, 1 if accuracy field is valid *\/$/;"	m	struct:_snd_pcm_audio_tstamp_report
acex	alsa/sbin/alsaconf	/^acex() {$/;"	f
actual_type	alsa/include/alsa/pcm.h	/^	unsigned int actual_type:4;$/;"	m	struct:_snd_pcm_audio_tstamp_report
ad_gain	alsa/include/alsa/sound/hdsp.h	/^	unsigned char ad_gain;$/;"	m	struct:_snd_hdsp_config_info
adat_sync_check	alsa/include/alsa/sound/hdsp.h	/^	unsigned char adat_sync_check[3];$/;"	m	struct:_snd_hdsp_config_info
adatsync_sync_check	alsa/include/alsa/sound/hdsp.h	/^	unsigned char adatsync_sync_check;$/;"	m	struct:_snd_hdsp_config_info
addons	alsa/include/alsa/sound/hdspm.h	/^	int addons;$/;"	m	struct:hdspm_version
addr	alsa/include/alsa/pcm.h	/^	void *addr;$/;"	m	struct:_snd_pcm_channel_area
addr	alsa/include/alsa/seq_event.h	/^		snd_seq_addr_t addr;		\/**< address *\/$/;"	m	union:snd_seq_event::__anon14
address	Simple-WebSocket-Server/server_ws.hpp	/^            std::string address;$/;"	m	class:SimpleWeb::SocketServerBase::Config
address	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int address;		\/* 31.bit == 1 -> external TRAM *\/$/;"	m	struct:__anon5
adjust_pitch	alsa/include/alsa/pcm_rate.h	/^	int (*adjust_pitch)(void *obj, snd_pcm_rate_info_t *info);$/;"	m	struct:snd_pcm_rate_old_ops
adjust_pitch	alsa/include/alsa/pcm_rate.h	/^	int (*adjust_pitch)(void *obj, snd_pcm_rate_info_t *info);$/;"	m	struct:snd_pcm_rate_ops
aebi	alsa/include/alsa/sound/hdsp.h	/^	int aebi;$/;"	m	struct:_snd_hdsp_9632_aeb
aebo	alsa/include/alsa/sound/hdsp.h	/^	int aebo;$/;"	m	struct:_snd_hdsp_9632_aeb
alisp_cfg	alsa/include/alsa/alisp.h	/^struct alisp_cfg {$/;"	s
am	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char am;		\/* amplitude modulation *\/$/;"	m	struct:snd_dm_fm_voice
am_depth	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char am_depth;		\/* amplitude modulation depth (1=hi) *\/$/;"	m	struct:snd_dm_fm_params
analog_extension_board	alsa/include/alsa/sound/hdsp.h	/^	unsigned char analog_extension_board;$/;"	m	struct:_snd_hdsp_config_info
analog_out	alsa/include/alsa/sound/hdspm.h	/^	unsigned int analog_out;$/;"	m	struct:hdspm_config
appl_ptr	alsa/include/alsa/pcm_ioplug.h	/^	volatile snd_pcm_uframes_t appl_ptr;	\/**< application pointer; read-only *\/$/;"	m	struct:snd_pcm_ioplug
array	alsa/include/alsa/sound/asoc.h	/^		struct snd_soc_tplg_vendor_array array[0];$/;"	m	union:snd_soc_tplg_private::__anon9	typeref:struct:snd_soc_tplg_private::__anon9::snd_soc_tplg_vendor_array
array	picojson/picojson.h	/^  typedef std::vector<value> array;$/;"	t	class:picojson::value
array	picojson/picojson.h	/^typedef value::array array;$/;"	t	namespace:picojson
array_	picojson/picojson.h	/^    array *array_;$/;"	m	union:picojson::value::_storage
array_type	picojson/picojson.h	/^  array_type,$/;"	e	enum:picojson::__anon30
ask_dB_vol	alsa/include/alsa/mixer_abst.h	/^	int (*ask_dB_vol)(snd_mixer_elem_t *elem, int dir, long dbValue, long *value, int xdir);$/;"	m	struct:sm_elem_ops
ask_vol_dB	alsa/include/alsa/mixer_abst.h	/^	int (*ask_vol_dB)(snd_mixer_elem_t *elem, int dir, long value, long *dbValue);$/;"	m	struct:sm_elem_ops
asr_create	mw_asr.h	/^	int (*asr_create)();$/;"	m	struct:__anon27
asr_destroy	mw_asr.h	/^	void (*asr_destroy)();$/;"	m	struct:__anon27
asr_process	mw_asr.h	/^	int (*asr_process)(short*,int);$/;"	m	struct:__anon27
attack	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char attack;		\/* 4 bits: attack rate *\/$/;"	m	struct:snd_dm_fm_voice
audioData_Callback	mw_asr.h	/^typedef void (*audioData_Callback)(void* userp,int seq,unsigned short* pData,unsigned int length);$/;"	t
audioStatusChanged	session.h	/^	static void audioStatusChanged(void* userp,int type){$/;"	f	class:t_session
audioStatus_Changed	mw_asr.h	/^typedef void (*audioStatus_Changed)(void* userp,int type);$/;"	t
audio_dataReceived	session.h	/^	static void audio_dataReceived(void* userp,int seq,unsigned short* pData,unsigned int length){$/;"	f	class:t_session
autosync_ref	alsa/include/alsa/sound/hdsp.h	/^	unsigned char autosync_ref;$/;"	m	struct:_snd_hdsp_config_info
autosync_ref	alsa/include/alsa/sound/hdspm.h	/^	unsigned char autosync_ref;$/;"	m	struct:hdspm_config
autosync_sample_rate	alsa/include/alsa/sound/hdsp.h	/^	unsigned int autosync_sample_rate;$/;"	m	struct:_snd_hdsp_config_info
autosync_sample_rate	alsa/include/alsa/sound/hdspm.h	/^	unsigned int autosync_sample_rate;$/;"	m	struct:hdspm_config
autosync_source	alsa/include/alsa/sound/hdspm.h	/^	enum hdspm_syncsource autosync_source;$/;"	m	struct:hdspm_status	typeref:enum:hdspm_status::hdspm_syncsource
bank	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char bank;$/;"	m	struct:sbi_patch
base	alsa/include/alsa/seq_event.h	/^	unsigned int base;	\/**< skew base *\/$/;"	m	struct:snd_seq_queue_skew
base	alsa/include/alsa/sound/asoc.h	/^	__le32 base;$/;"	m	struct:snd_soc_tplg_bytes_control
base	alsa/include/alsa/topology.h	/^	int base;		\/*!< base register *\/$/;"	m	struct:snd_tplg_bytes_template
base64_string_tests	Simple-WebSocket-Server/tests/crypto_test.cpp	/^const vector<pair<string, string> > base64_string_tests = {$/;"	v
bass	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char bass;$/;"	m	struct:snd_dm_fm_params
bits	audio.h	/^	int bits;$/;"	m	class:t_audio_target
boolean_	picojson/picojson.h	/^    bool boolean_;$/;"	m	union:picojson::value::_storage
boolean_type	picojson/picojson.h	/^  boolean_type,$/;"	e	enum:picojson::__anon30
buffer	ringbuffer.h	/^    char *buffer;$/;"	m	struct:__anon32
buffer_bytes	alsa/include/alsa/sound/asoc.h	/^	__le32 buffer_bytes;	\/* size of buffer in bytes *\/$/;"	m	struct:snd_soc_tplg_stream
buffer_bytes	alsa/include/alsa/topology.h	/^	int buffer_bytes;	\/*!< size of buffer in bytes. *\/$/;"	m	struct:snd_tplg_stream_template
buffer_size	Simple-WebSocket-Server/crypto.hpp	/^        const static size_t buffer_size=131072;$/;"	m	class:SimpleWeb::Crypto
buffer_size	alsa/include/alsa/pcm_ioplug.h	/^	snd_pcm_uframes_t buffer_size;	\/**< buffer size; filled after hw_params is called *\/$/;"	m	struct:snd_pcm_ioplug
buffer_size	alsa/include/alsa/pcm_rate.h	/^	snd_pcm_uframes_t buffer_size;$/;"	m	struct:snd_pcm_rate_side_info
buffer_size	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int buffer_size;	\/* count of buffered samples *\/$/;"	m	struct:__anon6
buffer_size_max	alsa/include/alsa/sound/asoc.h	/^	__le32 buffer_size_max;	\/* max buffer size bytes *\/$/;"	m	struct:snd_soc_tplg_stream_caps
buffer_size_max	alsa/include/alsa/topology.h	/^	unsigned int buffer_size_max;	\/*!< max buffer size bytes *\/$/;"	m	struct:snd_tplg_stream_caps_template
buffer_size_min	alsa/include/alsa/sound/asoc.h	/^	__le32 buffer_size_min;	\/* min buffer size bytes *\/$/;"	m	struct:snd_soc_tplg_stream_caps
buffer_size_min	alsa/include/alsa/topology.h	/^	unsigned int buffer_size_min;	\/*!< min buffer size bytes *\/$/;"	m	struct:snd_tplg_stream_caps_template
build_card_db	alsa/sbin/alsaconf	/^build_card_db () {$/;"	f
bytes_ctl	alsa/include/alsa/topology.h	/^		struct snd_tplg_bytes_template *bytes_ctl;	\/*!< Bytes control *\/$/;"	m	union:snd_tplg_obj_template::__anon23	typeref:struct:snd_tplg_obj_template::__anon23::snd_tplg_bytes_template
c	alsa/include/alsa/control_external.h	/^		snd_ctl_ext_tlv_rw_t *c;$/;"	m	union:snd_ctl_ext::__anon22
callback	Simple-WebSocket-Server/client_ws.hpp	/^                std::function<void(const boost::system::error_code)> callback;$/;"	m	class:SimpleWeb::SocketClientBase::Connection::SendData
callback	Simple-WebSocket-Server/server_ws.hpp	/^                std::function<void(const boost::system::error_code)> callback;$/;"	m	class:SimpleWeb::SocketServerBase::Connection::SendData
callback	alsa/include/alsa/control_external.h	/^	const snd_ctl_ext_callback_t *callback;$/;"	m	struct:snd_ctl_ext
callback	alsa/include/alsa/pcm_extplug.h	/^	const snd_pcm_extplug_callback_t *callback;$/;"	m	struct:snd_pcm_extplug
callback	alsa/include/alsa/pcm_ioplug.h	/^	const snd_pcm_ioplug_callback_t *callback;$/;"	m	struct:snd_pcm_ioplug
caps	alsa/include/alsa/mixer_abst.h	/^	unsigned int caps;$/;"	m	struct:_sm_selem
caps	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_stream_caps caps[2]; \/* playback and capture for DAI *\/$/;"	m	struct:snd_soc_tplg_pcm	typeref:struct:snd_soc_tplg_pcm::snd_soc_tplg_stream_caps
caps	alsa/include/alsa/topology.h	/^	struct snd_tplg_stream_caps_template *caps[2]; \/*!< playback & capture for DAI *\/$/;"	m	struct:snd_tplg_pcm_template	typeref:struct:snd_tplg_pcm_template::snd_tplg_stream_caps_template
capture	alsa/include/alsa/sound/asoc.h	/^	__le32 capture;		\/* supports capture mode *\/$/;"	m	struct:snd_soc_tplg_pcm
capture	alsa/include/alsa/topology.h	/^	unsigned int capture;	\/*!< supports capture mode *\/$/;"	m	struct:snd_tplg_pcm_template
capture_group	alsa/include/alsa/mixer_abst.h	/^	unsigned int capture_group;$/;"	m	struct:_sm_selem
capture_pcm	alsa/include/alsa/mixer.h	/^	snd_pcm_t *capture_pcm;$/;"	m	struct:snd_mixer_selem_regopt
card_clock	alsa/include/alsa/sound/hdspm.h	/^	uint64_t card_clock;$/;"	m	struct:hdspm_status
card_idx	alsa/include/alsa/control_external.h	/^	int card_idx;$/;"	m	struct:snd_ctl_ext
card_specific	alsa/include/alsa/sound/hdspm.h	/^	} card_specific;$/;"	m	struct:hdspm_status	typeref:union:hdspm_status::__anon11
card_type	alsa/include/alsa/sound/hdspm.h	/^	uint8_t card_type; \/* enum hdspm_io_type *\/$/;"	m	struct:hdspm_status
card_type	alsa/include/alsa/sound/hdspm.h	/^	uint8_t card_type; \/* enum hdspm_io_type *\/$/;"	m	struct:hdspm_version
cardname	alsa/include/alsa/sound/hdspm.h	/^	char cardname[20];$/;"	m	struct:hdspm_version
case_insensitive_equals	Simple-WebSocket-Server/client_ws.hpp	/^class case_insensitive_equals {$/;"	c
case_insensitive_equals	Simple-WebSocket-Server/server_ws.hpp	/^class case_insensitive_equals {$/;"	c
case_insensitive_hash	Simple-WebSocket-Server/client_ws.hpp	/^class case_insensitive_hash {$/;"	c
case_insensitive_hash	Simple-WebSocket-Server/server_ws.hpp	/^class case_insensitive_hash {$/;"	c
ch	alsa/include/alsa/sound/hdspm.h	/^	struct hdspm_channelfader ch[HDSPM_MIXER_CHANNELS];$/;"	m	struct:hdspm_mixer	typeref:struct:hdspm_mixer::hdspm_channelfader
channel	alsa/include/alsa/seq_event.h	/^	unsigned char channel;		\/**< channel number *\/$/;"	m	struct:snd_seq_ev_ctrl
channel	alsa/include/alsa/seq_event.h	/^	unsigned char channel;		\/**< channel number *\/$/;"	m	struct:snd_seq_ev_note
channel	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_channel channel[SND_SOC_TPLG_MAX_CHAN];$/;"	m	struct:snd_soc_tplg_enum_control	typeref:struct:snd_soc_tplg_enum_control::snd_soc_tplg_channel
channel	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_channel channel[SND_SOC_TPLG_MAX_CHAN];$/;"	m	struct:snd_soc_tplg_mixer_control	typeref:struct:snd_soc_tplg_mixer_control::snd_soc_tplg_channel
channel	alsa/include/alsa/topology.h	/^	struct snd_tplg_channel_elem channel[SND_TPLG_MAX_CHAN];	\/*!< mapping *\/$/;"	m	struct:snd_tplg_channel_map_template	typeref:struct:snd_tplg_channel_map_template::snd_tplg_channel_elem
channel_format	alsa/include/alsa/sound/hdspm.h	/^			uint8_t channel_format; \/* enum hdspm_madi_channel_format *\/$/;"	m	struct:hdspm_status::__anon11::__anon12
channels	alsa/include/alsa/pcm.h	/^	unsigned int channels;	\/**< number of channels *\/$/;"	m	struct:snd_pcm_chmap
channels	alsa/include/alsa/pcm_extplug.h	/^	unsigned int channels;$/;"	m	struct:snd_pcm_extplug
channels	alsa/include/alsa/pcm_ioplug.h	/^	unsigned int channels;		\/**< number of channels; filled after hw_params is called *\/$/;"	m	struct:snd_pcm_ioplug
channels	alsa/include/alsa/pcm_rate.h	/^	unsigned int channels;$/;"	m	struct:snd_pcm_rate_info
channels	alsa/include/alsa/sound/asoc.h	/^	__le32 channels;	\/* channels *\/$/;"	m	struct:snd_soc_tplg_stream
channels	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int channels;		\/* 16-bit channels count, zero = remove this substream *\/$/;"	m	struct:__anon6
channels	alsa/include/alsa/sound/sb16_csp.h	/^	int channels;		\/* channels, look above *\/$/;"	m	struct:snd_sb_csp_start
channels	alsa/include/alsa/topology.h	/^	int channels;		\/*!< number of channels *\/$/;"	m	struct:snd_tplg_stream_template
channels	audio.h	/^	int channels;$/;"	m	class:t_audio_target
channels_max	alsa/include/alsa/sound/asoc.h	/^	__le32 channels_max;	\/* max channels *\/$/;"	m	struct:snd_soc_tplg_stream_caps
channels_max	alsa/include/alsa/topology.h	/^	unsigned int channels_max;	\/*!< max channels *\/$/;"	m	struct:snd_tplg_stream_caps_template
channels_min	alsa/include/alsa/sound/asoc.h	/^	__le32 channels_min;	\/* min channels *\/$/;"	m	struct:snd_soc_tplg_stream_caps
channels_min	alsa/include/alsa/topology.h	/^	unsigned int channels_min;	\/*!< min channels *\/$/;"	m	struct:snd_tplg_stream_caps_template
check_dma_avail	alsa/sbin/alsaconf	/^check_dma_avail () {$/;"	f
check_irq_avail	alsa/sbin/alsaconf	/^check_irq_avail () {$/;"	f
checksize	ringbuffer.h	/^    int checksize;$/;"	m	struct:__anon32
cleanup	alsa/sbin/alsa-info.sh	/^cleanup() {$/;"	f
cleanup	alsa/sbin/alsaconf	/^cleanup () {$/;"	f
cleanup_hwcfg	alsa/sbin/alsaconf	/^cleanup_hwcfg () {$/;"	f
clear	picojson/picojson.h	/^inline void value::clear() {$/;"	f	class:picojson::value
client	alsa/include/alsa/seq_event.h	/^	unsigned char client;	\/**< Client id *\/$/;"	m	struct:snd_seq_addr
clock_source	alsa/include/alsa/sound/hdsp.h	/^	unsigned char clock_source;$/;"	m	struct:_snd_hdsp_config_info
clock_source	alsa/include/alsa/sound/hdspm.h	/^	unsigned char clock_source;$/;"	m	struct:hdspm_config
close	alsa/include/alsa/control_external.h	/^	void (*close)(snd_ctl_ext_t *ext);$/;"	m	struct:snd_ctl_ext_callback
close	alsa/include/alsa/pcm.h	/^	void (*close)(snd_pcm_scope_t *scope);$/;"	m	struct:_snd_pcm_scope_ops
close	alsa/include/alsa/pcm_extplug.h	/^	int (*close)(snd_pcm_extplug_t *ext);$/;"	m	struct:snd_pcm_extplug_callback
close	alsa/include/alsa/pcm_ioplug.h	/^	int (*close)(snd_pcm_ioplug_t *io);$/;"	m	struct:snd_pcm_ioplug_callback
close	alsa/include/alsa/pcm_rate.h	/^	void (*close)(void *obj);$/;"	m	struct:snd_pcm_rate_old_ops
close	alsa/include/alsa/pcm_rate.h	/^	void (*close)(void *obj);$/;"	m	struct:snd_pcm_rate_ops
closed	Simple-WebSocket-Server/client_ws.hpp	/^            std::atomic<bool> closed;$/;"	m	class:SimpleWeb::SocketClientBase::Connection
closed	Simple-WebSocket-Server/server_ws.hpp	/^            std::atomic<bool> closed;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
cmdid	tcpserver.cpp	/^    unsigned char           cmdid;$/;"	m	struct:_remote_cmd_	file:
code	alsa/include/alsa/sound/emu10k1.h	/^	uint32_t *code;			\/* one instruction - 64 bits *\/$/;"	m	struct:__anon4
code	alsa/include/alsa/sound/sscape_ioctl.h	/^  unsigned char *code;$/;"	m	struct:sscape_microcode
code	alsa/include/alsa/sound/sscape_ioctl.h	/^  unsigned char code[256];$/;"	m	struct:sscape_bootblock
code_valid	alsa/include/alsa/sound/emu10k1.h	/^	unsigned long code_valid[1024\/(sizeof(unsigned long)*8)];  \/* bitmask of valid instructions *\/$/;"	m	struct:__anon4
codec_name	alsa/include/alsa/sound/sb16_csp.h	/^	char codec_name[16];		\/* id name of codec *\/$/;"	m	struct:snd_sb_csp_info
codec_name	alsa/include/alsa/sound/sb16_csp.h	/^	char codec_name[16];		\/* id name of codec *\/$/;"	m	struct:snd_sb_csp_mc_header
comment	alsa/include/alsa/conf.h	/^	char *comment;	\/**< Comments *\/$/;"	m	struct:snd_devname
compress	alsa/include/alsa/sound/asoc.h	/^	__le32 compress;	\/* 1 = compressed; 0 = PCM *\/$/;"	m	struct:snd_soc_tplg_pcm
compress	alsa/include/alsa/topology.h	/^	unsigned int compress;	\/*!< 1 = compressed; 0 = PCM *\/$/;"	m	struct:snd_tplg_pcm_template
config	Simple-WebSocket-Server/server_ws.hpp	/^        Config config;$/;"	m	class:SimpleWeb::SocketServerBase
connect	Simple-WebSocket-Server/client_ws.hpp	/^        void connect() {$/;"	f	class:SimpleWeb::SocketClient
connect	Simple-WebSocket-Server/client_wss.hpp	/^        void connect() {$/;"	f	class:SimpleWeb::SocketClient
connect	Simple-WebSocket-Server/tests/parse_test.cpp	/^    void connect() {}$/;"	f	class:SocketClientTest
connect	alsa/include/alsa/seq_event.h	/^		snd_seq_connect_t connect;	\/**< connect information *\/$/;"	m	union:snd_seq_event::__anon14
connection	Simple-WebSocket-Server/client_ws.hpp	/^        std::shared_ptr<Connection> connection;$/;"	m	class:SimpleWeb::SocketClientBase
connection	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char connection;	\/* 0 for serial, 1 for parallel *\/$/;"	m	struct:snd_dm_fm_voice
connection_close	Simple-WebSocket-Server/server_ws.hpp	/^        void connection_close(const std::shared_ptr<Connection> &connection, Endpoint& endpoint, int status, const std::string& reason) const {$/;"	f	class:SimpleWeb::SocketServerBase
connection_error	Simple-WebSocket-Server/server_ws.hpp	/^        void connection_error(const std::shared_ptr<Connection> &connection, Endpoint& endpoint, const boost::system::error_code& ec) const {$/;"	f	class:SimpleWeb::SocketServerBase
connection_open	Simple-WebSocket-Server/server_ws.hpp	/^        void connection_open(const std::shared_ptr<Connection> &connection, Endpoint& endpoint) {$/;"	f	class:SimpleWeb::SocketServerBase
connections	Simple-WebSocket-Server/server_ws.hpp	/^            std::unordered_set<std::shared_ptr<Connection> > connections;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
connections_mutex	Simple-WebSocket-Server/server_ws.hpp	/^            std::mutex connections_mutex;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
constructor_parse_test1	Simple-WebSocket-Server/tests/parse_test.cpp	/^    void constructor_parse_test1() {$/;"	f	class:SocketClientTest
constructor_parse_test2	Simple-WebSocket-Server/tests/parse_test.cpp	/^    void constructor_parse_test2() {$/;"	f	class:SocketClientTest
constructor_parse_test3	Simple-WebSocket-Server/tests/parse_test.cpp	/^    void constructor_parse_test3() {$/;"	f	class:SocketClientTest
constructor_parse_test4	Simple-WebSocket-Server/tests/parse_test.cpp	/^    void constructor_parse_test4() {$/;"	f	class:SocketClientTest
consumed_	picojson/picojson.h	/^  bool consumed_;$/;"	m	class:picojson::input
contains	picojson/picojson.h	/^inline bool value::contains(const size_t idx) const {$/;"	f	class:picojson::value
contains	picojson/picojson.h	/^inline bool value::contains(const std::string &key) const {$/;"	f	class:picojson::value
context	Simple-WebSocket-Server/client_wss.hpp	/^        boost::asio::ssl::context context;$/;"	m	class:SimpleWeb::SocketClient
context	Simple-WebSocket-Server/server_wss.hpp	/^        boost::asio::ssl::context context;$/;"	m	class:SimpleWeb::SocketServer
control	alsa/include/alsa/seq_event.h	/^		snd_seq_ev_ctrl_t control;	\/**< MIDI control information *\/$/;"	m	union:snd_seq_event::__anon14
control	alsa/include/alsa/sound/asoc.h	/^	char control[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];$/;"	m	struct:snd_soc_tplg_dapm_graph_elem
control_elems	alsa/include/alsa/sound/asoc.h	/^	__le32 control_elems;	\/* number of control elements *\/$/;"	m	struct:snd_soc_tplg_manifest
convert	alsa/include/alsa/pcm_rate.h	/^	void (*convert)(void *obj,$/;"	m	struct:snd_pcm_rate_old_ops
convert	alsa/include/alsa/pcm_rate.h	/^	void (*convert)(void *obj,$/;"	m	struct:snd_pcm_rate_ops
convert_isapnp_id	alsa/sbin/alsaconf	/^convert_isapnp_id () {$/;"	f
convert_s16	alsa/include/alsa/pcm_rate.h	/^	void (*convert_s16)(void *obj, int16_t *dst, unsigned int dst_frames,$/;"	m	struct:snd_pcm_rate_old_ops
convert_s16	alsa/include/alsa/pcm_rate.h	/^	void (*convert_s16)(void *obj, int16_t *dst, unsigned int dst_frames,$/;"	m	struct:snd_pcm_rate_ops
copy	picojson/picojson.h	/^template <typename Iter> void copy(const std::string &s, Iter oi) {$/;"	f	namespace:picojson
count	alsa/include/alsa/sound/asoc.h	/^	__le32 count;		\/* number of elements in block *\/$/;"	m	struct:snd_soc_tplg_hdr
count	alsa/include/alsa/sound/asoc.h	/^	__le32 count;$/;"	m	struct:snd_soc_tplg_enum_control
count	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int count;		\/* count of GPR (1..16) *\/$/;"	m	struct:__anon3
count	alsa/include/alsa/topology.h	/^	int count;		\/*!< Number of graph elements *\/$/;"	m	struct:snd_tplg_graph_template
csp_mode	alsa/include/alsa/sound/sb16_csp.h	/^	unsigned short csp_mode;	\/* CSP mode, see above *\/$/;"	m	struct:snd_sb_csp_info
ctl	alsa/include/alsa/mixer_abst.h	/^	snd_ctl_t *ctl;$/;"	m	struct:_sm_class_basic
ctl	alsa/include/alsa/topology.h	/^	const char *ctl;	\/*!< control name or NULL if no control *\/$/;"	m	struct:snd_tplg_graph_elem
ctl	alsa/include/alsa/topology.h	/^	struct snd_tplg_ctl_template *ctl[0];	\/*!< array of widget controls *\/$/;"	m	struct:snd_tplg_widget_template	typeref:struct:snd_tplg_widget_template::snd_tplg_ctl_template
cur	picojson/picojson.h	/^  Iter cur() const {$/;"	f	class:picojson::input
cur_	picojson/picojson.h	/^  Iter cur_, end_;$/;"	m	class:picojson::input
cur_tests	picojson/picotest/picotest.c	/^struct test_t main_tests, *cur_tests = &main_tests;$/;"	v	typeref:struct:
cymbal	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char cymbal;$/;"	m	struct:snd_dm_fm_params
d	alsa/include/alsa/seq_event.h	/^	unsigned char d[12];		\/**< 8 bit value *\/$/;"	m	struct:snd_seq_ev_raw8
d	alsa/include/alsa/seq_event.h	/^	unsigned int d[3];		\/**< 32 bit value *\/$/;"	m	struct:snd_seq_ev_raw32
d32	alsa/include/alsa/seq_event.h	/^		unsigned int d32[2];		\/**< any data *\/$/;"	m	union:snd_seq_ev_queue_control::__anon13
d8	alsa/include/alsa/seq_event.h	/^		unsigned char d8[8];		\/**< any data *\/$/;"	m	union:snd_seq_ev_queue_control::__anon13
da_gain	alsa/include/alsa/sound/hdsp.h	/^	unsigned char da_gain;$/;"	m	struct:_snd_hdsp_config_info
dai_id	alsa/include/alsa/sound/asoc.h	/^	__le32 dai_id;		\/* unique ID - used to match *\/$/;"	m	struct:snd_soc_tplg_pcm
dai_id	alsa/include/alsa/topology.h	/^	unsigned int dai_id;	\/*!< unique ID - used to match *\/$/;"	m	struct:snd_tplg_pcm_template
dai_link_elems	alsa/include/alsa/sound/asoc.h	/^	__le32 dai_link_elems;	\/* number of DAI link elements *\/$/;"	m	struct:snd_soc_tplg_manifest
dai_name	alsa/include/alsa/sound/asoc.h	/^	char dai_name[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];$/;"	m	struct:snd_soc_tplg_pcm
dai_name	alsa/include/alsa/topology.h	/^	const char *dai_name;	\/*!< DAI name *\/$/;"	m	struct:snd_tplg_pcm_template
data	alsa/include/alsa/seq_event.h	/^	} data;				\/**< event data... *\/$/;"	m	struct:snd_seq_event	typeref:union:snd_seq_event::__anon14
data	alsa/include/alsa/sound/asoc.h	/^		__le32 data[SND_SOC_TPLG_TLV_SIZE];$/;"	m	union:snd_soc_tplg_ctl_tlv::__anon10
data	alsa/include/alsa/sound/asoc.h	/^		char data[0];$/;"	m	union:snd_soc_tplg_private::__anon9
data	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char data[32];$/;"	m	struct:sbi_patch
data	alsa/include/alsa/sound/sb16_csp.h	/^	unsigned char data[SNDRV_SB_CSP_MAX_MICROCODE_FILE_SIZE];$/;"	m	struct:snd_sb_csp_microcode
data	alsa/include/alsa/topology.h	/^	const void *data;	\/*!< data *\/$/;"	m	struct:snd_tplg_pdata_template
data	picojson/examples/github-issues.cc	/^  char *data;  \/\/ response data from server$/;"	m	struct:__anon28	file:
data	tcpserver.cpp	/^    unsigned char   *       data;$/;"	m	struct:_remote_cmd_	file:
debug	alsa/include/alsa/alisp.h	/^	    debug: 1;$/;"	m	struct:alisp_cfg
decay	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char decay;		\/* 4 bits: decay rate *\/$/;"	m	struct:snd_dm_fm_voice
decode	Simple-WebSocket-Server/crypto.hpp	/^            static std::string decode(const std::string &base64) {$/;"	f	class:SimpleWeb::Crypto::Base64
default_parse_context	picojson/picojson.h	/^  default_parse_context(value *out) : out_(out) {$/;"	f	class:picojson::default_parse_context
default_parse_context	picojson/picojson.h	/^class default_parse_context {$/;"	c	namespace:picojson
delay	alsa/include/alsa/pcm_ioplug.h	/^	int (*delay)(snd_pcm_ioplug_t *io, snd_pcm_sframes_t *delayp);$/;"	m	struct:snd_pcm_ioplug_callback
deny_parse_context	picojson/picojson.h	/^class deny_parse_context {$/;"	c	namespace:picojson
dest	alsa/include/alsa/seq_event.h	/^	snd_seq_addr_t dest;		\/**< destination address *\/$/;"	m	struct:snd_seq_event
dest	alsa/include/alsa/seq_event.h	/^	snd_seq_addr_t dest;	\/**< destination address *\/$/;"	m	struct:snd_seq_connect
device	alsa/include/alsa/mixer.h	/^	const char *device;$/;"	m	struct:snd_mixer_selem_regopt
device	alsa/include/alsa/mixer_abst.h	/^	char *device;$/;"	m	struct:_sm_class_basic
device	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int device;		\/* device\/client number *\/$/;"	m	struct:__anon2
dig_subframe	alsa/include/alsa/control.h	/^	unsigned char dig_subframe[4];	\/**< AES\/IEC958 subframe bits *\/$/;"	m	struct:snd_aes_iec958
disable	alsa/include/alsa/pcm.h	/^	void (*disable)(snd_pcm_scope_t *scope);$/;"	m	struct:_snd_pcm_scope_ops
dlsym_name	alsa/include/alsa/global.h	/^	const char *dlsym_name;$/;"	m	struct:snd_dlsym_link
dlsym_ptr	alsa/include/alsa/global.h	/^	const void *dlsym_ptr;$/;"	m	struct:snd_dlsym_link
do_sustain	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char do_sustain;	\/* sustain phase *\/$/;"	m	struct:snd_dm_fm_voice
done_testing	picojson/picotest/picotest.c	/^int done_testing(void)$/;"	f
dout	alsa/include/alsa/alisp.h	/^	snd_output_t *dout;	\/* debug output *\/$/;"	m	struct:alisp_cfg
drain	alsa/include/alsa/pcm_ioplug.h	/^	int (*drain)(snd_pcm_ioplug_t *io);$/;"	m	struct:snd_pcm_ioplug_callback
driver	alsa/include/alsa/control_external.h	/^	char driver[16];$/;"	m	struct:snd_ctl_ext
drop_frame	alsa/include/alsa/sound/hdspm.h	/^	drop_frame,$/;"	e	enum:hdspm_ltc_frame
ds	alsa/include/alsa/sound/hdspm.h	/^	ds,$/;"	e	enum:hdspm_speed
dummy_str	picojson/picojson.h	/^  struct dummy_str {$/;"	s	class:picojson::null_parse_context
dump	alsa/include/alsa/pcm_extplug.h	/^	void (*dump)(snd_pcm_extplug_t *ext, snd_output_t *out);$/;"	m	struct:snd_pcm_extplug_callback
dump	alsa/include/alsa/pcm_ioplug.h	/^	void (*dump)(snd_pcm_ioplug_t *io, snd_output_t *out);$/;"	m	struct:snd_pcm_ioplug_callback
dump	alsa/include/alsa/pcm_rate.h	/^	void (*dump)(void *obj, snd_output_t *out);$/;"	m	struct:snd_pcm_rate_ops
duration	alsa/include/alsa/seq_event.h	/^	unsigned int duration;		\/**< duration until note-off; only for #SND_SEQ_EVENT_NOTE *\/$/;"	m	struct:snd_seq_ev_note
e_severity__ERROR	session.h	/^	e_severity__ERROR,$/;"	e	enum:t_severity
e_severity__INFORMATION	session.h	/^	e_severity__INFORMATION,$/;"	e	enum:t_severity
e_severity__NEVER	session.h	/^	e_severity__NEVER$/;"	e	enum:t_severity
e_severity__TRACE	session.h	/^	e_severity__TRACE,$/;"	e	enum:t_severity
elem	alsa/include/alsa/topology.h	/^	struct snd_tplg_graph_elem elem[0];	\/*!< graph elements *\/$/;"	m	struct:snd_tplg_graph_template	typeref:struct:snd_tplg_graph_template::snd_tplg_graph_elem
elem_count	alsa/include/alsa/control_external.h	/^	int (*elem_count)(snd_ctl_ext_t *ext);$/;"	m	struct:snd_ctl_ext_callback
elem_list	alsa/include/alsa/control_external.h	/^	int (*elem_list)(snd_ctl_ext_t *ext, unsigned int offset, snd_ctl_elem_id_t *id);$/;"	m	struct:snd_ctl_ext_callback
emu10k1_ctl_elem_id_t	alsa/include/alsa/sound/emu10k1.h	/^} emu10k1_ctl_elem_id_t;$/;"	t	typeref:struct:__anon2
emu10k1_ctl_elem_iface	alsa/include/alsa/sound/emu10k1.h	/^enum emu10k1_ctl_elem_iface {$/;"	g
emu10k1_fx8010_code_t	alsa/include/alsa/sound/emu10k1.h	/^} emu10k1_fx8010_code_t;$/;"	t	typeref:struct:__anon4
emu10k1_fx8010_control_gpr_t	alsa/include/alsa/sound/emu10k1.h	/^} emu10k1_fx8010_control_gpr_t;$/;"	t	typeref:struct:__anon3
emu10k1_fx8010_info_t	alsa/include/alsa/sound/emu10k1.h	/^} emu10k1_fx8010_info_t;$/;"	t	typeref:struct:__anon1
emu10k1_fx8010_pcm_t	alsa/include/alsa/sound/emu10k1.h	/^} emu10k1_fx8010_pcm_t;$/;"	t	typeref:struct:__anon6
emu10k1_fx8010_tram_t	alsa/include/alsa/sound/emu10k1.h	/^} emu10k1_fx8010_tram_t;$/;"	t	typeref:struct:__anon5
enable	alsa/include/alsa/pcm.h	/^	int (*enable)(snd_pcm_scope_t *scope);$/;"	m	struct:_snd_pcm_scope_ops
encode	Simple-WebSocket-Server/crypto.hpp	/^            static std::string encode(const std::string &ascii) {$/;"	f	class:SimpleWeb::Crypto::Base64
end_	picojson/picojson.h	/^  Iter cur_, end_;$/;"	m	class:picojson::input
endpoint	Simple-WebSocket-Server/server_ws.hpp	/^        std::map<regex_orderable, Endpoint> endpoint;$/;"	m	class:SimpleWeb::SocketServerBase
enum_ctl	alsa/include/alsa/topology.h	/^		struct snd_tplg_enum_template *enum_ctl;	\/*!< Enum control *\/$/;"	m	union:snd_tplg_obj_template::__anon23	typeref:struct:snd_tplg_obj_template::__anon23::snd_tplg_enum_template
enum_item_name	alsa/include/alsa/mixer_abst.h	/^	int (*enum_item_name)(snd_mixer_elem_t *elem, unsigned int item, size_t maxlen, char *buf);$/;"	m	struct:sm_elem_ops
eout	alsa/include/alsa/alisp.h	/^	snd_output_t *eout;	\/* error output *\/$/;"	m	struct:alisp_cfg
etram	alsa/include/alsa/sound/emu10k1.h	/^	unsigned char etram[32];	\/* external TRAM address & data (one per channel) *\/$/;"	m	struct:__anon6
evaluate_as_boolean	picojson/picojson.h	/^inline bool value::evaluate_as_boolean() const {$/;"	f	class:picojson::value
evaluate_result	alsa/sbin/alsabat-test.sh	/^evaluate_result () {$/;"	f
event	alsa/include/alsa/seq_event.h	/^	int event;		\/**< processed event type *\/$/;"	m	struct:snd_seq_result
event	alsa/include/alsa/timer.h	/^	snd_timer_event_t event;	\/**< Timer event *\/$/;"	m	struct:_snd_timer_tread
event_flags	alsa/include/alsa/sound/asoc.h	/^	__le16 event_flags;$/;"	m	struct:snd_soc_tplg_dapm_widget
event_flags	alsa/include/alsa/topology.h	/^	unsigned short event_flags;	\/*!< PM event sequence flags *\/$/;"	m	struct:snd_tplg_widget_template
event_type	alsa/include/alsa/sound/asoc.h	/^	__le16 event_type;$/;"	m	struct:snd_soc_tplg_dapm_widget
event_type	alsa/include/alsa/topology.h	/^	unsigned short event_type;	\/*!< PM event sequence type *\/$/;"	m	struct:snd_tplg_widget_template
expect	picojson/picojson.h	/^  bool expect(const int expected) {$/;"	f	class:picojson::input
ext	alsa/include/alsa/seq_event.h	/^		snd_seq_ev_ext_t ext;		\/**< external data *\/$/;"	m	union:snd_seq_event::__anon14
ext_ops	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_io_ops ext_ops;$/;"	m	struct:snd_soc_tplg_bytes_control	typeref:struct:snd_soc_tplg_bytes_control::snd_soc_tplg_io_ops
ext_ops	alsa/include/alsa/topology.h	/^	struct snd_tplg_io_ops_template ext_ops;	\/*!< ops mapping *\/$/;"	m	struct:snd_tplg_bytes_template	typeref:struct:snd_tplg_bytes_template::snd_tplg_io_ops_template
extension	alsa/include/alsa/sound/asound_fm.h	/^	char extension[7];$/;"	m	struct:sbi_patch
external_tram_size	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int external_tram_size;	\/* in samples *\/$/;"	m	struct:__anon1
extin_names	alsa/include/alsa/sound/emu10k1.h	/^	char extin_names[16][32];		\/* names of external inputs *\/$/;"	m	struct:__anon1
extout_names	alsa/include/alsa/sound/emu10k1.h	/^	char extout_names[32][32];		\/* names of external outputs *\/$/;"	m	struct:__anon1
f_activated	agent.h	/^	bool f_activated() const$/;"	f	class:t_agent
f_active	session.h	/^		bool f_active() const$/;"	f	class:t_session::t_alert
f_alerts	session.h	/^	const std::map<std::string, t_alert>& f_alerts() const$/;"	f	class:t_session
f_alerts_delete	session.h	/^	void f_alerts_delete(const std::string& a_token)$/;"	f	class:t_session
f_alerts_duration	session.h	/^	size_t f_alerts_duration() const$/;"	f	class:t_session
f_alerts_duration	session.h	/^	void f_alerts_duration(size_t a_value)$/;"	f	class:t_session
f_alerts_event	session.h	/^	void f_alerts_event(const std::string& a_name, const std::string& a_token)$/;"	f	class:t_session
f_alerts_set	session.h	/^	void f_alerts_set(const std::string& a_token, const std::string& a_type, const std::string& a_at)$/;"	f	class:t_session
f_alerts_stop	session.h	/^	void f_alerts_stop(const std::string& a_token)$/;"	f	class:t_session
f_at	audio.h	/^	uint8_t* f_at(bool, int a_bytes, int a_sample, int a_channel)$/;"	f	class:t_audio_decoder
f_at	audio.h	/^	uint8_t* f_at(nullptr_t, int a_bytes, int a_sample, int a_channel)$/;"	f	class:t_audio_decoder
f_at	session.h	/^		const std::string& f_at() const$/;"	f	class:t_session::t_alert
f_audio_content	session.h	/^		void f_audio_content(const char* a_p, size_t a_n)$/;"	f	struct:t_session::t_parser
f_audio_finish	session.h	/^		void f_audio_finish()$/;"	f	struct:t_session::t_parser
f_boundary	session.h	/^		void f_boundary()$/;"	f	struct:t_session::t_parser
f_build_query_string	tiny_http.h	/^inline std::string f_build_query_string(const std::map<std::string, std::string>& a_values)$/;"	f
f_cancel	session.h	/^		void f_cancel()$/;"	f	class:t_session::t_alert
f_capture	session.h	/^	bool f_capture(FILE *fp, char* a_buffer, bool a_busy)$/;"	f	class:t_session
f_capture_auto	session.h	/^	bool f_capture_auto() const$/;"	f	class:t_session
f_capture_auto	session.h	/^	void f_capture_auto(bool a_value)$/;"	f	class:t_session
f_capture_busy	session.h	/^	bool f_capture_busy() const$/;"	f	class:t_session
f_capture_force	session.h	/^	bool f_capture_force() const$/;"	f	class:t_session
f_capture_force	session.h	/^	void f_capture_force(bool a_value)$/;"	f	class:t_session
f_capture_integral	session.h	/^	size_t f_capture_integral() const$/;"	f	class:t_session
f_capture_threshold	session.h	/^	size_t f_capture_threshold() const$/;"	f	class:t_session
f_capture_threshold	session.h	/^	void f_capture_threshold(size_t a_value)$/;"	f	class:t_session
f_clear	session.h	/^		void f_clear()$/;"	f	struct:t_session::t_channel
f_connect	session.h	/^	void f_connect()$/;"	f	class:t_session
f_content	session.h	/^		void f_content(const char* a_p, size_t a_n)$/;"	f	struct:t_session::t_parser
f_content_can_play_in_background	session.h	/^	bool f_content_can_play_in_background() const$/;"	f	class:t_session
f_content_can_play_in_background	session.h	/^	void f_content_can_play_in_background(bool a_value)$/;"	f	class:t_session
f_content_playing	session.h	/^	bool f_content_playing() const$/;"	f	class:t_session
f_context	session.h	/^	picojson::value f_context() const$/;"	f	class:t_session
f_convert	audio.h	/^	T_0 f_convert(T_1 a_x)$/;"	f	class:t_audio_decoder
f_convert	audio.h	/^	T_0 f_convert(double a_x)$/;"	f	class:t_audio_decoder
f_convert	audio.h	/^	T_0 f_convert(float a_x)$/;"	f	class:t_audio_decoder
f_convert	audio.h	/^	T_0 f_convert(int32_t a_x)$/;"	f	class:t_audio_decoder
f_create	agent.h	/^	void f_create()$/;"	f	class:t_agent
f_decode	audio.h	/^	void f_decode(T_target a_target, const AVPacket* a_packet)$/;"	f	class:t_audio_decoder
f_dialog_acquire	session.h	/^	void f_dialog_acquire(t_task& a_task)$/;"	f	class:t_session
f_dialog_active	session.h	/^	bool f_dialog_active() const$/;"	f	class:t_session
f_dialog_playing	session.h	/^	bool f_dialog_playing() const$/;"	f	class:t_session
f_dialog_release	session.h	/^	void f_dialog_release()$/;"	f	class:t_session
f_disconnect	session.h	/^	void f_disconnect()$/;"	f	class:t_session
f_duration	audio.h	/^	double f_duration(unsigned int a_buffer)$/;"	f	class:t_audio_target
f_empty_event	session.h	/^	void f_empty_event(const std::string& a_namespace, const std::string& a_name)$/;"	f	class:t_session
f_event	session.h	/^	void f_event(const picojson::value& a_metadata)$/;"	f	class:t_session
f_exception_encountered	session.h	/^	void f_exception_encountered(const std::string& a_directive, const std::string& a_type, const char* a_message)$/;"	f	class:t_session
f_expecting_speech	session.h	/^	bool f_expecting_speech() const$/;"	f	class:t_session
f_flush	audio.h	/^	int f_flush()$/;"	f	class:t_audio_target
f_flush	multipart.h	/^	void f_flush()$/;"	f	class:t_multipart
f_flush	session.h	/^		void f_flush()$/;"	f	struct:t_session::t_channel
f_get	audio.h	/^	int f_get() const$/;"	f	class:t_audio_target
f_grant	agent.h	/^	void f_grant(const std::string& a_code, T_done a_done) \/\/$/;"	f	class:t_agent
f_grant	agent.h	/^	void f_grant(std::map<std::string, std::string>&& a_query, T_done a_done)$/;"	f	class:t_agent
f_grant	agent.h	/^	void f_grant(string clientId,const std::string& a_code,string redirectUri,string codeVerifier, T_done a_done) \/\/$/;"	f	class:t_agent
f_ignore_content	session.h	/^		void f_ignore_content(const char* a_p, size_t a_n)$/;"	f	struct:t_session::t_parser
f_ignore_finish	session.h	/^		void f_ignore_finish()$/;"	f	struct:t_session::t_parser
f_io	scheduler.h	/^	boost::asio::io_service& f_io()$/;"	f	class:t_scheduler
f_json_content	session.h	/^		void f_json_content(const char* a_p, size_t a_n)$/;"	f	struct:t_session::t_parser
f_json_finish	session.h	/^		void f_json_finish()$/;"	f	struct:t_session::t_parser
f_load_sound	agent.h	/^	static void f_load_sound(ALuint a_buffer, const std::string& a_path)$/;"	f	class:t_agent
f_loop	session.h	/^		void f_loop(t_audio_decoder& a_decoder)$/;"	f	struct:t_session::t_channel
f_metadata	session.h	/^	picojson::value f_metadata(const std::string& a_namespace, const std::string& a_name, picojson::value::object&& a_payload)$/;"	f	class:t_session
f_notify	scheduler.h	/^	void f_notify()$/;"	f	class:t_task
f_offset	audio.h	/^	double f_offset() const$/;"	f	class:t_audio_target
f_offset	session.h	/^		long f_offset() const $/;"	f	struct:t_session::t_channel
f_online	session.h	/^	bool f_online() const$/;"	f	class:t_session
f_open	session.h	/^		t_audio_source* f_open(std::function<void()>&& a_stuttering, std::function<void()>&& a_stuttered)$/;"	f	struct:t_session::t_attached_audio
f_parse_query_string	tiny_http.h	/^inline std::map<std::string, std::string> f_parse_query_string(const std::string& a_query)$/;"	f
f_part	session.h	/^		void f_part(const std::string& a_type, const std::string& a_id)$/;"	f	struct:t_session::t_parser
f_playback_event	session.h	/^	void f_playback_event(const std::string& a_name)$/;"	f	class:t_session
f_playback_next	session.h	/^	void f_playback_next()$/;"	f	class:t_session
f_playback_pause	session.h	/^	void f_playback_pause()$/;"	f	class:t_session
f_playback_play	session.h	/^	void f_playback_play()$/;"	f	class:t_session
f_playback_previous	session.h	/^	void f_playback_previous()$/;"	f	class:t_session
f_player_background	session.h	/^	void f_player_background(T_done a_done)$/;"	f	class:t_session
f_player_event	session.h	/^	void f_player_event(const std::string& a_name)$/;"	f	class:t_session
f_player_foreground	session.h	/^	void f_player_foreground()$/;"	f	class:t_session
f_post	scheduler.h	/^	void f_post(std::function<void(boost::asio::yield_context&)>&& a_action)$/;"	f	class:t_task
f_post	session.h	/^	const nghttp2::asio_http2::client::request* f_post(T_data a_data)$/;"	f	class:t_session
f_queue	session.h	/^		void f_queue(std::function<void()>&& a_directive)$/;"	f	struct:t_session::t_channel
f_read	audio.h	/^	static int f_read(void* a_opaque, uint8_t* a_p, int a_n)$/;"	f	class:t_callback_audio_source
f_recognizer	session.h	/^	void f_recognizer() $/;"	f	class:t_session
f_reconnect	session.h	/^	void f_reconnect()$/;"	f	class:t_session
f_refresh	agent.h	/^	void f_refresh(const std::string& a_token)$/;"	f	class:t_agent
f_remain	audio.h	/^	double f_remain() const$/;"	f	class:t_audio_target
f_reset	audio.h	/^	void f_reset()$/;"	f	class:t_audio_target
f_run	session.h	/^		void f_run()$/;"	f	struct:t_session::t_channel
f_run_every	scheduler.h	/^	boost::asio::steady_timer& f_run_every(const boost::asio::steady_timer::duration& a_duration, T_callback a_callback)$/;"	f	class:t_scheduler
f_run_every	scheduler.h	/^	void f_run_every(std::set<std::unique_ptr<boost::asio::steady_timer>>::iterator a_i, const boost::asio::steady_timer::duration& a_duration, T_callback a_callback)$/;"	f	class:t_scheduler
f_run_in	scheduler.h	/^	boost::asio::steady_timer& f_run_in(const boost::asio::steady_timer::duration& a_duration, T_callback a_callback)$/;"	f	class:t_scheduler
f_scheduler	agent.h	/^	t_scheduler& f_scheduler() const$/;"	f	class:t_agent
f_scheduler	session.h	/^	t_scheduler& f_scheduler() const$/;"	f	class:t_session
f_session	agent.h	/^	t_session* f_session() const$/;"	f	class:t_agent
f_setup	session.h	/^	void f_setup(const nghttp2::asio_http2::client::response& a_response)$/;"	f	class:t_session
f_shutdown	scheduler.h	/^	void f_shutdown(T_done&& a_done)$/;"	f	class:t_scheduler
f_spawn	scheduler.h	/^	void f_spawn(T_main&& a_main)$/;"	f	class:t_scheduler
f_speaker_apply	session.h	/^	void f_speaker_apply()$/;"	f	class:t_session
f_speaker_event	session.h	/^	void f_speaker_event(const std::string& a_name)$/;"	f	class:t_session
f_speaker_muted	session.h	/^	bool f_speaker_muted() const$/;"	f	class:t_session
f_speaker_muted	session.h	/^	void f_speaker_muted(bool a_muted)$/;"	f	class:t_session
f_speaker_volume	session.h	/^	long f_speaker_volume() const$/;"	f	class:t_session
f_speaker_volume	session.h	/^	void f_speaker_volume(long a_volume)$/;"	f	class:t_session
f_start	agent.h	/^	void f_start(boost::asio::io_service& a_io, T_done a_done)$/;"	f	class:t_agent
f_stop	agent.h	/^	void f_stop(T_done a_done)$/;"	f	class:t_agent
f_stop	audio.h	/^	void f_stop()$/;"	f	class:t_audio_target
f_stop	session.h	/^		void f_stop()$/;"	f	struct:t_session::t_channel
f_token	session.h	/^	void f_token(const std::string& a_token)$/;"	f	class:t_session
f_type	session.h	/^		const std::string& f_type() const$/;"	f	class:t_session::t_alert
f_unqueue	audio.h	/^	void f_unqueue(unsigned int* a_p, size_t a_n)$/;"	f	class:t_audio_target
f_uri_decode	tiny_http.h	/^T_out f_uri_decode(T_in a_first, T_in a_last, T_out a_out)$/;"	f
f_uri_decode	tiny_http.h	/^inline std::string f_uri_decode(const std::string& a_x)$/;"	f
f_uri_encode	tiny_http.h	/^T_out f_uri_encode(T_in a_first, T_in a_last, T_out a_out)$/;"	f
f_uri_safe	tiny_http.h	/^inline bool f_uri_safe(char a_c)$/;"	f
f_wait	scheduler.h	/^	void f_wait(const boost::asio::steady_timer::duration& a_duration = std::chrono::duration<int>::max())$/;"	f	class:t_task
f_web_socket	main.cpp	/^void f_web_socket(t_agent& a_agent)$/;"	f
f_write	audio.h	/^	void f_write(int a_channels, T_planer a_planer, T_target a_target)$/;"	f	class:t_audio_decoder
f_write	multipart.h	/^	void f_write(const char* a_p, size_t a_n)$/;"	f	class:t_multipart
f_write_content	multipart.h	/^	size_t f_write_content(const char* a_p, size_t a_n)$/;"	f	class:t_multipart
f_write_header	multipart.h	/^	size_t f_write_header(const char* a_p, size_t a_n)$/;"	f	class:t_multipart
f_write_ignore	multipart.h	/^	size_t f_write_ignore(const char* a_p, size_t a_n)$/;"	f	class:t_multipart
failed	picojson/picotest/picotest.c	/^    int failed;$/;"	m	struct:test_t	file:
farewell	alsa/sbin/alsaconf	/^farewell() {$/;"	f
fcnt	audio.h	/^static char fcnt = 0;$/;"	v
feature_list_test	alsa/sbin/alsabat-test.sh	/^feature_list_test () {$/;"	f
feature_test	alsa/sbin/alsabat-test.sh	/^feature_test () {$/;"	f
feedback	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char feedback;		\/* 3 bits: feedback for op0 *\/$/;"	m	struct:snd_dm_fm_voice
fin_rsv_opcode	Simple-WebSocket-Server/client_ws.hpp	/^            unsigned char fin_rsv_opcode;$/;"	m	class:SimpleWeb::SocketClientBase::Message
fin_rsv_opcode	Simple-WebSocket-Server/server_ws.hpp	/^            unsigned char fin_rsv_opcode;$/;"	m	class:SimpleWeb::SocketServerBase::Message
find_device_name	alsa/sbin/alsaconf	/^find_device_name () {$/;"	f
find_elem	alsa/include/alsa/control_external.h	/^	snd_ctl_ext_key_t (*find_elem)(snd_ctl_ext_t *ext, const snd_ctl_elem_id_t *id);$/;"	m	struct:snd_ctl_ext_callback
firmware_data	alsa/include/alsa/sound/hdsp.h	/^	void *firmware_data;	\/* 24413 x 4 bytes *\/$/;"	m	struct:_snd_hdsp_firmware
firmware_rev	alsa/include/alsa/sound/hdsp.h	/^	unsigned short firmware_rev;$/;"	m	struct:_snd_hdsp_version
firmware_rev	alsa/include/alsa/sound/hdspm.h	/^	unsigned short firmware_rev;$/;"	m	struct:hdspm_version
first	alsa/include/alsa/pcm.h	/^	unsigned int first;$/;"	m	struct:_snd_pcm_channel_area
flags	alsa/include/alsa/pcm_ioplug.h	/^	unsigned int flags;	\/**< SND_PCM_IOPLUG_FLAG_XXX *\/$/;"	m	struct:snd_pcm_ioplug
flags	alsa/include/alsa/seq_event.h	/^	unsigned char flags;		\/**< event flags *\/$/;"	m	struct:snd_seq_event
fm_mode	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char fm_mode;		\/* OPL mode, see SNDRV_DM_FM_MODE_XXX *\/$/;"	m	struct:snd_dm_fm_info
fnum	alsa/include/alsa/sound/asound_fm.h	/^	unsigned int fnum;	\/* 10 bits: frequency number *\/$/;"	m	struct:snd_dm_fm_note
format	alsa/include/alsa/pcm_extplug.h	/^	snd_pcm_format_t format;$/;"	m	struct:snd_pcm_extplug
format	alsa/include/alsa/pcm_ioplug.h	/^	snd_pcm_format_t format;	\/**< PCM format; filled after hw_params is called *\/$/;"	m	struct:snd_pcm_ioplug
format	alsa/include/alsa/pcm_rate.h	/^	snd_pcm_format_t format;$/;"	m	struct:snd_pcm_rate_side_info
format	alsa/include/alsa/sound/asoc.h	/^	__le64 format;		\/* SNDRV_PCM_FMTBIT_* *\/$/;"	m	struct:snd_soc_tplg_stream
format	alsa/include/alsa/sound/hdspm.h	/^	enum hdspm_ltc_format format;$/;"	m	struct:hdspm_ltc	typeref:enum:hdspm_ltc::hdspm_ltc_format
format	alsa/include/alsa/topology.h	/^	int format;		\/*!< SNDRV_PCM_FMTBIT_* *\/$/;"	m	struct:snd_tplg_stream_template
format_invalid	alsa/include/alsa/sound/hdspm.h	/^	format_invalid,$/;"	e	enum:hdspm_ltc_format
formats	alsa/include/alsa/sound/asoc.h	/^	__le64 formats;	\/* supported formats SNDRV_PCM_FMTBIT_* *\/$/;"	m	struct:snd_soc_tplg_stream_caps
formats	alsa/include/alsa/topology.h	/^	uint64_t formats;	\/*!< supported formats SNDRV_PCM_FMTBIT_* *\/$/;"	m	struct:snd_tplg_stream_caps_template
fp	audio.h	/^	FILE *fp = NULL;$/;"	m	class:t_audio_target
fps_24	alsa/include/alsa/sound/hdspm.h	/^	fps_24,$/;"	e	enum:hdspm_ltc_format
fps_25	alsa/include/alsa/sound/hdspm.h	/^	fps_25,$/;"	e	enum:hdspm_ltc_format
fps_2997	alsa/include/alsa/sound/hdspm.h	/^	fps_2997,$/;"	e	enum:hdspm_ltc_format
fps_30	alsa/include/alsa/sound/hdspm.h	/^	fps_30$/;"	e	enum:hdspm_ltc_format
frame	alsa/include/alsa/sound/hdspm.h	/^	enum hdspm_ltc_frame frame;$/;"	m	struct:hdspm_ltc	typeref:enum:hdspm_ltc::hdspm_ltc_frame
frame_format	alsa/include/alsa/sound/hdspm.h	/^			uint8_t frame_format; \/* enum hdspm_madi_frame_format *\/$/;"	m	struct:hdspm_status::__anon11::__anon12
frame_invalid	alsa/include/alsa/sound/hdspm.h	/^	frame_invalid,$/;"	e	enum:hdspm_ltc_frame
free	alsa/include/alsa/pcm_rate.h	/^	void (*free)(void *obj);$/;"	m	struct:snd_pcm_rate_old_ops
free	alsa/include/alsa/pcm_rate.h	/^	void (*free)(void *obj);$/;"	m	struct:snd_pcm_rate_ops
free_key	alsa/include/alsa/control_external.h	/^	void (*free_key)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key);$/;"	m	struct:snd_ctl_ext_callback
frequency	audio.h	/^	int frequency;$/;"	m	class:t_audio_target
full_frame	alsa/include/alsa/sound/hdspm.h	/^	full_frame$/;"	e	enum:hdspm_ltc_frame
func_nr	alsa/include/alsa/sound/sb16_csp.h	/^	unsigned short func_nr;		\/* function number *\/$/;"	m	struct:snd_sb_csp_info
func_req	alsa/include/alsa/sound/sb16_csp.h	/^	unsigned short func_req;	\/* requested function *\/$/;"	m	struct:snd_sb_csp_mc_header
fxbus_names	alsa/include/alsa/sound/emu10k1.h	/^	char fxbus_names[16][32];		\/* names of FXBUSes *\/$/;"	m	struct:__anon1
g_WakeUpRingBuffer	main.cpp	/^RingBuffer_t g_WakeUpRingBuffer;$/;"	v
g_authCode	tcpserver.cpp	/^string g_authCode;$/;"	v
g_can_refresh	tcpserver.cpp	/^bool g_can_refresh = false;$/;"	v
g_clientId	tcpserver.cpp	/^string g_clientId;$/;"	v
g_codeVerifier	tcpserver.cpp	/^string g_codeVerifier;$/;"	v
g_redirectUri	tcpserver.cpp	/^string g_redirectUri;$/;"	v
generate_handshake	Simple-WebSocket-Server/server_ws.hpp	/^        bool generate_handshake(const std::shared_ptr<Connection> &connection, std::ostream& handshake) const {$/;"	f	class:SimpleWeb::SocketServerBase
get	alsa/include/alsa/sound/asoc.h	/^	__le32 get;$/;"	m	struct:snd_soc_tplg_io_ops
get	alsa/include/alsa/topology.h	/^	int get;	\/*!< get callback ID *\/$/;"	m	struct:snd_tplg_io_ops_template
get	picojson/picojson.h	/^inline const value &value::get(const size_t idx) const {$/;"	f	class:picojson::value
get	picojson/picojson.h	/^inline const value &value::get(const std::string &key) const {$/;"	f	class:picojson::value
get	picojson/picojson.h	/^inline value &value::get(const size_t idx) {$/;"	f	class:picojson::value
get	picojson/picojson.h	/^inline value &value::get(const std::string &key) {$/;"	f	class:picojson::value
get_alsa_library_version	alsa/sbin/alsa-info.sh	/^get_alsa_library_version() {$/;"	f
get_attribute	alsa/include/alsa/control_external.h	/^	int (*get_attribute)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key,$/;"	m	struct:snd_ctl_ext_callback
get_chmap	alsa/include/alsa/pcm_extplug.h	/^	snd_pcm_chmap_t *(*get_chmap)(snd_pcm_extplug_t *ext);$/;"	m	struct:snd_pcm_extplug_callback
get_chmap	alsa/include/alsa/pcm_ioplug.h	/^	snd_pcm_chmap_t *(*get_chmap)(snd_pcm_ioplug_t *io);$/;"	m	struct:snd_pcm_ioplug_callback
get_connections	Simple-WebSocket-Server/server_ws.hpp	/^            std::unordered_set<std::shared_ptr<Connection> > get_connections() {$/;"	f	class:SimpleWeb::SocketServerBase::Endpoint
get_connections	Simple-WebSocket-Server/server_ws.hpp	/^        std::unordered_set<std::shared_ptr<Connection> > get_connections() {$/;"	f	class:SimpleWeb::SocketServerBase
get_dB	alsa/include/alsa/mixer_abst.h	/^	int (*get_dB)(snd_mixer_elem_t *elem, int dir, snd_mixer_selem_channel_id_t channel, long *value);$/;"	m	struct:sm_elem_ops
get_dB_range	alsa/include/alsa/mixer_abst.h	/^	int (*get_dB_range)(snd_mixer_elem_t *elem, int dir, long *min, long *max);$/;"	m	struct:sm_elem_ops
get_dma_pair	alsa/sbin/alsaconf	/^get_dma_pair () {$/;"	f
get_enum_item	alsa/include/alsa/mixer_abst.h	/^	int (*get_enum_item)(snd_mixer_elem_t *elem, snd_mixer_selem_channel_id_t channel, unsigned int *itemp);$/;"	m	struct:sm_elem_ops
get_enumerated_info	alsa/include/alsa/control_external.h	/^	int (*get_enumerated_info)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, unsigned int *items);$/;"	m	struct:snd_ctl_ext_callback
get_enumerated_name	alsa/include/alsa/control_external.h	/^	int (*get_enumerated_name)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, unsigned int item,$/;"	m	struct:snd_ctl_ext_callback
get_hwcfg_type	alsa/sbin/alsaconf	/^get_hwcfg_type () {$/;"	f
get_integer64_info	alsa/include/alsa/control_external.h	/^	int (*get_integer64_info)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key,$/;"	m	struct:snd_ctl_ext_callback
get_integer_info	alsa/include/alsa/control_external.h	/^	int (*get_integer_info)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key,$/;"	m	struct:snd_ctl_ext_callback
get_last_error	picojson/picojson.h	/^inline const std::string &get_last_error() {$/;"	f	namespace:picojson
get_range	alsa/include/alsa/mixer_abst.h	/^	int (*get_range)(snd_mixer_elem_t *elem, int dir, long *min, long *max);$/;"	m	struct:sm_elem_ops
get_supported_rates	alsa/include/alsa/pcm_rate.h	/^	int (*get_supported_rates)(void *obj, unsigned int *rate_min,$/;"	m	struct:snd_pcm_rate_ops
get_switch	alsa/include/alsa/mixer_abst.h	/^	int (*get_switch)(snd_mixer_elem_t *elem, int dir, snd_mixer_selem_channel_id_t channel, int *value);$/;"	m	struct:sm_elem_ops
get_timeout_timer	Simple-WebSocket-Server/server_ws.hpp	/^        std::shared_ptr<boost::asio::deadline_timer> get_timeout_timer(const std::shared_ptr<Connection> &connection, size_t seconds) {$/;"	f	class:SimpleWeb::SocketServerBase
get_volume	alsa/include/alsa/mixer_abst.h	/^	int (*get_volume)(snd_mixer_elem_t *elem, int dir, snd_mixer_selem_channel_id_t channel, long *value);$/;"	m	struct:sm_elem_ops
getc	picojson/picojson.h	/^  int getc() {$/;"	f	class:picojson::input
gettext	alsa/sbin/alsaconf	/^  gettext() {$/;"	f
gpr	alsa/include/alsa/sound/emu10k1.h	/^	unsigned short gpr[32];		\/* GPR number(s) *\/$/;"	m	struct:__anon3
gpr_add_control_count	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int gpr_add_control_count; \/* count of GPR controls to add\/replace *\/$/;"	m	struct:__anon4
gpr_add_controls	alsa/include/alsa/sound/emu10k1.h	/^	emu10k1_fx8010_control_gpr_t *gpr_add_controls; \/* GPR controls to add\/replace *\/$/;"	m	struct:__anon4
gpr_controls	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int gpr_controls;		\/* count of GPR controls *\/$/;"	m	struct:__anon1
gpr_count	alsa/include/alsa/sound/emu10k1.h	/^	unsigned short gpr_count;	\/* GPR containing count of samples between two interrupts (host) *\/$/;"	m	struct:__anon6
gpr_del_control_count	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int gpr_del_control_count; \/* count of GPR controls to remove *\/$/;"	m	struct:__anon4
gpr_del_controls	alsa/include/alsa/sound/emu10k1.h	/^	emu10k1_ctl_elem_id_t *gpr_del_controls; \/* IDs of GPR controls to remove *\/$/;"	m	struct:__anon4
gpr_list_control_count	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int gpr_list_control_count; \/* count of GPR controls to list *\/$/;"	m	struct:__anon4
gpr_list_control_total	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int gpr_list_control_total; \/* total count of GPR controls *\/$/;"	m	struct:__anon4
gpr_list_controls	alsa/include/alsa/sound/emu10k1.h	/^	emu10k1_fx8010_control_gpr_t *gpr_list_controls; \/* listed GPR controls *\/$/;"	m	struct:__anon4
gpr_map	alsa/include/alsa/sound/emu10k1.h	/^	uint32_t *gpr_map;		  \/* initializers *\/$/;"	m	struct:__anon4
gpr_ptr	alsa/include/alsa/sound/emu10k1.h	/^	unsigned short gpr_ptr;		\/* GPR containing current pointer in the ring buffer (host = reset, FX8010) *\/$/;"	m	struct:__anon6
gpr_running	alsa/include/alsa/sound/emu10k1.h	/^	unsigned short gpr_running;	\/* GPR containing info if PCM is running (FX8010) *\/$/;"	m	struct:__anon6
gpr_size	alsa/include/alsa/sound/emu10k1.h	/^	unsigned short gpr_size;		\/* GPR containing size of ringbuffer in samples (host) *\/$/;"	m	struct:__anon6
gpr_tmpcount	alsa/include/alsa/sound/emu10k1.h	/^	unsigned short gpr_tmpcount;	\/* GPR containing current count of samples to interrupt (host = set, FX8010) *\/$/;"	m	struct:__anon6
gpr_trigger	alsa/include/alsa/sound/emu10k1.h	/^	unsigned short gpr_trigger;	\/* GPR containing trigger (activate) information (host) *\/$/;"	m	struct:__anon6
gpr_valid	alsa/include/alsa/sound/emu10k1.h	/^	unsigned long gpr_valid[0x200\/(sizeof(unsigned long)*8)]; \/* bitmask of valid initializers *\/$/;"	m	struct:__anon4
graph	alsa/include/alsa/topology.h	/^		struct snd_tplg_graph_template *graph;		\/*!< Graph elements *\/$/;"	m	union:snd_tplg_obj_template::__anon23	typeref:struct:snd_tplg_obj_template::__anon23::snd_tplg_graph_template
graph_elems	alsa/include/alsa/sound/asoc.h	/^	__le32 graph_elems;	\/* number of graph elements *\/$/;"	m	struct:snd_soc_tplg_manifest
handle	alsa/include/alsa/control_external.h	/^	snd_ctl_t *handle;$/;"	m	struct:snd_ctl_ext
handlerUserOP	tcpserver.cpp	/^unsigned char handlerUserOP(int sock, unsigned char opCode,unsigned char * data,int len)$/;"	f
handshake	Simple-WebSocket-Server/client_ws.hpp	/^        void handshake() {$/;"	f	class:SimpleWeb::SocketClientBase
harmonic	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char harmonic;		\/* 4 bits: harmonic and multiplier *\/$/;"	m	struct:snd_dm_fm_voice
hctl	alsa/include/alsa/mixer_abst.h	/^	snd_hctl_t *hctl;$/;"	m	struct:_sm_class_basic
hdr	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_ctl_hdr hdr;$/;"	m	struct:snd_soc_tplg_bytes_control	typeref:struct:snd_soc_tplg_bytes_control::snd_soc_tplg_ctl_hdr
hdr	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_ctl_hdr hdr;$/;"	m	struct:snd_soc_tplg_enum_control	typeref:struct:snd_soc_tplg_enum_control::snd_soc_tplg_ctl_hdr
hdr	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_ctl_hdr hdr;$/;"	m	struct:snd_soc_tplg_mixer_control	typeref:struct:snd_soc_tplg_mixer_control::snd_soc_tplg_ctl_hdr
hdr	alsa/include/alsa/topology.h	/^	struct snd_tplg_ctl_template hdr;	\/*!< control type header *\/$/;"	m	struct:snd_tplg_bytes_template	typeref:struct:snd_tplg_bytes_template::snd_tplg_ctl_template
hdr	alsa/include/alsa/topology.h	/^	struct snd_tplg_ctl_template hdr;	\/*!< control type header *\/$/;"	m	struct:snd_tplg_enum_template	typeref:struct:snd_tplg_enum_template::snd_tplg_ctl_template
hdr	alsa/include/alsa/topology.h	/^	struct snd_tplg_ctl_template hdr;	\/*!< control type header *\/$/;"	m	struct:snd_tplg_mixer_template	typeref:struct:snd_tplg_mixer_template::snd_tplg_ctl_template
hdr	alsa/include/alsa/topology.h	/^	struct snd_tplg_tlv_template hdr;	\/*!< TLV type header *\/$/;"	m	struct:snd_tplg_tlv_dbscale_template	typeref:struct:snd_tplg_tlv_dbscale_template::snd_tplg_tlv_template
hdsp_9632_aeb_t	alsa/include/alsa/sound/hdsp.h	/^typedef struct _snd_hdsp_9632_aeb hdsp_9632_aeb_t;$/;"	t	typeref:struct:_snd_hdsp_9632_aeb
hdsp_config_info_t	alsa/include/alsa/sound/hdsp.h	/^typedef struct _snd_hdsp_config_info hdsp_config_info_t;$/;"	t	typeref:struct:_snd_hdsp_config_info
hdsp_firmware_t	alsa/include/alsa/sound/hdsp.h	/^typedef struct _snd_hdsp_firmware hdsp_firmware_t;$/;"	t	typeref:struct:_snd_hdsp_firmware
hdsp_mixer_t	alsa/include/alsa/sound/hdsp.h	/^typedef struct _snd_hdsp_mixer hdsp_mixer_t;$/;"	t	typeref:struct:_snd_hdsp_mixer
hdsp_peak_rms_t	alsa/include/alsa/sound/hdsp.h	/^typedef struct _snd_hdsp_peak_rms hdsp_peak_rms_t;$/;"	t	typeref:struct:_snd_hdsp_peak_rms
hdsp_version_t	alsa/include/alsa/sound/hdsp.h	/^typedef struct _snd_hdsp_version hdsp_version_t;$/;"	t	typeref:struct:_snd_hdsp_version
hdspm_channelfader	alsa/include/alsa/sound/hdspm.h	/^struct hdspm_channelfader {$/;"	s
hdspm_config	alsa/include/alsa/sound/hdspm.h	/^struct hdspm_config {$/;"	s
hdspm_config_info_t	alsa/include/alsa/sound/hdspm.h	/^typedef struct hdspm_config_info hdspm_config_info_t;$/;"	t	typeref:struct:hdspm_config_info
hdspm_format_ch_56	alsa/include/alsa/sound/hdspm.h	/^	hdspm_format_ch_56 = 1$/;"	e	enum:hdspm_madi_channel_format
hdspm_format_ch_64	alsa/include/alsa/sound/hdspm.h	/^	hdspm_format_ch_64 = 0,$/;"	e	enum:hdspm_madi_channel_format
hdspm_frame_48	alsa/include/alsa/sound/hdspm.h	/^	hdspm_frame_48 = 0,$/;"	e	enum:hdspm_madi_frame_format
hdspm_frame_96	alsa/include/alsa/sound/hdspm.h	/^	hdspm_frame_96 = 1$/;"	e	enum:hdspm_madi_frame_format
hdspm_input_coax	alsa/include/alsa/sound/hdspm.h	/^	hdspm_input_coax = 1$/;"	e	enum:hdspm_madi_input
hdspm_input_optical	alsa/include/alsa/sound/hdspm.h	/^	hdspm_input_optical = 0,$/;"	e	enum:hdspm_madi_input
hdspm_io_type	alsa/include/alsa/sound/hdspm.h	/^enum hdspm_io_type {$/;"	g
hdspm_ltc	alsa/include/alsa/sound/hdspm.h	/^struct hdspm_ltc {$/;"	s
hdspm_ltc_format	alsa/include/alsa/sound/hdspm.h	/^enum hdspm_ltc_format {$/;"	g
hdspm_ltc_frame	alsa/include/alsa/sound/hdspm.h	/^enum hdspm_ltc_frame {$/;"	g
hdspm_ltc_input_format	alsa/include/alsa/sound/hdspm.h	/^enum hdspm_ltc_input_format {$/;"	g
hdspm_madi_channel_format	alsa/include/alsa/sound/hdspm.h	/^enum hdspm_madi_channel_format {$/;"	g
hdspm_madi_frame_format	alsa/include/alsa/sound/hdspm.h	/^enum hdspm_madi_frame_format {$/;"	g
hdspm_madi_input	alsa/include/alsa/sound/hdspm.h	/^enum hdspm_madi_input {$/;"	g
hdspm_mixer	alsa/include/alsa/sound/hdspm.h	/^struct hdspm_mixer {$/;"	s
hdspm_mixer_ioctl	alsa/include/alsa/sound/hdspm.h	/^struct hdspm_mixer_ioctl {$/;"	s
hdspm_mixer_t	alsa/include/alsa/sound/hdspm.h	/^typedef struct hdspm_mixer hdspm_mixer_t;$/;"	t	typeref:struct:hdspm_mixer
hdspm_peak_rms	alsa/include/alsa/sound/hdspm.h	/^struct hdspm_peak_rms {$/;"	s
hdspm_peak_rms_t	alsa/include/alsa/sound/hdspm.h	/^typedef struct hdspm_peak_rms hdspm_peak_rms_t;$/;"	t	typeref:struct:hdspm_peak_rms
hdspm_speed	alsa/include/alsa/sound/hdspm.h	/^enum hdspm_speed {$/;"	g
hdspm_status	alsa/include/alsa/sound/hdspm.h	/^struct hdspm_status {$/;"	s
hdspm_sync	alsa/include/alsa/sound/hdspm.h	/^enum hdspm_sync {$/;"	g
hdspm_sync_lock	alsa/include/alsa/sound/hdspm.h	/^	hdspm_sync_lock = 1,$/;"	e	enum:hdspm_sync
hdspm_sync_no_lock	alsa/include/alsa/sound/hdspm.h	/^	hdspm_sync_no_lock = 0,$/;"	e	enum:hdspm_sync
hdspm_sync_sync	alsa/include/alsa/sound/hdspm.h	/^	hdspm_sync_sync = 2$/;"	e	enum:hdspm_sync
hdspm_syncsource	alsa/include/alsa/sound/hdspm.h	/^enum hdspm_syncsource {$/;"	g
hdspm_version	alsa/include/alsa/sound/hdspm.h	/^struct hdspm_version {$/;"	s
hdspm_version_t	alsa/include/alsa/sound/hdspm.h	/^typedef struct hdspm_version hdspm_version_t;$/;"	t	typeref:struct:hdspm_version
header	Simple-WebSocket-Server/client_ws.hpp	/^            std::unordered_multimap<std::string, std::string, case_insensitive_hash, case_insensitive_equals> header;$/;"	m	class:SimpleWeb::SocketClientBase::Connection
header	Simple-WebSocket-Server/server_ws.hpp	/^            std::unordered_multimap<std::string, std::string, case_insensitive_hash, case_insensitive_equals> header;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
header_stream	Simple-WebSocket-Server/server_ws.hpp	/^                std::shared_ptr<SendStream> header_stream;$/;"	m	class:SimpleWeb::SocketServerBase::Connection::SendData
hihat	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char hihat;$/;"	m	struct:snd_dm_fm_params
host	Simple-WebSocket-Server/client_ws.hpp	/^        std::string host;$/;"	m	class:SimpleWeb::SocketClientBase
http_version	Simple-WebSocket-Server/server_ws.hpp	/^            std::string method, path, http_version;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
hw_free	alsa/include/alsa/pcm_extplug.h	/^	int (*hw_free)(snd_pcm_extplug_t *ext);$/;"	m	struct:snd_pcm_extplug_callback
hw_free	alsa/include/alsa/pcm_ioplug.h	/^	int (*hw_free)(snd_pcm_ioplug_t *io);$/;"	m	struct:snd_pcm_ioplug_callback
hw_params	alsa/include/alsa/pcm_extplug.h	/^	int (*hw_params)(snd_pcm_extplug_t *ext, snd_pcm_hw_params_t *params);$/;"	m	struct:snd_pcm_extplug_callback
hw_params	alsa/include/alsa/pcm_ioplug.h	/^	int (*hw_params)(snd_pcm_ioplug_t *io, snd_pcm_hw_params_t *params);$/;"	m	struct:snd_pcm_ioplug_callback
hw_ptr	alsa/include/alsa/pcm_ioplug.h	/^	volatile snd_pcm_uframes_t hw_ptr;	\/**< hw pointer; read-only *\/$/;"	m	struct:snd_pcm_ioplug
iACC3	alsa/include/alsa/sound/emu10k1.h	44;"	d
iANDXOR	alsa/include/alsa/sound/emu10k1.h	46;"	d
iEXP	alsa/include/alsa/sound/emu10k1.h	51;"	d
iINTERP	alsa/include/alsa/sound/emu10k1.h	52;"	d
iLIMITGE	alsa/include/alsa/sound/emu10k1.h	48;"	d
iLIMITLT	alsa/include/alsa/sound/emu10k1.h	49;"	d
iLOG	alsa/include/alsa/sound/emu10k1.h	50;"	d
iMAC0	alsa/include/alsa/sound/emu10k1.h	38;"	d
iMAC1	alsa/include/alsa/sound/emu10k1.h	39;"	d
iMAC2	alsa/include/alsa/sound/emu10k1.h	40;"	d
iMAC3	alsa/include/alsa/sound/emu10k1.h	41;"	d
iMACINT0	alsa/include/alsa/sound/emu10k1.h	42;"	d
iMACINT1	alsa/include/alsa/sound/emu10k1.h	43;"	d
iMACMV	alsa/include/alsa/sound/emu10k1.h	45;"	d
iSKIP	alsa/include/alsa/sound/emu10k1.h	53;"	d
iTSTNEG	alsa/include/alsa/sound/emu10k1.h	47;"	d
id	alsa/include/alsa/control_external.h	/^	char id[16];$/;"	m	struct:snd_ctl_ext
id	alsa/include/alsa/mixer_abst.h	/^	snd_mixer_selem_id_t *id;$/;"	m	struct:_sm_selem
id	alsa/include/alsa/pcm.h	/^	unsigned char id[16];$/;"	m	union:_snd_pcm_sync_id
id	alsa/include/alsa/sound/asoc.h	/^	__le32 id;		\/* SND_SOC_DAPM_CTL *\/$/;"	m	struct:snd_soc_tplg_dapm_widget
id	alsa/include/alsa/sound/asoc.h	/^	__le32 id;	\/* ID maps to Left, Right, LFE etc *\/$/;"	m	struct:snd_soc_tplg_channel
id	alsa/include/alsa/sound/asoc.h	/^	__le32 id;              \/* unique ID - used to match *\/$/;"	m	struct:snd_soc_tplg_link_config
id	alsa/include/alsa/sound/emu10k1.h	/^	emu10k1_ctl_elem_id_t id;	\/* full control ID definition *\/$/;"	m	struct:__anon3
id	alsa/include/alsa/topology.h	/^	int id;			\/*!< SND_SOC_DAPM_CTL *\/$/;"	m	struct:snd_tplg_widget_template
id	alsa/include/alsa/topology.h	/^	int id;		\/*!< ID maps to Left, Right, LFE etc *\/$/;"	m	struct:snd_tplg_channel_elem
id	alsa/include/alsa/topology.h	/^	int id;	\/*!< unique ID - used to match with existing BE and CC links *\/$/;"	m	struct:snd_tplg_link_template
id16	alsa/include/alsa/pcm.h	/^	unsigned short id16[8];$/;"	m	union:_snd_pcm_sync_id
id32	alsa/include/alsa/pcm.h	/^	unsigned int id32[4];$/;"	m	union:_snd_pcm_sync_id
iface	alsa/include/alsa/sound/emu10k1.h	/^	int iface;			\/* interface identifier *\/$/;"	m	struct:__anon2
ignore_suspend	alsa/include/alsa/sound/asoc.h	/^	__le32 ignore_suspend;	\/* kept enabled over suspend *\/$/;"	m	struct:snd_soc_tplg_dapm_widget
ignore_suspend	alsa/include/alsa/topology.h	/^	unsigned int ignore_suspend;	\/*!< kept enabled over suspend *\/$/;"	m	struct:snd_tplg_widget_template
in	alsa/include/alsa/alisp.h	/^	snd_input_t *in;	\/* program code *\/$/;"	m	struct:alisp_cfg
in	alsa/include/alsa/pcm_rate.h	/^	struct snd_pcm_rate_side_info in;$/;"	m	struct:snd_pcm_rate_info	typeref:struct:snd_pcm_rate_info::snd_pcm_rate_side_info
in	alsa/include/alsa/sound/hdspm.h	/^	unsigned int in[HDSPM_MIXER_CHANNELS];$/;"	m	struct:hdspm_channelfader
includedir	picojson/Makefile	/^includedir=$(prefix)\/include$/;"	m
indent	picojson/picotest/picotest.c	/^static void indent(void)$/;"	f	file:
index	alsa/include/alsa/sound/asoc.h	/^	__le32 index;		\/* identifier for block *\/$/;"	m	struct:snd_soc_tplg_hdr
index	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int index;		\/* index of item *\/$/;"	m	struct:__anon2
index	alsa/include/alsa/topology.h	/^	int index;		\/*!< group index for object *\/$/;"	m	struct:snd_tplg_obj_template
info	alsa/include/alsa/mixer_abst.h	/^	snd_ctl_card_info_t *info;$/;"	m	struct:_sm_class_basic
info	alsa/include/alsa/sound/asoc.h	/^	__le32 info;$/;"	m	struct:snd_soc_tplg_io_ops
info	alsa/include/alsa/sound/sb16_csp.h	/^	snd_sb_csp_mc_header_t info;$/;"	m	struct:snd_sb_csp_microcode
info	alsa/include/alsa/topology.h	/^	int info;	\/*!< info callback ID *\/$/;"	m	struct:snd_tplg_io_ops_template
init	alsa/include/alsa/pcm_extplug.h	/^	int (*init)(snd_pcm_extplug_t *ext);$/;"	m	struct:snd_pcm_extplug_callback
init	alsa/include/alsa/pcm_rate.h	/^	int (*init)(void *obj, snd_pcm_rate_info_t *info);$/;"	m	struct:snd_pcm_rate_old_ops
init	alsa/include/alsa/pcm_rate.h	/^	int (*init)(void *obj, snd_pcm_rate_info_t *info);$/;"	m	struct:snd_pcm_rate_ops
init_counter	alsa/sbin/alsabat-test.sh	/^init_counter () {$/;"	f
input	picojson/picojson.h	/^  input(const Iter &first, const Iter &last) : cur_(first), end_(last), consumed_(false), line_(1) {$/;"	f	class:picojson::input
input	picojson/picojson.h	/^template <typename Iter> class input {$/;"	c	namespace:picojson
input_format	alsa/include/alsa/sound/hdspm.h	/^	enum hdspm_ltc_input_format input_format;$/;"	m	struct:hdspm_ltc	typeref:enum:hdspm_ltc::hdspm_ltc_input_format
input_frames	alsa/include/alsa/pcm_rate.h	/^	snd_pcm_uframes_t (*input_frames)(void *obj, snd_pcm_uframes_t frames);$/;"	m	struct:snd_pcm_rate_old_ops
input_frames	alsa/include/alsa/pcm_rate.h	/^	snd_pcm_uframes_t (*input_frames)(void *obj, snd_pcm_uframes_t frames);$/;"	m	struct:snd_pcm_rate_ops
input_peaks	alsa/include/alsa/sound/hdsp.h	/^	uint32_t input_peaks[26];$/;"	m	struct:_snd_hdsp_peak_rms
input_peaks	alsa/include/alsa/sound/hdspm.h	/^	uint32_t input_peaks[64];$/;"	m	struct:hdspm_peak_rms
input_rms	alsa/include/alsa/sound/hdsp.h	/^	uint64_t input_rms[26];$/;"	m	struct:_snd_hdsp_peak_rms
input_rms	alsa/include/alsa/sound/hdspm.h	/^	uint64_t input_rms[64];$/;"	m	struct:hdspm_peak_rms
int64_	picojson/picojson.h	/^    int64_t int64_;$/;"	m	union:picojson::value::_storage
int64_type	picojson/picojson.h	/^  int64_type$/;"	e	enum:picojson::__anon30
internal_io_service	Simple-WebSocket-Server/client_ws.hpp	/^        bool internal_io_service=false;$/;"	m	class:SimpleWeb::SocketClientBase
internal_tram_size	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int internal_tram_size;	\/* in samples *\/$/;"	m	struct:__anon1
intro	alsa/sbin/alsaconf	/^intro() {$/;"	f
invert	alsa/include/alsa/sound/asoc.h	/^	__le32 invert;		\/* invert the power bit *\/$/;"	m	struct:snd_soc_tplg_dapm_widget
invert	alsa/include/alsa/sound/asoc.h	/^	__le32 invert;$/;"	m	struct:snd_soc_tplg_mixer_control
invert	alsa/include/alsa/topology.h	/^	int invert;	\/*!< whether controls bits are inverted *\/$/;"	m	struct:snd_tplg_mixer_template
invert	alsa/include/alsa/topology.h	/^	unsigned int invert;		\/*!< invert the power bit *\/$/;"	m	struct:snd_tplg_widget_template
io_service	Simple-WebSocket-Server/client_ws.hpp	/^        std::shared_ptr<boost::asio::io_service> io_service;$/;"	m	class:SimpleWeb::SocketClientBase
io_service	Simple-WebSocket-Server/server_ws.hpp	/^        std::shared_ptr<boost::asio::io_service> io_service;$/;"	m	class:SimpleWeb::SocketServerBase
io_service	main.cpp	/^boost::asio::io_service io_service;$/;"	v
io_type	alsa/include/alsa/sound/hdsp.h	/^	HDSP_IO_Type io_type;$/;"	m	struct:_snd_hdsp_version
is	alsa/include/alsa/mixer_abst.h	/^	int (*is)(snd_mixer_elem_t *elem, int dir, int cmd, int val);$/;"	m	struct:sm_elem_ops
is	picojson/picojson.h	/^template <> inline bool value::is<double>() const {$/;"	f	class:picojson::value
is	picojson/test.cc	37;"	d	file:
is_StopCapture	session.h	/^	bool is_StopCapture = false;$/;"	m	class:t_session
items	alsa/include/alsa/sound/asoc.h	/^	__le32 items;$/;"	m	struct:snd_soc_tplg_enum_control
items	alsa/include/alsa/topology.h	/^	int items;	\/*!< number of enumerated items in control *\/$/;"	m	struct:snd_tplg_enum_template
kbd_scale	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char kbd_scale;	\/* keyboard scaling *\/$/;"	m	struct:snd_dm_fm_voice
kbd_split	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char kbd_split;	\/* keyboard split *\/$/;"	m	struct:snd_dm_fm_params
key	alsa/include/alsa/sound/asound_fm.h	/^	char key[4];$/;"	m	struct:sbi_patch
key_on	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char key_on;	\/* set for active, clear for silent *\/$/;"	m	struct:snd_dm_fm_note
last_error_t	picojson/picojson.h	/^template <typename T> struct last_error_t { static std::string s; };$/;"	s	namespace:picojson
left	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char left;		\/* stereo left *\/$/;"	m	struct:snd_dm_fm_voice
len	alsa/include/alsa/seq_event.h	/^	unsigned int len;		\/**< length of data *\/$/;"	m	struct:snd_seq_ev_ext
len	tcpserver.cpp	/^    int                     len;$/;"	m	struct:_remote_cmd_	file:
length	Simple-WebSocket-Server/client_ws.hpp	/^            size_t length;$/;"	m	class:SimpleWeb::SocketClientBase::Message
length	Simple-WebSocket-Server/server_ws.hpp	/^            size_t length;$/;"	m	class:SimpleWeb::SocketServerBase::Message
length	alsa/include/alsa/topology.h	/^	unsigned int length;	\/*!< data length *\/$/;"	m	struct:snd_tplg_pdata_template
line	picojson/picojson.h	/^  int line() const {$/;"	f	class:picojson::input
line_	picojson/picojson.h	/^  int line_;$/;"	m	class:picojson::input
line_out	alsa/include/alsa/sound/hdsp.h	/^	unsigned char line_out;$/;"	m	struct:_snd_hdsp_config_info
line_out	alsa/include/alsa/sound/hdspm.h	/^	unsigned char line_out;$/;"	m	struct:hdspm_config
link	alsa/include/alsa/topology.h	/^		struct snd_tplg_link_template *link;		\/*!< BE and CC Links *\/$/;"	m	union:snd_tplg_obj_template::__anon23	typeref:struct:snd_tplg_obj_template::__anon23::snd_tplg_link_template
lock	ringbuffer.h	/^    pthread_mutex_t lock;$/;"	m	struct:__anon32
longname	alsa/include/alsa/control_external.h	/^	char longname[80];$/;"	m	struct:snd_ctl_ext
ltc	alsa/include/alsa/sound/hdspm.h	/^	unsigned int ltc;$/;"	m	struct:hdspm_ltc
madi	alsa/include/alsa/sound/hdspm.h	/^		} madi;$/;"	m	union:hdspm_status::__anon11	typeref:struct:hdspm_status::__anon11::__anon12
madi_input	alsa/include/alsa/sound/hdspm.h	/^			uint8_t madi_input; \/* enum hdspm_madi_input *\/$/;"	m	struct:hdspm_status::__anon11::__anon12
madi_sync_check	alsa/include/alsa/sound/hdspm.h	/^	unsigned char madi_sync_check;$/;"	m	struct:hdspm_config
magic	alsa/include/alsa/sound/asoc.h	/^	__le32 magic;		\/* magic number *\/$/;"	m	struct:snd_soc_tplg_hdr
main	Simple-WebSocket-Server/tests/crypto_test.cpp	/^int main() {$/;"	f
main	Simple-WebSocket-Server/tests/io_test.cpp	/^int main() {$/;"	f
main	Simple-WebSocket-Server/tests/parse_test.cpp	/^int main() {$/;"	f
main	Simple-WebSocket-Server/ws_examples.cpp	/^int main() {$/;"	f
main	Simple-WebSocket-Server/wss_examples.cpp	/^int main() {$/;"	f
main	main.cpp	/^int main(int argc, char **argv)$/;"	f
main	picojson/examples/github-issues.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	picojson/examples/iostream.cc	/^int main(void) {$/;"	f
main	picojson/examples/streaming.cc	/^int main(void) {$/;"	f
main	picojson/test.cc	/^int main(void)$/;"	f
main_tests	picojson/picotest/picotest.c	/^struct test_t main_tests, *cur_tests = &main_tests;$/;"	v	typeref:struct:test_t
map	alsa/include/alsa/pcm.h	/^	snd_pcm_chmap_t map;		\/**< available channel map *\/$/;"	m	struct:snd_pcm_chmap_query
map	alsa/include/alsa/topology.h	/^	struct snd_tplg_channel_map_template *map;	\/*!< channel map *\/$/;"	m	struct:snd_tplg_enum_template	typeref:struct:snd_tplg_enum_template::snd_tplg_channel_map_template
map	alsa/include/alsa/topology.h	/^	struct snd_tplg_channel_map_template *map;	\/*!< channel map *\/$/;"	m	struct:snd_tplg_mixer_template	typeref:struct:snd_tplg_mixer_template::snd_tplg_channel_map_template
mask	alsa/include/alsa/sound/asoc.h	/^	__le32 mask;		\/* non-shifted mask *\/$/;"	m	struct:snd_soc_tplg_dapm_widget
mask	alsa/include/alsa/sound/asoc.h	/^	__le32 mask;$/;"	m	struct:snd_soc_tplg_bytes_control
mask	alsa/include/alsa/sound/asoc.h	/^	__le32 mask;$/;"	m	struct:snd_soc_tplg_enum_control
mask	alsa/include/alsa/topology.h	/^	int mask;		\/*!< byte control mask *\/$/;"	m	struct:snd_tplg_bytes_template
mask	alsa/include/alsa/topology.h	/^	int mask;		\/*!< non-shifted mask *\/$/;"	m	struct:snd_tplg_widget_template
mask	alsa/include/alsa/topology.h	/^	int mask;	\/*!< register mask size *\/$/;"	m	struct:snd_tplg_enum_template
master_period	alsa/include/alsa/sound/hdspm.h	/^	uint32_t master_period;$/;"	m	struct:hdspm_status
match	picojson/picojson.h	/^  bool match(const std::string &pattern) {$/;"	f	class:picojson::input
matrix	alsa/include/alsa/sound/hdsp.h	/^	unsigned short matrix[HDSP_MATRIX_MIXER_SIZE];$/;"	m	struct:_snd_hdsp_mixer
max	alsa/include/alsa/sound/asoc.h	/^	__le32 max;$/;"	m	struct:snd_soc_tplg_bytes_control
max	alsa/include/alsa/sound/asoc.h	/^	__le32 max;$/;"	m	struct:snd_soc_tplg_mixer_control
max	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int max;		\/* maximum range *\/$/;"	m	struct:__anon3
max	alsa/include/alsa/topology.h	/^	int max;		\/*!< max byte control value *\/$/;"	m	struct:snd_tplg_bytes_template
max	alsa/include/alsa/topology.h	/^	int max;	\/*!< max value for mixer *\/$/;"	m	struct:snd_tplg_mixer_template
md5	Simple-WebSocket-Server/crypto.hpp	/^        static std::string md5(const std::string &input, size_t iterations=1) {$/;"	f	class:SimpleWeb::Crypto
md5	Simple-WebSocket-Server/crypto.hpp	/^        static std::string md5(std::istream &stream, size_t iterations=1) {$/;"	f	class:SimpleWeb::Crypto
md5_string_tests	Simple-WebSocket-Server/tests/crypto_test.cpp	/^const vector<pair<string, string> > md5_string_tests = {$/;"	v
memType	ringbuffer.h	/^    int memType;$/;"	m	struct:__anon32
memfclose	picojson/examples/github-issues.cc	/^void memfclose(MEMFILE *mf) {$/;"	f
memfopen	picojson/examples/github-issues.cc	/^MEMFILE *memfopen() {$/;"	f
memfstrdup	picojson/examples/github-issues.cc	/^char *memfstrdup(MEMFILE *mf) {$/;"	f
memfwrite	picojson/examples/github-issues.cc	/^size_t memfwrite(char *ptr, size_t size, size_t nmemb, void *stream) {$/;"	f
message_stream	Simple-WebSocket-Server/server_ws.hpp	/^                std::shared_ptr<SendStream> message_stream;$/;"	m	class:SimpleWeb::SocketServerBase::Connection::SendData
method	Simple-WebSocket-Server/server_ws.hpp	/^            std::string method, path, http_version;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
min	alsa/include/alsa/sound/asoc.h	/^	__le32 min;$/;"	m	struct:snd_soc_tplg_mixer_control
min	alsa/include/alsa/sound/asoc.h	/^	__le32 min;$/;"	m	struct:snd_soc_tplg_tlv_dbscale
min	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int min;		\/* minimum range *\/$/;"	m	struct:__anon3
min	alsa/include/alsa/topology.h	/^	int min;			\/*!< dB minimum value in 0.1dB *\/$/;"	m	struct:snd_tplg_tlv_dbscale_template
min	alsa/include/alsa/topology.h	/^	int min;	\/*!< min value for mixer *\/$/;"	m	struct:snd_tplg_mixer_template
mixer	alsa/include/alsa/sound/hdspm.h	/^	struct hdspm_mixer *mixer;$/;"	m	struct:hdspm_mixer_ioctl	typeref:struct:hdspm_mixer_ioctl::hdspm_mixer
mixer	alsa/include/alsa/topology.h	/^		struct snd_tplg_mixer_template *mixer;		\/*!< Mixer control *\/$/;"	m	union:snd_tplg_obj_template::__anon23	typeref:struct:snd_tplg_obj_template::__anon23::snd_tplg_mixer_template
mixername	alsa/include/alsa/control_external.h	/^	char mixername[80];$/;"	m	struct:snd_ctl_ext
mk_devinfo_json	tcpserver.cpp	/^int mk_devinfo_json(string &dest)$/;"	f
mk_json	tcpserver.cpp	/^int mk_json(string &dest)$/;"	f
mmap_rw	alsa/include/alsa/pcm_ioplug.h	/^	unsigned int mmap_rw;		\/**< pseudo mmap mode *\/$/;"	m	struct:snd_pcm_ioplug
mute	alsa/include/alsa/sound/asoc.h	/^	__le32 mute;$/;"	m	struct:snd_soc_tplg_tlv_dbscale
mute	alsa/include/alsa/topology.h	/^	int mute;			\/*!< is min dB value mute ? *\/$/;"	m	struct:snd_tplg_tlv_dbscale_template
my_alSourcePause	session.h	/^static void my_alSourcePause(int source){$/;"	f
my_alSourcePlay	session.h	/^static void my_alSourcePlay(unsigned int source){$/;"	f
my_alSourcef	session.h	/^static void my_alSourcef(float value){$/;"	f
name	alsa/include/alsa/conf.h	/^	char *name;	\/**< Device name string *\/$/;"	m	struct:snd_devname
name	alsa/include/alsa/control_external.h	/^	char name[32];$/;"	m	struct:snd_ctl_ext
name	alsa/include/alsa/pcm_extplug.h	/^	const char *name;$/;"	m	struct:snd_pcm_extplug
name	alsa/include/alsa/pcm_ioplug.h	/^	const char *name;$/;"	m	struct:snd_pcm_ioplug
name	alsa/include/alsa/sound/asoc.h	/^	char name[SNDRV_CTL_ELEM_ID_NAME_MAXLEN]; \/* Name of the stream *\/$/;"	m	struct:snd_soc_tplg_stream
name	alsa/include/alsa/sound/asoc.h	/^	char name[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];$/;"	m	struct:snd_soc_tplg_ctl_hdr
name	alsa/include/alsa/sound/asoc.h	/^	char name[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];$/;"	m	struct:snd_soc_tplg_dapm_widget
name	alsa/include/alsa/sound/asoc.h	/^	char name[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];$/;"	m	struct:snd_soc_tplg_stream_caps
name	alsa/include/alsa/sound/asound_fm.h	/^	char name[25];$/;"	m	struct:sbi_patch
name	alsa/include/alsa/sound/emu10k1.h	/^	char name[128];$/;"	m	struct:__anon4
name	alsa/include/alsa/sound/emu10k1.h	/^	unsigned char name[44];		\/* ASCII name of item *\/ $/;"	m	struct:__anon2
name	alsa/include/alsa/topology.h	/^	const char *name;	\/*!< Control name *\/$/;"	m	struct:snd_tplg_ctl_template
name	alsa/include/alsa/topology.h	/^	const char *name;	\/*!< link name *\/$/;"	m	struct:snd_tplg_link_template
name	alsa/include/alsa/topology.h	/^	const char *name;	\/*!< name of the stream caps *\/$/;"	m	struct:snd_tplg_stream_caps_template
name	alsa/include/alsa/topology.h	/^	const char *name;	\/*!< name of the stream config *\/$/;"	m	struct:snd_tplg_stream_template
name	alsa/include/alsa/topology.h	/^	const char *name;	\/*!< widget name *\/$/;"	m	struct:snd_tplg_widget_template
next	alsa/include/alsa/conf.h	/^	snd_devname_t *next;	\/**< Next pointer *\/$/;"	m	struct:snd_devname
next	alsa/include/alsa/global.h	/^	struct snd_dlsym_link *next;$/;"	m	struct:snd_dlsym_link	typeref:struct:snd_dlsym_link::snd_dlsym_link
next	tcpserver.cpp	/^    struct _remote_cmd_ *   next;$/;"	m	struct:_remote_cmd_	typeref:struct:_remote_cmd_::_remote_cmd_	file:
no_video	alsa/include/alsa/sound/hdspm.h	/^	no_video$/;"	e	enum:hdspm_ltc_input_format
nonblock	alsa/include/alsa/control_external.h	/^	int nonblock;			\/**< non-block mode; read-only *\/$/;"	m	struct:snd_ctl_ext
nonblock	alsa/include/alsa/pcm_ioplug.h	/^	int nonblock;			\/**< non-block mode; read-only *\/$/;"	m	struct:snd_pcm_ioplug
note	alsa/include/alsa/seq_event.h	/^		snd_seq_ev_note_t note;		\/**< note information *\/$/;"	m	union:snd_seq_event::__anon14
note	alsa/include/alsa/seq_event.h	/^	unsigned char note;		\/**< note *\/$/;"	m	struct:snd_seq_ev_note
note	picojson/picotest/picotest.c	/^void note(const char *fmt, ...)$/;"	f
ntsc	alsa/include/alsa/sound/hdspm.h	/^	ntsc,$/;"	e	enum:hdspm_ltc_input_format
null	picojson/picojson.h	/^struct null {};$/;"	s	namespace:picojson
null_parse_context	picojson/picojson.h	/^  null_parse_context() {$/;"	f	class:picojson::null_parse_context
null_parse_context	picojson/picojson.h	/^class null_parse_context {$/;"	c	namespace:picojson
null_type	picojson/picojson.h	/^  null_type,$/;"	e	enum:picojson::__anon30
num_channels	alsa/include/alsa/sound/asoc.h	/^	__le32 num_channels;$/;"	m	struct:snd_soc_tplg_enum_control
num_channels	alsa/include/alsa/sound/asoc.h	/^	__le32 num_channels;$/;"	m	struct:snd_soc_tplg_mixer_control
num_channels	alsa/include/alsa/topology.h	/^	int num_channels;	\/*!< number of channel mappings *\/$/;"	m	struct:snd_tplg_channel_map_template
num_ctls	alsa/include/alsa/topology.h	/^	int num_ctls;			\/*!< Number of controls used by widget *\/$/;"	m	struct:snd_tplg_widget_template
num_elems	alsa/include/alsa/sound/asoc.h	/^	__le32 num_elems;	\/* number of elements in array *\/$/;"	m	struct:snd_soc_tplg_vendor_array
num_kcontrols	alsa/include/alsa/sound/asoc.h	/^	__le32 num_kcontrols;$/;"	m	struct:snd_soc_tplg_dapm_widget
num_regs	alsa/include/alsa/sound/asoc.h	/^	__le32 num_regs;$/;"	m	struct:snd_soc_tplg_bytes_control
num_regs	alsa/include/alsa/topology.h	/^	int num_regs;		\/*!< number of registers *\/$/;"	m	struct:snd_tplg_bytes_template
num_streams	alsa/include/alsa/sound/asoc.h	/^	__le32 num_streams;	\/* number of streams *\/$/;"	m	struct:snd_soc_tplg_pcm
num_streams	alsa/include/alsa/sound/asoc.h	/^	__le32 num_streams;     \/* number of streams *\/$/;"	m	struct:snd_soc_tplg_link_config
num_streams	alsa/include/alsa/topology.h	/^	int num_streams;	\/*!< number of configs *\/$/;"	m	struct:snd_tplg_link_template
num_streams	alsa/include/alsa/topology.h	/^	int num_streams;	\/*!< number of supported configs *\/$/;"	m	struct:snd_tplg_pcm_template
num_tests	picojson/picotest/picotest.c	/^    int num_tests;$/;"	m	struct:test_t	file:
number_	picojson/picojson.h	/^    double number_;$/;"	m	union:picojson::value::_storage
number_type	picojson/picojson.h	/^  number_type,$/;"	e	enum:picojson::__anon30
object	picojson/picojson.h	/^  typedef std::map<std::string, value> object;$/;"	t	class:picojson::value
object	picojson/picojson.h	/^typedef value::object object;$/;"	t	namespace:picojson
object_	picojson/picojson.h	/^    object *object_;$/;"	m	union:picojson::value::_storage
object_type	picojson/picojson.h	/^  object_type$/;"	e	enum:picojson::__anon30
octave	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char octave;	\/* 3 bits: what octave to play *\/$/;"	m	struct:snd_dm_fm_note
off_velocity	alsa/include/alsa/seq_event.h	/^	unsigned char off_velocity;	\/**< note-off velocity; only for #SND_SEQ_EVENT_NOTE *\/$/;"	m	struct:snd_seq_ev_note
oi	picojson/picojson.h	/^  Iter oi;$/;"	m	struct:picojson::serialize_str_char
ok	picojson/picotest/picotest.h	31;"	d
on_close	Simple-WebSocket-Server/client_ws.hpp	/^        std::function<void(int, const std::string&)> on_close;$/;"	m	class:SimpleWeb::SocketClientBase
on_close	Simple-WebSocket-Server/server_ws.hpp	/^            std::function<void(std::shared_ptr<Connection>, int, const std::string&)> on_close;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
on_error	Simple-WebSocket-Server/client_ws.hpp	/^        std::function<void(const boost::system::error_code&)> on_error;$/;"	m	class:SimpleWeb::SocketClientBase
on_error	Simple-WebSocket-Server/server_ws.hpp	/^            std::function<void(std::shared_ptr<Connection>, const boost::system::error_code&)> on_error;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
on_message	Simple-WebSocket-Server/client_ws.hpp	/^        std::function<void(std::shared_ptr<Message>)> on_message;$/;"	m	class:SimpleWeb::SocketClientBase
on_message	Simple-WebSocket-Server/server_ws.hpp	/^            std::function<void(std::shared_ptr<Connection>, std::shared_ptr<Message>)> on_message;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
on_open	Simple-WebSocket-Server/client_ws.hpp	/^        std::function<void(void)> on_open;$/;"	m	class:SimpleWeb::SocketClientBase
on_open	Simple-WebSocket-Server/server_ws.hpp	/^            std::function<void(std::shared_ptr<Connection>)> on_open;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
onclose	Simple-WebSocket-Server/client_ws.hpp	/^        DEPRECATED std::function<void(int, const std::string&)> onclose;$/;"	m	class:SimpleWeb::SocketClientBase
onclose	Simple-WebSocket-Server/server_ws.hpp	/^            DEPRECATED std::function<void(std::shared_ptr<Connection>, int, const std::string&)> onclose;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
onerror	Simple-WebSocket-Server/client_ws.hpp	/^        DEPRECATED std::function<void(const boost::system::error_code&)> onerror;$/;"	m	class:SimpleWeb::SocketClientBase
onerror	Simple-WebSocket-Server/server_ws.hpp	/^            DEPRECATED std::function<void(std::shared_ptr<Connection>, const boost::system::error_code&)> onerror;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
onmessage	Simple-WebSocket-Server/client_ws.hpp	/^        DEPRECATED std::function<void(std::shared_ptr<Message>)> onmessage;$/;"	m	class:SimpleWeb::SocketClientBase
onmessage	Simple-WebSocket-Server/server_ws.hpp	/^            DEPRECATED std::function<void(std::shared_ptr<Connection>, std::shared_ptr<Message>)> onmessage;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
onopen	Simple-WebSocket-Server/client_ws.hpp	/^        DEPRECATED std::function<void(void)> onopen;$/;"	m	class:SimpleWeb::SocketClientBase
onopen	Simple-WebSocket-Server/server_ws.hpp	/^            DEPRECATED std::function<void(std::shared_ptr<Connection>)> onopen;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
op	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char op;		\/* operator cell (0 or 1) *\/$/;"	m	struct:snd_dm_fm_voice
operator !	json.h	/^inline bool operator!(const std::pair<picojson::value::object::const_iterator, picojson::value::object::const_iterator>& a_pair)$/;"	f
operator !=	picojson/picojson.h	/^inline bool operator!=(const value &x, const value &y) {$/;"	f	namespace:picojson
operator &	json.h	/^inline picojson::value& operator&(t_set a_set, T&& a_x)$/;"	f
operator ()	Simple-WebSocket-Server/client_ws.hpp	/^  bool operator()(const std::string &key1, const std::string &key2) const {$/;"	f	class:case_insensitive_equals
operator ()	Simple-WebSocket-Server/client_ws.hpp	/^  size_t operator()(const std::string &key) const {$/;"	f	class:case_insensitive_hash
operator ()	Simple-WebSocket-Server/server_ws.hpp	/^  bool operator()(const std::string &key1, const std::string &key2) const {$/;"	f	class:case_insensitive_equals
operator ()	Simple-WebSocket-Server/server_ws.hpp	/^  size_t operator()(const std::string &key) const {$/;"	f	class:case_insensitive_hash
operator ()	audio.h	/^	int operator()(size_t a_channels, size_t a_bytes, const char* a_p, size_t a_n, size_t a_rate)$/;"	f	class:t_audio_target
operator ()	audio.h	/^	void operator()(T_target a_target)$/;"	f	class:t_audio_decoder
operator ()	multipart.h	/^	void operator()(char a_c)$/;"	f	class:t_multipart
operator ()	picojson/picojson.h	/^  void operator()(char c) {$/;"	f	struct:picojson::serialize_str_char
operator ()	session.h	/^		void operator()(const uint8_t* a_p, size_t a_n)$/;"	f	struct:t_session::t_parser
operator ()	tiny_http.h	/^	t_http10& operator()(const char* a_method)$/;"	f	struct:t_http10
operator ()	tiny_http.h	/^	t_http10& operator()(const char* a_method, const std::map<std::string, std::string>& a_query)$/;"	f	struct:t_http10
operator ()	tiny_http.h	/^	t_http10& operator()(const char* a_method, const std::string& a_data, const char* a_content_type = "application\/octet-stream")$/;"	f	struct:t_http10
operator ()	tiny_http.h	/^	void operator()(boost::asio::io_service& a_io, T_receive a_receive)$/;"	f	struct:t_http10
operator ()	tiny_http.h	/^	void operator()(boost::asio::io_service& a_io, T_success a_success, T_error a_error)$/;"	f	struct:t_http10
operator *	json.h	/^inline const picojson::value& operator*(const std::pair<picojson::value::object::const_iterator, picojson::value::object::const_iterator>& a_pair)$/;"	f
operator *	json.h	/^inline std::pair<picojson::value::object::const_iterator, picojson::value::object::const_iterator> operator*(const picojson::value& a_value, const std::string& a_name)$/;"	f
operator /	json.h	/^inline T& operator\/(picojson::value& a_value, const t_get<T>& a_get)$/;"	f
operator /	json.h	/^inline const T& operator\/(const picojson::value& a_value, const t_get<T>& a_get)$/;"	f
operator /	json.h	/^inline const picojson::value& operator\/(const picojson::value& a_value, const std::string& a_name)$/;"	f
operator /	json.h	/^inline picojson::value& operator\/(picojson::value& a_value, const std::string& a_name)$/;"	f
operator <	Simple-WebSocket-Server/server_ws.hpp	/^            bool operator<(const regex_orderable &rhs) const {$/;"	f	class:SimpleWeb::SocketServerBase::regex_orderable
operator <<	json.h	/^inline t_set operator<<(picojson::value& a_value, const std::string& a_name)$/;"	f
operator <<	picojson/picojson.h	/^inline std::ostream &operator<<(std::ostream &os, const picojson::value &x) {$/;"	f
operator =	picojson/picojson.h	/^inline value &value::operator=(const value &x) {$/;"	f	class:picojson::value
operator =	picojson/picojson.h	/^inline value &value::operator=(value &&x) throw() {$/;"	f	class:picojson::value
operator ==	picojson/picojson.h	/^inline bool operator==(const value &x, const value &y) {$/;"	f	namespace:picojson
operator >>	picojson/picojson.h	/^inline std::istream &operator>>(std::istream &is, picojson::value &x) {$/;"	f
operator |	json.h	/^inline const T& operator|(const std::pair<picojson::value::object::const_iterator, picojson::value::object::const_iterator>& a_x, const T& a_y)$/;"	f
ops	alsa/include/alsa/mixer_abst.h	/^	struct sm_elem_ops *ops;$/;"	m	struct:_sm_selem	typeref:struct:_sm_selem::sm_elem_ops
ops	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_io_ops ops;$/;"	m	struct:snd_soc_tplg_ctl_hdr	typeref:struct:snd_soc_tplg_ctl_hdr::snd_soc_tplg_io_ops
ops	alsa/include/alsa/topology.h	/^	struct snd_tplg_io_ops_template ops;	\/*!< operations *\/$/;"	m	struct:snd_tplg_ctl_template	typeref:struct:snd_tplg_ctl_template::snd_tplg_io_ops_template
out	alsa/include/alsa/alisp.h	/^	snd_output_t *out;	\/* program output *\/$/;"	m	struct:alisp_cfg
out	alsa/include/alsa/pcm_rate.h	/^	struct snd_pcm_rate_side_info out;$/;"	m	struct:snd_pcm_rate_info	typeref:struct:snd_pcm_rate_info::snd_pcm_rate_side_info
out_	picojson/picojson.h	/^  value *out_;$/;"	m	class:picojson::default_parse_context
output_frames	alsa/include/alsa/pcm_rate.h	/^	snd_pcm_uframes_t (*output_frames)(void *obj, snd_pcm_uframes_t frames);$/;"	m	struct:snd_pcm_rate_old_ops
output_frames	alsa/include/alsa/pcm_rate.h	/^	snd_pcm_uframes_t (*output_frames)(void *obj, snd_pcm_uframes_t frames);$/;"	m	struct:snd_pcm_rate_ops
output_peaks	alsa/include/alsa/sound/hdsp.h	/^	uint32_t output_peaks[28];$/;"	m	struct:_snd_hdsp_peak_rms
output_peaks	alsa/include/alsa/sound/hdspm.h	/^	uint32_t output_peaks[64];$/;"	m	struct:hdspm_peak_rms
output_rms	alsa/include/alsa/sound/hdsp.h	/^	uint64_t output_rms[26];$/;"	m	struct:_snd_hdsp_peak_rms
output_rms	alsa/include/alsa/sound/hdspm.h	/^	uint64_t output_rms[64];$/;"	m	struct:hdspm_peak_rms
overflow	main.cpp	/^	virtual int overflow(int a_c)$/;"	f	struct:t_null_buffer
p	alsa/include/alsa/control_external.h	/^		const unsigned int *p;$/;"	m	union:snd_ctl_ext::__anon22
pad	alsa/include/alsa/control.h	/^	unsigned char pad;		\/**< nothing *\/$/;"	m	struct:snd_aes_iec958
pad	alsa/include/alsa/sound/emu10k1.h	/^	unsigned char pad;		\/* reserved *\/$/;"	m	struct:__anon6
pad	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int pad;		\/* don't use *\/$/;"	m	struct:__anon2
pal	alsa/include/alsa/sound/hdspm.h	/^	pal,$/;"	e	enum:hdspm_ltc_input_format
param	alsa/include/alsa/seq_event.h	/^	unsigned int param;		\/**< control parameter *\/$/;"	m	struct:snd_seq_ev_ctrl
param	alsa/include/alsa/seq_event.h	/^	} param;				\/**< data value union *\/$/;"	m	struct:snd_seq_ev_queue_control	typeref:union:snd_seq_ev_queue_control::__anon13
parse	picojson/picojson.h	/^inline std::string parse(value &out, const std::string &s) {$/;"	f	namespace:picojson
parse	picojson/picojson.h	/^inline std::string parse(value &out, std::istream &is) {$/;"	f	namespace:picojson
parse	picojson/picojson.h	/^template <typename Iter> inline Iter parse(value &out, const Iter &first, const Iter &last, std::string *err) {$/;"	f	namespace:picojson
parse	picojson/picojson.h	/^template <typename Iter> inline std::string parse(value &out, Iter &pos, const Iter &last) {$/;"	f	namespace:picojson
parse_array_item	picojson/examples/streaming.cc	/^  template <typename Iter> bool parse_array_item(picojson::input<Iter> &in, size_t) {$/;"	f	class:__anon29::root_context
parse_array_item	picojson/picojson.h	/^  template <typename Iter> bool parse_array_item(input<Iter> &, size_t) {$/;"	f	class:picojson::deny_parse_context
parse_array_item	picojson/picojson.h	/^  template <typename Iter> bool parse_array_item(input<Iter> &in, size_t) {$/;"	f	class:picojson::default_parse_context
parse_array_item	picojson/picojson.h	/^  template <typename Iter> bool parse_array_item(input<Iter> &in, size_t) {$/;"	f	class:picojson::null_parse_context
parse_array_start	picojson/examples/streaming.cc	/^  bool parse_array_start() {$/;"	f	class:__anon29::root_context
parse_array_start	picojson/picojson.h	/^  bool parse_array_start() {$/;"	f	class:picojson::default_parse_context
parse_array_start	picojson/picojson.h	/^  bool parse_array_start() {$/;"	f	class:picojson::deny_parse_context
parse_array_start	picojson/picojson.h	/^  bool parse_array_start() {$/;"	f	class:picojson::null_parse_context
parse_array_stop	picojson/picojson.h	/^  bool parse_array_stop(size_t) {$/;"	f	class:picojson::default_parse_context
parse_array_stop	picojson/picojson.h	/^  bool parse_array_stop(size_t) {$/;"	f	class:picojson::deny_parse_context
parse_array_stop	picojson/picojson.h	/^  bool parse_array_stop(size_t) {$/;"	f	class:picojson::null_parse_context
parse_handshake	Simple-WebSocket-Server/client_ws.hpp	/^        void parse_handshake(std::istream& stream) const {$/;"	f	class:SimpleWeb::SocketClientBase
parse_handshake	Simple-WebSocket-Server/server_ws.hpp	/^        void parse_handshake(const std::shared_ptr<Connection> &connection, std::istream& stream) const {$/;"	f	class:SimpleWeb::SocketServerBase
parse_json	tcpserver.cpp	/^int parse_json(unsigned char *data, int len)$/;"	f
parse_object_item	picojson/picojson.h	/^  template <typename Iter> bool parse_object_item(input<Iter> &, const std::string &) {$/;"	f	class:picojson::deny_parse_context
parse_object_item	picojson/picojson.h	/^  template <typename Iter> bool parse_object_item(input<Iter> &in, const std::string &) {$/;"	f	class:picojson::null_parse_context
parse_object_item	picojson/picojson.h	/^  template <typename Iter> bool parse_object_item(input<Iter> &in, const std::string &key) {$/;"	f	class:picojson::default_parse_context
parse_object_start	picojson/picojson.h	/^  bool parse_object_start() {$/;"	f	class:picojson::default_parse_context
parse_object_start	picojson/picojson.h	/^  bool parse_object_start() {$/;"	f	class:picojson::deny_parse_context
parse_object_start	picojson/picojson.h	/^  bool parse_object_start() {$/;"	f	class:picojson::null_parse_context
parse_request_test	Simple-WebSocket-Server/tests/parse_test.cpp	/^    void parse_request_test() {$/;"	f	class:SocketServerTest
parse_response_header_test	Simple-WebSocket-Server/tests/parse_test.cpp	/^    void parse_response_header_test() {$/;"	f	class:SocketClientTest
parse_string	picojson/picojson.h	/^  template <typename Iter> bool parse_string(input<Iter> &) {$/;"	f	class:picojson::deny_parse_context
parse_string	picojson/picojson.h	/^  template <typename Iter> bool parse_string(input<Iter> &in) {$/;"	f	class:picojson::default_parse_context
parse_string	picojson/picojson.h	/^  template <typename Iter> bool parse_string(input<Iter> &in) {$/;"	f	class:picojson::null_parse_context
passthru	alsa/include/alsa/sound/hdsp.h	/^	unsigned char passthru; $/;"	m	struct:_snd_hdsp_config_info
passthru	alsa/include/alsa/sound/hdspm.h	/^	unsigned int passthru;$/;"	m	struct:hdspm_config
path	Simple-WebSocket-Server/client_ws.hpp	/^        std::string path;$/;"	m	class:SimpleWeb::SocketClientBase
path	Simple-WebSocket-Server/server_ws.hpp	/^            std::string method, path, http_version;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
path_match	Simple-WebSocket-Server/server_ws.hpp	/^            REGEX_NS::smatch path_match;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
pause	alsa/include/alsa/pcm_ioplug.h	/^	int (*pause)(snd_pcm_ioplug_t *io, int enable);$/;"	m	struct:snd_pcm_ioplug_callback
payload_size	alsa/include/alsa/sound/asoc.h	/^	__le32 payload_size;	\/* data bytes, excluding this header *\/$/;"	m	struct:snd_soc_tplg_hdr
pb	alsa/include/alsa/sound/hdspm.h	/^	unsigned int pb[HDSPM_MIXER_CHANNELS];$/;"	m	struct:hdspm_channelfader
pbcheck	alsa/sbin/alsa-info.sh	/^pbcheck(){$/;"	f
pbkdf2	Simple-WebSocket-Server/crypto.hpp	/^        static std::string pbkdf2(const std::string &password, const std::string &salt, int iterations, int key_size) {$/;"	f	class:SimpleWeb::Crypto
pcm	alsa/include/alsa/pcm_extplug.h	/^	snd_pcm_t *pcm;$/;"	m	struct:snd_pcm_extplug
pcm	alsa/include/alsa/pcm_ioplug.h	/^	snd_pcm_t *pcm;$/;"	m	struct:snd_pcm_ioplug
pcm	alsa/include/alsa/topology.h	/^		struct snd_tplg_pcm_template *pcm;		\/*!< PCM elements *\/$/;"	m	union:snd_tplg_obj_template::__anon23	typeref:struct:snd_tplg_obj_template::__anon23::snd_tplg_pcm_template
pcm_elems	alsa/include/alsa/sound/asoc.h	/^	__le32 pcm_elems;	\/* number of PCM elements *\/$/;"	m	struct:snd_soc_tplg_manifest
pcm_id	alsa/include/alsa/sound/asoc.h	/^	__le32 pcm_id;		\/* unique ID - used to match with DAI link *\/$/;"	m	struct:snd_soc_tplg_pcm
pcm_id	alsa/include/alsa/topology.h	/^	unsigned int pcm_id;	\/*!< unique ID - used to match *\/$/;"	m	struct:snd_tplg_pcm_template
pcm_name	alsa/include/alsa/sound/asoc.h	/^	char pcm_name[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];$/;"	m	struct:snd_soc_tplg_pcm
pcm_name	alsa/include/alsa/topology.h	/^	const char *pcm_name;	\/*!< PCM stream name *\/$/;"	m	struct:snd_tplg_pcm_template
period_bytes	alsa/include/alsa/sound/asoc.h	/^	__le32 period_bytes;	\/* size of period in bytes *\/$/;"	m	struct:snd_soc_tplg_stream
period_bytes	alsa/include/alsa/topology.h	/^	int period_bytes;	\/*!< size of period in bytes *\/$/;"	m	struct:snd_tplg_stream_template
period_size	alsa/include/alsa/pcm_ioplug.h	/^	snd_pcm_uframes_t period_size;	\/**< period size; filled after hw_params is called *\/$/;"	m	struct:snd_pcm_ioplug
period_size	alsa/include/alsa/pcm_rate.h	/^	snd_pcm_uframes_t period_size;$/;"	m	struct:snd_pcm_rate_side_info
period_size_max	alsa/include/alsa/sound/asoc.h	/^	__le32 period_size_max;	\/* max period size bytes *\/$/;"	m	struct:snd_soc_tplg_stream_caps
period_size_max	alsa/include/alsa/topology.h	/^	unsigned int period_size_max;	\/*!< max period size bytes *\/$/;"	m	struct:snd_tplg_stream_caps_template
period_size_min	alsa/include/alsa/sound/asoc.h	/^	__le32 period_size_min;	\/* min period size bytes *\/$/;"	m	struct:snd_soc_tplg_stream_caps
period_size_min	alsa/include/alsa/topology.h	/^	unsigned int period_size_min;	\/*!< min period size bytes *\/$/;"	m	struct:snd_tplg_stream_caps_template
periods_max	alsa/include/alsa/sound/asoc.h	/^	__le32 periods_max;	\/* max number of periods *\/$/;"	m	struct:snd_soc_tplg_stream_caps
periods_max	alsa/include/alsa/topology.h	/^	unsigned int periods_max;	\/*!< max number of periods *\/$/;"	m	struct:snd_tplg_stream_caps_template
periods_min	alsa/include/alsa/sound/asoc.h	/^	__le32 periods_min;	\/* min number of periods *\/$/;"	m	struct:snd_soc_tplg_stream_caps
periods_min	alsa/include/alsa/topology.h	/^	unsigned int periods_min;	\/*!< min number of periods *\/$/;"	m	struct:snd_tplg_stream_caps_template
phone_gain	alsa/include/alsa/sound/hdsp.h	/^	unsigned char phone_gain;$/;"	m	struct:_snd_hdsp_config_info
picojson	picojson/picojson.h	/^namespace picojson {$/;"	n
picojson_h	picojson/picojson.h	29;"	d
picotest_h	picojson/picotest/picotest.h	23;"	d
platform_max	alsa/include/alsa/sound/asoc.h	/^	__le32 platform_max;$/;"	m	struct:snd_soc_tplg_mixer_control
platform_max	alsa/include/alsa/topology.h	/^	int platform_max;	\/*!< max value for platform control *\/$/;"	m	struct:snd_tplg_mixer_template
playback	alsa/include/alsa/sound/asoc.h	/^	__le32 playback;	\/* supports playback mode *\/$/;"	m	struct:snd_soc_tplg_pcm
playback	alsa/include/alsa/topology.h	/^	unsigned int playback;	\/*!< supports playback mode *\/$/;"	m	struct:snd_tplg_pcm_template
playback_pcm	alsa/include/alsa/mixer.h	/^	snd_pcm_t *playback_pcm;$/;"	m	struct:snd_mixer_selem_regopt
playback_peaks	alsa/include/alsa/sound/hdsp.h	/^	uint32_t playback_peaks[26];$/;"	m	struct:_snd_hdsp_peak_rms
playback_peaks	alsa/include/alsa/sound/hdspm.h	/^	uint32_t playback_peaks[64];$/;"	m	struct:hdspm_peak_rms
playback_rms	alsa/include/alsa/sound/hdsp.h	/^	uint64_t playback_rms[26];$/;"	m	struct:_snd_hdsp_peak_rms
playback_rms	alsa/include/alsa/sound/hdspm.h	/^	uint64_t playback_rms[64];$/;"	m	struct:hdspm_peak_rms
pointer	alsa/include/alsa/pcm_ioplug.h	/^	snd_pcm_sframes_t (*pointer)(snd_pcm_ioplug_t *io);$/;"	m	struct:snd_pcm_ioplug_callback
poll_descriptors	alsa/include/alsa/control_external.h	/^	int (*poll_descriptors)(snd_ctl_ext_t *ext, struct pollfd *pfds, unsigned int space);$/;"	m	struct:snd_ctl_ext_callback
poll_descriptors	alsa/include/alsa/pcm_ioplug.h	/^	int (*poll_descriptors)(snd_pcm_ioplug_t *io, struct pollfd *pfd, unsigned int space);$/;"	m	struct:snd_pcm_ioplug_callback
poll_descriptors_count	alsa/include/alsa/control_external.h	/^	int (*poll_descriptors_count)(snd_ctl_ext_t *ext);$/;"	m	struct:snd_ctl_ext_callback
poll_descriptors_count	alsa/include/alsa/pcm_ioplug.h	/^	int (*poll_descriptors_count)(snd_pcm_ioplug_t *io);$/;"	m	struct:snd_pcm_ioplug_callback
poll_events	alsa/include/alsa/pcm_ioplug.h	/^	unsigned int poll_events;	\/**< poll events *\/$/;"	m	struct:snd_pcm_ioplug
poll_fd	alsa/include/alsa/control_external.h	/^	int poll_fd;$/;"	m	struct:snd_ctl_ext
poll_fd	alsa/include/alsa/pcm_ioplug.h	/^	int poll_fd;		\/**< poll file descriptor *\/$/;"	m	struct:snd_pcm_ioplug
poll_revents	alsa/include/alsa/control_external.h	/^	int (*poll_revents)(snd_ctl_ext_t *ext, struct pollfd *pfds, unsigned int nfds, unsigned short *revents);$/;"	m	struct:snd_ctl_ext_callback
poll_revents	alsa/include/alsa/pcm_ioplug.h	/^	int (*poll_revents)(snd_pcm_ioplug_t *io, struct pollfd *pfd, unsigned int nfds, unsigned short *revents);$/;"	m	struct:snd_pcm_ioplug_callback
port	Simple-WebSocket-Server/client_ws.hpp	/^        unsigned short port;$/;"	m	class:SimpleWeb::SocketClientBase
port	Simple-WebSocket-Server/server_ws.hpp	/^            unsigned short port;$/;"	m	class:SimpleWeb::SocketServerBase::Config
port	alsa/include/alsa/seq_event.h	/^	unsigned char port;	\/**< Port id *\/$/;"	m	struct:snd_seq_addr
pos	alsa/include/alsa/pcm.h	/^	unsigned int pos[0];	\/**< channel position array *\/$/;"	m	struct:snd_pcm_chmap
position	alsa/include/alsa/seq_event.h	/^		unsigned int position;		\/**< sync position *\/$/;"	m	union:snd_seq_ev_queue_control::__anon13
pref_sync_ref	alsa/include/alsa/sound/hdsp.h	/^	unsigned char pref_sync_ref;$/;"	m	struct:_snd_hdsp_config_info
pref_sync_ref	alsa/include/alsa/sound/hdspm.h	/^	unsigned char pref_sync_ref;$/;"	m	struct:hdspm_config
prefix	picojson/Makefile	/^prefix=\/usr\/local$/;"	m
prepare	alsa/include/alsa/pcm_ioplug.h	/^	int (*prepare)(snd_pcm_ioplug_t *io);$/;"	m	struct:snd_pcm_ioplug_callback
print_result	alsa/sbin/alsabat-test.sh	/^print_result () {$/;"	f
priv	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_private priv;$/;"	m	struct:snd_soc_tplg_bytes_control	typeref:struct:snd_soc_tplg_bytes_control::snd_soc_tplg_private
priv	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_private priv;$/;"	m	struct:snd_soc_tplg_dapm_widget	typeref:struct:snd_soc_tplg_dapm_widget::snd_soc_tplg_private
priv	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_private priv;$/;"	m	struct:snd_soc_tplg_enum_control	typeref:struct:snd_soc_tplg_enum_control::snd_soc_tplg_private
priv	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_private priv;$/;"	m	struct:snd_soc_tplg_manifest	typeref:struct:snd_soc_tplg_manifest::snd_soc_tplg_private
priv	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_private priv;$/;"	m	struct:snd_soc_tplg_mixer_control	typeref:struct:snd_soc_tplg_mixer_control::snd_soc_tplg_private
priv	alsa/include/alsa/topology.h	/^	struct snd_soc_tplg_private *priv;	\/*!< control private data *\/$/;"	m	struct:snd_tplg_bytes_template	typeref:struct:snd_tplg_bytes_template::snd_soc_tplg_private
priv	alsa/include/alsa/topology.h	/^	struct snd_soc_tplg_private *priv;	\/*!< control private data *\/$/;"	m	struct:snd_tplg_enum_template	typeref:struct:snd_tplg_enum_template::snd_soc_tplg_private
priv	alsa/include/alsa/topology.h	/^	struct snd_soc_tplg_private *priv;	\/*!< control private data *\/$/;"	m	struct:snd_tplg_mixer_template	typeref:struct:snd_tplg_mixer_template::snd_soc_tplg_private
priv	alsa/include/alsa/topology.h	/^	struct snd_soc_tplg_private *priv;	\/*!< widget private data *\/$/;"	m	struct:snd_tplg_widget_template	typeref:struct:snd_tplg_widget_template::snd_soc_tplg_private
private_data	alsa/include/alsa/control_external.h	/^	void *private_data;$/;"	m	struct:snd_ctl_ext
private_data	alsa/include/alsa/pcm_extplug.h	/^	void *private_data;$/;"	m	struct:snd_pcm_extplug
private_data	alsa/include/alsa/pcm_ioplug.h	/^	void *private_data;$/;"	m	struct:snd_pcm_ioplug
probe_cards	alsa/sbin/alsaconf	/^probe_cards () {$/;"	f
process_info	tcpserver.cpp	/^void process_info(int sock)$/;"	f
process_net	tcpserver.cpp	/^unsigned char  process_net(int sock, unsigned char userOP, unsigned char * data,int len)$/;"	f
prog	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char prog;$/;"	m	struct:sbi_patch
ptr	alsa/include/alsa/seq_event.h	/^	void *ptr;			\/**< pointer to data (note: can be 64-bit) *\/$/;"	m	struct:snd_seq_ev_ext
push_back	picojson/picojson.h	/^    void push_back(int) {$/;"	f	struct:picojson::null_parse_context::dummy_str
put	alsa/include/alsa/sound/asoc.h	/^	__le32 put;$/;"	m	struct:snd_soc_tplg_io_ops
put	alsa/include/alsa/topology.h	/^	int put;	\/*!< put callback ID *\/$/;"	m	struct:snd_tplg_io_ops_template
qs	alsa/include/alsa/sound/hdspm.h	/^	qs$/;"	e	enum:hdspm_speed
query_chmaps	alsa/include/alsa/pcm_extplug.h	/^	snd_pcm_chmap_query_t **(*query_chmaps)(snd_pcm_extplug_t *ext);$/;"	m	struct:snd_pcm_extplug_callback
query_chmaps	alsa/include/alsa/pcm_ioplug.h	/^	snd_pcm_chmap_query_t **(*query_chmaps)(snd_pcm_ioplug_t *io);$/;"	m	struct:snd_pcm_ioplug_callback
queue	alsa/include/alsa/seq_event.h	/^		snd_seq_ev_queue_control_t queue; \/**< queue control *\/$/;"	m	union:snd_seq_event::__anon14
queue	alsa/include/alsa/seq_event.h	/^	unsigned char queue;			\/**< affected queue *\/$/;"	m	struct:snd_seq_ev_queue_control
queue	alsa/include/alsa/seq_event.h	/^	unsigned char queue;		\/**< schedule queue *\/$/;"	m	struct:snd_seq_event
rate	alsa/include/alsa/pcm_extplug.h	/^	unsigned int rate;$/;"	m	struct:snd_pcm_extplug
rate	alsa/include/alsa/pcm_ioplug.h	/^	unsigned int rate;		\/**< rate; filled after hw_params is called *\/$/;"	m	struct:snd_pcm_ioplug
rate	alsa/include/alsa/pcm_rate.h	/^	unsigned int rate;$/;"	m	struct:snd_pcm_rate_side_info
rate	alsa/include/alsa/sound/asoc.h	/^	__le32 rate;		\/* SNDRV_PCM_RATE_* *\/$/;"	m	struct:snd_soc_tplg_stream
rate	alsa/include/alsa/topology.h	/^	int rate;		\/*!< SNDRV_PCM_RATE_* *\/$/;"	m	struct:snd_tplg_stream_template
rate_max	alsa/include/alsa/sound/asoc.h	/^	__le32 rate_max;	\/* max rate *\/$/;"	m	struct:snd_soc_tplg_stream_caps
rate_max	alsa/include/alsa/topology.h	/^	unsigned int rate_max;	\/*!< max rate *\/$/;"	m	struct:snd_tplg_stream_caps_template
rate_min	alsa/include/alsa/sound/asoc.h	/^	__le32 rate_min;	\/* min rate *\/$/;"	m	struct:snd_soc_tplg_stream_caps
rate_min	alsa/include/alsa/topology.h	/^	unsigned int rate_min;	\/*!< min rate *\/$/;"	m	struct:snd_tplg_stream_caps_template
rates	alsa/include/alsa/sound/asoc.h	/^	__le32 rates;		\/* supported rates SNDRV_PCM_RATE_* *\/$/;"	m	struct:snd_soc_tplg_stream_caps
rates	alsa/include/alsa/topology.h	/^	unsigned int rates;	\/*!< supported rates SNDRV_PCM_RATE_* *\/$/;"	m	struct:snd_tplg_stream_caps_template
raw32	alsa/include/alsa/seq_event.h	/^		snd_seq_ev_raw32_t raw32;	\/**< raw32 data *\/$/;"	m	union:snd_seq_event::__anon14
raw8	alsa/include/alsa/seq_event.h	/^		snd_seq_ev_raw8_t raw8;		\/**< raw8 data *\/$/;"	m	union:snd_seq_event::__anon14
rd_pointer	ringbuffer.h	/^    int rd_pointer;$/;"	m	struct:__anon32
read_bytes	alsa/include/alsa/control_external.h	/^	int (*read_bytes)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, unsigned char *data,$/;"	m	struct:snd_ctl_ext_callback
read_enumerated	alsa/include/alsa/control_external.h	/^	int (*read_enumerated)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, unsigned int *items);$/;"	m	struct:snd_ctl_ext_callback
read_event	alsa/include/alsa/control_external.h	/^	int (*read_event)(snd_ctl_ext_t *ext, snd_ctl_elem_id_t *id, unsigned int *event_mask);$/;"	m	struct:snd_ctl_ext_callback
read_handshake	Simple-WebSocket-Server/server_ws.hpp	/^        void read_handshake(const std::shared_ptr<Connection> &connection) {$/;"	f	class:SimpleWeb::SocketServerBase
read_iec958	alsa/include/alsa/control_external.h	/^	int (*read_iec958)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, snd_aes_iec958_t *iec958);$/;"	m	struct:snd_ctl_ext_callback
read_integer	alsa/include/alsa/control_external.h	/^	int (*read_integer)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, long *value);$/;"	m	struct:snd_ctl_ext_callback
read_integer64	alsa/include/alsa/control_external.h	/^	int (*read_integer64)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, int64_t *value);$/;"	m	struct:snd_ctl_ext_callback
read_message	Simple-WebSocket-Server/client_ws.hpp	/^        void read_message(const std::shared_ptr<Message> &message) {$/;"	f	class:SimpleWeb::SocketClientBase
read_message	Simple-WebSocket-Server/server_ws.hpp	/^        void read_message(const std::shared_ptr<Connection> &connection,$/;"	f	class:SimpleWeb::SocketServerBase
read_message_content	Simple-WebSocket-Server/client_ws.hpp	/^        void read_message_content(const std::shared_ptr<Message> &message) {$/;"	f	class:SimpleWeb::SocketClientBase
read_message_content	Simple-WebSocket-Server/server_ws.hpp	/^        void read_message_content(const std::shared_ptr<Connection> &connection, const std::shared_ptr<boost::asio::streambuf> &read_buffer,$/;"	f	class:SimpleWeb::SocketServerBase
read_remote_endpoint_data	Simple-WebSocket-Server/client_ws.hpp	/^            void read_remote_endpoint_data() {$/;"	f	class:SimpleWeb::SocketClientBase::Connection
read_remote_endpoint_data	Simple-WebSocket-Server/server_ws.hpp	/^            void read_remote_endpoint_data() {$/;"	f	class:SimpleWeb::SocketServerBase::Connection
reg	alsa/include/alsa/sound/asoc.h	/^	__le32 reg;		\/* negative reg = no direct dapm *\/$/;"	m	struct:snd_soc_tplg_dapm_widget
reg	alsa/include/alsa/sound/asoc.h	/^	__le32 reg;$/;"	m	struct:snd_soc_tplg_channel
reg	alsa/include/alsa/topology.h	/^	int reg;		\/*!< negative reg = no direct dapm *\/$/;"	m	struct:snd_tplg_widget_template
reg	alsa/include/alsa/topology.h	/^	int reg;	\/*!< channel control register *\/$/;"	m	struct:snd_tplg_channel_elem
regex_orderable	Simple-WebSocket-Server/server_ws.hpp	/^            regex_orderable(const char *regex_cstr) : REGEX_NS::regex(regex_cstr), str(regex_cstr) {}$/;"	f	class:SimpleWeb::SocketServerBase::regex_orderable
regex_orderable	Simple-WebSocket-Server/server_ws.hpp	/^            regex_orderable(const std::string &regex_str) : REGEX_NS::regex(regex_str), str(regex_str) {}$/;"	f	class:SimpleWeb::SocketServerBase::regex_orderable
regex_orderable	Simple-WebSocket-Server/server_ws.hpp	/^        class regex_orderable : public REGEX_NS::regex {$/;"	c	class:SimpleWeb::SocketServerBase
release	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char release;		\/* 4 bits: release rate *\/$/;"	m	struct:snd_dm_fm_voice
remote_endpoint_address	Simple-WebSocket-Server/client_ws.hpp	/^            std::string remote_endpoint_address;$/;"	m	class:SimpleWeb::SocketClientBase::Connection
remote_endpoint_address	Simple-WebSocket-Server/server_ws.hpp	/^            std::string remote_endpoint_address;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
remote_endpoint_port	Simple-WebSocket-Server/client_ws.hpp	/^            unsigned short remote_endpoint_port;$/;"	m	class:SimpleWeb::SocketClientBase::Connection
remote_endpoint_port	Simple-WebSocket-Server/server_ws.hpp	/^            unsigned short remote_endpoint_port;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
remove_ac_block	alsa/sbin/alsaconf	/^remove_ac_block() {$/;"	f
remove_sndconfig_block	alsa/sbin/alsaconf	/^remove_sndconfig_block() {$/;"	f
remove_y2_block	alsa/sbin/alsaconf	/^remove_y2_block() {$/;"	f
report_delay	alsa/include/alsa/pcm.h	/^	unsigned int report_delay:1; \/* add total delay to A\/D or D\/A *\/$/;"	m	struct:_snd_pcm_audio_tstamp_config
res1	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int res1;		\/* reserved *\/$/;"	m	struct:__anon6
res2	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int res2;		\/* reserved *\/$/;"	m	struct:__anon6
reset	alsa/include/alsa/pcm.h	/^	void (*reset)(snd_pcm_scope_t *scope);$/;"	m	struct:_snd_pcm_scope_ops
reset	alsa/include/alsa/pcm_rate.h	/^	void (*reset)(void *obj);$/;"	m	struct:snd_pcm_rate_old_ops
reset	alsa/include/alsa/pcm_rate.h	/^	void (*reset)(void *obj);$/;"	m	struct:snd_pcm_rate_ops
resolution	alsa/include/alsa/timer.h	/^	unsigned int resolution;	\/**< tick resolution in nanoseconds *\/$/;"	m	struct:_snd_timer_read
resolver	Simple-WebSocket-Server/client_ws.hpp	/^        std::unique_ptr<boost::asio::ip::tcp::resolver> resolver;$/;"	m	class:SimpleWeb::SocketClientBase
result	alsa/include/alsa/seq_event.h	/^		snd_seq_result_t result;	\/**< operation result code *\/$/;"	m	union:snd_seq_event::__anon14
result	alsa/include/alsa/seq_event.h	/^	int result;		\/**< status *\/$/;"	m	struct:snd_seq_result
resume	alsa/include/alsa/pcm_ioplug.h	/^	int (*resume)(snd_pcm_ioplug_t *io);$/;"	m	struct:snd_pcm_ioplug_callback
reuse_address	Simple-WebSocket-Server/server_ws.hpp	/^            bool reuse_address=true;$/;"	m	class:SimpleWeb::SocketServerBase::Config
rhythm	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char rhythm;		\/* percussion mode flag *\/$/;"	m	struct:snd_dm_fm_info
rhythm	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char rhythm;		\/* percussion mode select *\/$/;"	m	struct:snd_dm_fm_params
right	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char right;		\/* stereo right *\/$/;"	m	struct:snd_dm_fm_voice
root_context	picojson/examples/streaming.cc	/^class root_context : public picojson::deny_parse_context {$/;"	c	namespace:__anon29	file:
round	Simple-WebSocket-Server/crypto.hpp	/^        inline double round(double x) { \/\/custom definition of round() for positive numbers$/;"	f	namespace:SimpleWeb
run_channels	alsa/include/alsa/sound/sb16_csp.h	/^	unsigned short run_channels;	\/* current channels  *\/$/;"	m	struct:snd_sb_csp_info
run_width	alsa/include/alsa/sound/sb16_csp.h	/^	unsigned short run_width;	\/* current sample width *\/$/;"	m	struct:snd_sb_csp_info
s	picojson/picojson.h	/^template <typename T> std::string last_error_t<T>::s;$/;"	m	class:picojson::last_error_t
s	picojson/picojson.h	/^template <typename T> struct last_error_t { static std::string s; };$/;"	m	struct:picojson::last_error_t
sample_width	alsa/include/alsa/sound/sb16_csp.h	/^	int sample_width;	\/* sample width, look above *\/$/;"	m	struct:snd_sb_csp_start
samples	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int *samples;		\/* pointer to samples (20-bit) *\/$/;"	m	struct:__anon5
sbi_patch	alsa/include/alsa/sound/asound_fm.h	/^struct sbi_patch {$/;"	s
scale	alsa/include/alsa/sound/asoc.h	/^		struct snd_soc_tplg_tlv_dbscale scale;$/;"	m	union:snd_soc_tplg_ctl_tlv::__anon10	typeref:struct:snd_soc_tplg_ctl_tlv::__anon10::snd_soc_tplg_tlv_dbscale
scale_level	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char scale_level;	\/* 2 bits: decrease output freq rises *\/$/;"	m	struct:snd_dm_fm_voice
send	Simple-WebSocket-Server/client_ws.hpp	/^        void send(const std::shared_ptr<SendStream> &message_stream, const std::function<void(const boost::system::error_code&)>& callback=nullptr,$/;"	f	class:SimpleWeb::SocketClientBase
send	Simple-WebSocket-Server/server_ws.hpp	/^        void send(const std::shared_ptr<Connection> &connection, const std::shared_ptr<SendStream> &message_stream, $/;"	f	class:SimpleWeb::SocketServerBase
send_close	Simple-WebSocket-Server/client_ws.hpp	/^        void send_close(int status, const std::string& reason="", const std::function<void(const boost::system::error_code&)>& callback=nullptr) {$/;"	f	class:SimpleWeb::SocketClientBase
send_close	Simple-WebSocket-Server/server_ws.hpp	/^        void send_close(const std::shared_ptr<Connection> &connection, int status, const std::string& reason="",$/;"	f	class:SimpleWeb::SocketServerBase
send_from_queue	Simple-WebSocket-Server/client_ws.hpp	/^            void send_from_queue() {$/;"	f	class:SimpleWeb::SocketClientBase::Connection
send_from_queue	Simple-WebSocket-Server/server_ws.hpp	/^            void send_from_queue(const std::shared_ptr<Connection> &connection) {$/;"	f	class:SimpleWeb::SocketServerBase::Connection
send_queue	Simple-WebSocket-Server/client_ws.hpp	/^            std::list<SendData> send_queue;$/;"	m	class:SimpleWeb::SocketClientBase::Connection
send_queue	Simple-WebSocket-Server/server_ws.hpp	/^            std::list<SendData> send_queue;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
send_stream	Simple-WebSocket-Server/client_ws.hpp	/^                std::shared_ptr<SendStream> send_stream;$/;"	m	class:SimpleWeb::SocketClientBase::Connection::SendData
sender	alsa/include/alsa/seq_event.h	/^	snd_seq_addr_t sender;	\/**< sender address *\/$/;"	m	struct:snd_seq_connect
serial	alsa/include/alsa/sound/hdspm.h	/^	unsigned int serial;$/;"	m	struct:hdspm_version
serialize	picojson/picojson.h	/^inline std::string value::serialize(bool prettify) const {$/;"	f	class:picojson::value
serialize	picojson/picojson.h	/^template <typename Iter> void value::serialize(Iter oi, bool prettify) const {$/;"	f	class:picojson::value
serialize_str	picojson/picojson.h	/^template <typename Iter> void serialize_str(const std::string &s, Iter oi) {$/;"	f	namespace:picojson
serialize_str_char	picojson/picojson.h	/^template <typename Iter> struct serialize_str_char {$/;"	s	namespace:picojson
session_id_context	Simple-WebSocket-Server/server_wss.hpp	/^        std::string session_id_context;$/;"	m	class:SimpleWeb::SocketServer
set_bool	picojson/picojson.h	/^  bool set_bool(bool b) {$/;"	f	class:picojson::default_parse_context
set_bool	picojson/picojson.h	/^  bool set_bool(bool) {$/;"	f	class:picojson::deny_parse_context
set_bool	picojson/picojson.h	/^  bool set_bool(bool) {$/;"	f	class:picojson::null_parse_context
set_chmap	alsa/include/alsa/pcm_extplug.h	/^	int (*set_chmap)(snd_pcm_extplug_t *ext, const snd_pcm_chmap_t *map);$/;"	m	struct:snd_pcm_extplug_callback
set_chmap	alsa/include/alsa/pcm_ioplug.h	/^	int (*set_chmap)(snd_pcm_ioplug_t *io, const snd_pcm_chmap_t *map);$/;"	m	struct:snd_pcm_ioplug_callback
set_dB	alsa/include/alsa/mixer_abst.h	/^	int (*set_dB)(snd_mixer_elem_t *elem, int dir, snd_mixer_selem_channel_id_t channel, long value, int xdir);$/;"	m	struct:sm_elem_ops
set_enum_item	alsa/include/alsa/mixer_abst.h	/^	int (*set_enum_item)(snd_mixer_elem_t *elem, snd_mixer_selem_channel_id_t channel, unsigned int item);$/;"	m	struct:sm_elem_ops
set_int64	picojson/picojson.h	/^  bool set_int64(int64_t i) {$/;"	f	class:picojson::default_parse_context
set_int64	picojson/picojson.h	/^  bool set_int64(int64_t) {$/;"	f	class:picojson::deny_parse_context
set_int64	picojson/picojson.h	/^  bool set_int64(int64_t) {$/;"	f	class:picojson::null_parse_context
set_last_error	picojson/picojson.h	/^inline void set_last_error(const std::string &s) {$/;"	f	namespace:picojson
set_mixers	alsa/sbin/alsaconf	/^set_mixers() {$/;"	f
set_null	picojson/picojson.h	/^  bool set_null() {$/;"	f	class:picojson::default_parse_context
set_null	picojson/picojson.h	/^  bool set_null() {$/;"	f	class:picojson::deny_parse_context
set_null	picojson/picojson.h	/^  bool set_null() {$/;"	f	class:picojson::null_parse_context
set_number	picojson/picojson.h	/^  bool set_number(double f) {$/;"	f	class:picojson::default_parse_context
set_number	picojson/picojson.h	/^  bool set_number(double) {$/;"	f	class:picojson::deny_parse_context
set_number	picojson/picojson.h	/^  bool set_number(double) {$/;"	f	class:picojson::null_parse_context
set_range	alsa/include/alsa/mixer_abst.h	/^	int (*set_range)(snd_mixer_elem_t *elem, int dir, long min, long max);$/;"	m	struct:sm_elem_ops
set_session_id_context	Simple-WebSocket-Server/server_wss.hpp	/^        bool set_session_id_context=false;$/;"	m	class:SimpleWeb::SocketServer
set_switch	alsa/include/alsa/mixer_abst.h	/^	int (*set_switch)(snd_mixer_elem_t *elem, int dir, snd_mixer_selem_channel_id_t channel, int value);$/;"	m	struct:sm_elem_ops
set_volume	alsa/include/alsa/mixer_abst.h	/^	int (*set_volume)(snd_mixer_elem_t *elem, int dir, snd_mixer_selem_channel_id_t channel, long value);$/;"	m	struct:sm_elem_ops
setup_hwcfg	alsa/sbin/alsaconf	/^setup_hwcfg () {$/;"	f
sha1	Simple-WebSocket-Server/crypto.hpp	/^        static std::string sha1(const std::string &input, size_t iterations=1) {$/;"	f	class:SimpleWeb::Crypto
sha1	Simple-WebSocket-Server/crypto.hpp	/^        static std::string sha1(std::istream &stream, size_t iterations=1) {$/;"	f	class:SimpleWeb::Crypto
sha1_string_tests	Simple-WebSocket-Server/tests/crypto_test.cpp	/^const vector<pair<string, string> > sha1_string_tests = {$/;"	v
sha256	Simple-WebSocket-Server/crypto.hpp	/^        static std::string sha256(const std::string &input, size_t iterations=1) {$/;"	f	class:SimpleWeb::Crypto
sha256	Simple-WebSocket-Server/crypto.hpp	/^        static std::string sha256(std::istream &stream, size_t iterations=1) {$/;"	f	class:SimpleWeb::Crypto
sha256_string_tests	Simple-WebSocket-Server/tests/crypto_test.cpp	/^const vector<pair<string, string> > sha256_string_tests = {$/;"	v
sha512	Simple-WebSocket-Server/crypto.hpp	/^        static std::string sha512(const std::string &input, size_t iterations=1) {$/;"	f	class:SimpleWeb::Crypto
sha512	Simple-WebSocket-Server/crypto.hpp	/^        static std::string sha512(std::istream &stream, size_t iterations=1) {$/;"	f	class:SimpleWeb::Crypto
sha512_string_tests	Simple-WebSocket-Server/tests/crypto_test.cpp	/^const vector<pair<string, string> > sha512_string_tests = {$/;"	v
shift	alsa/include/alsa/sound/asoc.h	/^	__le32 shift;		\/* bits to shift *\/$/;"	m	struct:snd_soc_tplg_dapm_widget
shift	alsa/include/alsa/sound/asoc.h	/^	__le32 shift;$/;"	m	struct:snd_soc_tplg_channel
shift	alsa/include/alsa/topology.h	/^	int shift;		\/*!< bits to shift *\/$/;"	m	struct:snd_tplg_widget_template
shift	alsa/include/alsa/topology.h	/^	int shift;	\/*!< channel shift for control bits *\/$/;"	m	struct:snd_tplg_channel_elem
sink	alsa/include/alsa/sound/asoc.h	/^	char sink[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];$/;"	m	struct:snd_soc_tplg_dapm_graph_elem
sink	alsa/include/alsa/topology.h	/^	const char *sink;	\/*!< sink widget name *\/$/;"	m	struct:snd_tplg_graph_elem
size	Simple-WebSocket-Server/client_ws.hpp	/^            size_t size() {$/;"	f	class:SimpleWeb::SocketClientBase::Message
size	Simple-WebSocket-Server/client_ws.hpp	/^            size_t size() {$/;"	f	class:SimpleWeb::SocketClientBase::SendStream
size	Simple-WebSocket-Server/server_ws.hpp	/^            size_t size() {$/;"	f	class:SimpleWeb::SocketServerBase::Message
size	Simple-WebSocket-Server/server_ws.hpp	/^            size_t size() {$/;"	f	class:SimpleWeb::SocketServerBase::SendStream
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;		\/* in bytes of this structure *\/$/;"	m	struct:snd_soc_tplg_dapm_widget
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;		\/* in bytes of this structure *\/$/;"	m	struct:snd_soc_tplg_manifest
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;		\/* in bytes of this structure *\/$/;"	m	struct:snd_soc_tplg_pcm
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;		\/* in bytes of this structure *\/$/;"	m	struct:snd_soc_tplg_stream
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;		\/* in bytes of this structure *\/$/;"	m	struct:snd_soc_tplg_stream_caps
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;		\/* size of this structure *\/$/;"	m	struct:snd_soc_tplg_hdr
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;	\/* in bytes of private data *\/$/;"	m	struct:snd_soc_tplg_private
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;	\/* in bytes of this structure *\/$/;"	m	struct:snd_soc_tplg_bytes_control
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;	\/* in bytes of this structure *\/$/;"	m	struct:snd_soc_tplg_channel
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;	\/* in bytes of this structure *\/$/;"	m	struct:snd_soc_tplg_ctl_hdr
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;	\/* in bytes of this structure *\/$/;"	m	struct:snd_soc_tplg_ctl_tlv
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;	\/* in bytes of this structure *\/$/;"	m	struct:snd_soc_tplg_enum_control
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;	\/* in bytes of this structure *\/$/;"	m	struct:snd_soc_tplg_mixer_control
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;	\/* size in bytes of the array, including all elements *\/$/;"	m	struct:snd_soc_tplg_vendor_array
size	alsa/include/alsa/sound/asoc.h	/^	__le32 size;            \/* in bytes of this structure *\/$/;"	m	struct:snd_soc_tplg_link_config
size	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int size;		\/* size in samples (4 bytes) *\/$/;"	m	struct:__anon5
size	alsa/include/alsa/topology.h	/^	int size;	\/*!< size in bytes of this structure *\/$/;"	m	struct:snd_tplg_channel_elem
size	audio.h	/^	int size;$/;"	m	class:t_audio_target
size	picojson/examples/github-issues.cc	/^  size_t size; \/\/ response size of data$/;"	m	struct:__anon28	file:
size	ringbuffer.h	/^    int size;$/;"	m	struct:__anon32
skew	alsa/include/alsa/seq_event.h	/^		snd_seq_queue_skew_t skew;	\/**< queue skew *\/$/;"	m	union:snd_seq_ev_queue_control::__anon13
skip_ws	picojson/picojson.h	/^  void skip_ws() {$/;"	f	class:picojson::input
slave_channels	alsa/include/alsa/pcm_extplug.h	/^	unsigned int slave_channels;$/;"	m	struct:snd_pcm_extplug
slave_format	alsa/include/alsa/pcm_extplug.h	/^	snd_pcm_format_t slave_format;$/;"	m	struct:snd_pcm_extplug
slave_subformat	alsa/include/alsa/pcm_extplug.h	/^	snd_pcm_subformat_t slave_subformat;$/;"	m	struct:snd_pcm_extplug
sm_class_basic_t	alsa/include/alsa/mixer_abst.h	/^} sm_class_basic_t;$/;"	t	typeref:struct:_sm_class_basic
sm_elem_ops	alsa/include/alsa/mixer_abst.h	/^struct sm_elem_ops {	$/;"	s
sm_selem	alsa/include/alsa/mixer_abst.h	63;"	d
sm_selem_ops	alsa/include/alsa/mixer_abst.h	64;"	d
sm_selem_t	alsa/include/alsa/mixer_abst.h	/^} sm_selem_t;$/;"	t	typeref:struct:_sm_selem
sname	alsa/include/alsa/sound/asoc.h	/^	char sname[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];$/;"	m	struct:snd_soc_tplg_dapm_widget
sname	alsa/include/alsa/topology.h	/^	const char *sname;	\/*!< stream name (certain widgets only) *\/$/;"	m	struct:snd_tplg_widget_template
snare	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char snare;$/;"	m	struct:snd_dm_fm_params
snd_aes_iec958	alsa/include/alsa/control.h	/^typedef struct snd_aes_iec958 {$/;"	s
snd_aes_iec958_t	alsa/include/alsa/control.h	/^} snd_aes_iec958_t;$/;"	t	typeref:struct:snd_aes_iec958
snd_async_callback_t	alsa/include/alsa/global.h	/^typedef void (*snd_async_callback_t)(snd_async_handler_t *handler);$/;"	t
snd_async_handler_t	alsa/include/alsa/global.h	/^typedef struct _snd_async_handler snd_async_handler_t;$/;"	t	typeref:struct:_snd_async_handler
snd_config_for_each	alsa/include/alsa/conf.h	177;"	d
snd_config_iterator_t	alsa/include/alsa/conf.h	/^typedef struct _snd_config_iterator *snd_config_iterator_t;$/;"	t	typeref:struct:_snd_config_iterator
snd_config_t	alsa/include/alsa/conf.h	/^typedef struct _snd_config snd_config_t;$/;"	t	typeref:struct:_snd_config
snd_config_type_t	alsa/include/alsa/conf.h	/^} snd_config_type_t;$/;"	t	typeref:enum:_snd_config_type
snd_config_update_t	alsa/include/alsa/conf.h	/^typedef struct _snd_config_update snd_config_update_t;$/;"	t	typeref:struct:_snd_config_update
snd_ctl_abort	alsa/include/alsa/control.h	/^static __inline__ int snd_ctl_abort(snd_ctl_t *ctl) { return snd_ctl_nonblock(ctl, 2); }$/;"	f
snd_ctl_card_info_alloca	alsa/include/alsa/control.h	331;"	d
snd_ctl_card_info_t	alsa/include/alsa/control.h	/^typedef struct _snd_ctl_card_info snd_ctl_card_info_t;$/;"	t	typeref:struct:_snd_ctl_card_info
snd_ctl_elem_id_alloca	alsa/include/alsa/control.h	308;"	d
snd_ctl_elem_id_t	alsa/include/alsa/control.h	/^typedef struct _snd_ctl_elem_id snd_ctl_elem_id_t;$/;"	t	typeref:struct:_snd_ctl_elem_id
snd_ctl_elem_iface_t	alsa/include/alsa/control.h	/^} snd_ctl_elem_iface_t;$/;"	t	typeref:enum:_snd_ctl_elem_iface
snd_ctl_elem_info_alloca	alsa/include/alsa/control.h	382;"	d
snd_ctl_elem_info_t	alsa/include/alsa/control.h	/^typedef struct _snd_ctl_elem_info snd_ctl_elem_info_t;$/;"	t	typeref:struct:_snd_ctl_elem_info
snd_ctl_elem_list_alloca	alsa/include/alsa/control.h	361;"	d
snd_ctl_elem_list_t	alsa/include/alsa/control.h	/^typedef struct _snd_ctl_elem_list snd_ctl_elem_list_t;$/;"	t	typeref:struct:_snd_ctl_elem_list
snd_ctl_elem_type_t	alsa/include/alsa/control.h	/^} snd_ctl_elem_type_t;$/;"	t	typeref:enum:_snd_ctl_elem_type
snd_ctl_elem_value_alloca	alsa/include/alsa/control.h	461;"	d
snd_ctl_elem_value_t	alsa/include/alsa/control.h	/^typedef struct _snd_ctl_elem_value snd_ctl_elem_value_t;$/;"	t	typeref:struct:_snd_ctl_elem_value
snd_ctl_event_alloca	alsa/include/alsa/control.h	349;"	d
snd_ctl_event_t	alsa/include/alsa/control.h	/^typedef struct _snd_ctl_event snd_ctl_event_t;$/;"	t	typeref:struct:_snd_ctl_event
snd_ctl_event_type_t	alsa/include/alsa/control.h	/^}snd_ctl_event_type_t;$/;"	t	typeref:enum:_snd_ctl_event_type
snd_ctl_ext	alsa/include/alsa/control_external.h	/^struct snd_ctl_ext {$/;"	s
snd_ctl_ext_access	alsa/include/alsa/control_external.h	/^typedef enum snd_ctl_ext_access {$/;"	g
snd_ctl_ext_access_t	alsa/include/alsa/control_external.h	/^} snd_ctl_ext_access_t;$/;"	t	typeref:enum:snd_ctl_ext_access
snd_ctl_ext_callback	alsa/include/alsa/control_external.h	/^struct snd_ctl_ext_callback {$/;"	s
snd_ctl_ext_callback_t	alsa/include/alsa/control_external.h	/^typedef snd_ctl_ext_callback snd_ctl_ext_callback_t;$/;"	t
snd_ctl_ext_callback_t	alsa/include/alsa/control_external.h	/^typedef struct snd_ctl_ext_callback snd_ctl_ext_callback_t;$/;"	t	typeref:struct:snd_ctl_ext_callback
snd_ctl_ext_key_t	alsa/include/alsa/control_external.h	/^typedef unsigned long snd_ctl_ext_key_t;$/;"	t
snd_ctl_ext_t	alsa/include/alsa/control_external.h	/^typedef snd_ctl_ext snd_ctl_ext_t;$/;"	t
snd_ctl_ext_t	alsa/include/alsa/control_external.h	/^typedef struct snd_ctl_ext snd_ctl_ext_t;$/;"	t	typeref:struct:snd_ctl_ext
snd_ctl_ext_tlv_rw_t	alsa/include/alsa/control_external.h	/^typedef int (snd_ctl_ext_tlv_rw_t)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, int op_flag, unsigned int numid,$/;"	t
snd_ctl_t	alsa/include/alsa/control.h	/^typedef struct _snd_ctl snd_ctl_t;$/;"	t	typeref:struct:_snd_ctl
snd_ctl_type_t	alsa/include/alsa/control.h	/^} snd_ctl_type_t;$/;"	t	typeref:enum:_snd_ctl_type
snd_devname	alsa/include/alsa/conf.h	/^struct snd_devname {$/;"	s
snd_devname_t	alsa/include/alsa/conf.h	/^typedef struct snd_devname snd_devname_t;$/;"	t	typeref:struct:snd_devname
snd_dlsym_link	alsa/include/alsa/global.h	/^struct snd_dlsym_link {$/;"	s
snd_dm_fm_info	alsa/include/alsa/sound/asound_fm.h	/^struct snd_dm_fm_info {$/;"	s
snd_dm_fm_note	alsa/include/alsa/sound/asound_fm.h	/^struct snd_dm_fm_note {$/;"	s
snd_dm_fm_params	alsa/include/alsa/sound/asound_fm.h	/^struct snd_dm_fm_params {$/;"	s
snd_dm_fm_voice	alsa/include/alsa/sound/asound_fm.h	/^struct snd_dm_fm_voice {$/;"	s
snd_hctl_abort	alsa/include/alsa/control.h	/^static __inline__ int snd_hctl_abort(snd_hctl_t *hctl) { return snd_hctl_nonblock(hctl, 2); }$/;"	f
snd_hctl_callback_t	alsa/include/alsa/control.h	/^typedef int (*snd_hctl_callback_t)(snd_hctl_t *hctl,$/;"	t
snd_hctl_compare_t	alsa/include/alsa/control.h	/^typedef int (*snd_hctl_compare_t)(const snd_hctl_elem_t *e1,$/;"	t
snd_hctl_elem_callback_t	alsa/include/alsa/control.h	/^typedef int (*snd_hctl_elem_callback_t)(snd_hctl_elem_t *elem,$/;"	t
snd_hctl_elem_t	alsa/include/alsa/control.h	/^typedef struct _snd_hctl_elem snd_hctl_elem_t;$/;"	t	typeref:struct:_snd_hctl_elem
snd_hctl_t	alsa/include/alsa/control.h	/^typedef struct _snd_hctl snd_hctl_t;$/;"	t	typeref:struct:_snd_hctl
snd_hdspm_channelfader_t	alsa/include/alsa/sound/hdspm.h	/^typedef struct hdspm_channelfader snd_hdspm_channelfader_t;$/;"	t	typeref:struct:hdspm_channelfader
snd_htimestamp_t	alsa/include/alsa/global.h	/^typedef struct timespec snd_htimestamp_t;$/;"	t	typeref:struct:timespec
snd_hwdep_dsp_image_alloca	alsa/include/alsa/hwdep.h	147;"	d
snd_hwdep_dsp_image_t	alsa/include/alsa/hwdep.h	/^typedef struct _snd_hwdep_dsp_image snd_hwdep_dsp_image_t;$/;"	t	typeref:struct:_snd_hwdep_dsp_image
snd_hwdep_dsp_status_alloca	alsa/include/alsa/hwdep.h	134;"	d
snd_hwdep_dsp_status_t	alsa/include/alsa/hwdep.h	/^typedef struct _snd_hwdep_dsp_status snd_hwdep_dsp_status_t;$/;"	t	typeref:struct:_snd_hwdep_dsp_status
snd_hwdep_iface_t	alsa/include/alsa/hwdep.h	/^} snd_hwdep_iface_t;$/;"	t	typeref:enum:_snd_hwdep_iface
snd_hwdep_info_alloca	alsa/include/alsa/hwdep.h	120;"	d
snd_hwdep_info_t	alsa/include/alsa/hwdep.h	/^typedef struct _snd_hwdep_info snd_hwdep_info_t;$/;"	t	typeref:struct:_snd_hwdep_info
snd_hwdep_t	alsa/include/alsa/hwdep.h	/^typedef struct _snd_hwdep snd_hwdep_t;$/;"	t	typeref:struct:_snd_hwdep
snd_hwdep_type_t	alsa/include/alsa/hwdep.h	/^} snd_hwdep_type_t;$/;"	t	typeref:enum:_snd_hwdep_type
snd_input_t	alsa/include/alsa/input.h	/^typedef struct _snd_input snd_input_t;$/;"	t	typeref:struct:_snd_input
snd_input_type_t	alsa/include/alsa/input.h	/^} snd_input_type_t;$/;"	t	typeref:enum:_snd_input_type
snd_lib_error_handler_t	alsa/include/alsa/error.h	/^typedef void (*snd_lib_error_handler_t)(const char *file, int line, const char *function, int err, const char *fmt, ...) \/* __attribute__ ((format (printf, 5, 6))) *\/;$/;"	t
snd_local_error_handler_t	alsa/include/alsa/error.h	/^typedef void (*snd_local_error_handler_t)(const char *file, int line,$/;"	t
snd_midi_event_t	alsa/include/alsa/seq_midi_event.h	/^typedef struct snd_midi_event snd_midi_event_t;$/;"	t	typeref:struct:snd_midi_event
snd_mixer_callback_t	alsa/include/alsa/mixer.h	/^typedef int (*snd_mixer_callback_t)(snd_mixer_t *ctl,$/;"	t
snd_mixer_class_alloca	alsa/include/alsa/mixer.h	147;"	d
snd_mixer_class_t	alsa/include/alsa/mixer.h	/^typedef struct _snd_mixer_class snd_mixer_class_t;$/;"	t	typeref:struct:_snd_mixer_class
snd_mixer_compare_t	alsa/include/alsa/mixer.h	/^typedef int (*snd_mixer_compare_t)(const snd_mixer_elem_t *e1,$/;"	t
snd_mixer_elem_callback_t	alsa/include/alsa/mixer.h	/^typedef int (*snd_mixer_elem_callback_t)(snd_mixer_elem_t *elem,$/;"	t
snd_mixer_elem_t	alsa/include/alsa/mixer.h	/^typedef struct _snd_mixer_elem snd_mixer_elem_t;$/;"	t	typeref:struct:_snd_mixer_elem
snd_mixer_elem_type_t	alsa/include/alsa/mixer.h	/^} snd_mixer_elem_type_t;$/;"	t	typeref:enum:_snd_mixer_elem_type
snd_mixer_event_t	alsa/include/alsa/mixer.h	/^typedef int (*snd_mixer_event_t)(snd_mixer_class_t *class_, unsigned int mask,$/;"	t
snd_mixer_selem_channel_id_t	alsa/include/alsa/mixer.h	/^} snd_mixer_selem_channel_id_t;$/;"	t	typeref:enum:_snd_mixer_selem_channel_id
snd_mixer_selem_id_alloca	alsa/include/alsa/mixer.h	299;"	d
snd_mixer_selem_id_t	alsa/include/alsa/mixer.h	/^typedef struct _snd_mixer_selem_id snd_mixer_selem_id_t;$/;"	t	typeref:struct:_snd_mixer_selem_id
snd_mixer_selem_regopt	alsa/include/alsa/mixer.h	/^struct snd_mixer_selem_regopt {$/;"	s
snd_mixer_selem_regopt_abstract	alsa/include/alsa/mixer.h	/^enum snd_mixer_selem_regopt_abstract {$/;"	g
snd_mixer_t	alsa/include/alsa/mixer.h	/^typedef struct _snd_mixer snd_mixer_t;$/;"	t	typeref:struct:_snd_mixer
snd_output_t	alsa/include/alsa/output.h	/^typedef struct _snd_output snd_output_t;$/;"	t	typeref:struct:_snd_output
snd_output_type_t	alsa/include/alsa/output.h	/^} snd_output_type_t;$/;"	t	typeref:enum:_snd_output_type
snd_pcm_abort	alsa/include/alsa/pcm.h	/^static __inline__ int snd_pcm_abort(snd_pcm_t *pcm) { return snd_pcm_nonblock(pcm, 2); }$/;"	f
snd_pcm_access_mask_alloca	alsa/include/alsa/pcm.h	919;"	d
snd_pcm_access_mask_t	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm_access_mask snd_pcm_access_mask_t;$/;"	t	typeref:struct:_snd_pcm_access_mask
snd_pcm_access_t	alsa/include/alsa/pcm.h	/^} snd_pcm_access_t;$/;"	t	typeref:enum:_snd_pcm_access
snd_pcm_audio_tstamp_config_t	alsa/include/alsa/pcm.h	/^} snd_pcm_audio_tstamp_config_t;$/;"	t	typeref:struct:_snd_pcm_audio_tstamp_config
snd_pcm_audio_tstamp_report_t	alsa/include/alsa/pcm.h	/^} snd_pcm_audio_tstamp_report_t;$/;"	t	typeref:struct:_snd_pcm_audio_tstamp_report
snd_pcm_channel_area_t	alsa/include/alsa/pcm.h	/^} snd_pcm_channel_area_t;$/;"	t	typeref:struct:_snd_pcm_channel_area
snd_pcm_chmap	alsa/include/alsa/pcm.h	/^typedef struct snd_pcm_chmap {$/;"	s
snd_pcm_chmap_position	alsa/include/alsa/pcm.h	/^enum snd_pcm_chmap_position {$/;"	g
snd_pcm_chmap_query	alsa/include/alsa/pcm.h	/^typedef struct snd_pcm_chmap_query {$/;"	s
snd_pcm_chmap_query_t	alsa/include/alsa/pcm.h	/^} snd_pcm_chmap_query_t;$/;"	t	typeref:struct:snd_pcm_chmap_query
snd_pcm_chmap_t	alsa/include/alsa/pcm.h	/^} snd_pcm_chmap_t;$/;"	t	typeref:struct:snd_pcm_chmap
snd_pcm_chmap_type	alsa/include/alsa/pcm.h	/^enum snd_pcm_chmap_type {$/;"	g
snd_pcm_class_t	alsa/include/alsa/pcm.h	/^} snd_pcm_class_t;$/;"	t	typeref:enum:_snd_pcm_class
snd_pcm_extplug	alsa/include/alsa/pcm_extplug.h	/^struct snd_pcm_extplug {$/;"	s
snd_pcm_extplug_callback	alsa/include/alsa/pcm_extplug.h	/^struct snd_pcm_extplug_callback {$/;"	s
snd_pcm_extplug_callback_t	alsa/include/alsa/pcm_extplug.h	/^typedef snd_pcm_extplug_callback snd_pcm_extplug_callback_t;$/;"	t
snd_pcm_extplug_callback_t	alsa/include/alsa/pcm_extplug.h	/^typedef struct snd_pcm_extplug_callback snd_pcm_extplug_callback_t;$/;"	t	typeref:struct:snd_pcm_extplug_callback
snd_pcm_extplug_set_param	alsa/include/alsa/pcm_extplug.h	/^static __inline__ int snd_pcm_extplug_set_param(snd_pcm_extplug_t *extplug, int type, unsigned int val)$/;"	f
snd_pcm_extplug_set_slave_param	alsa/include/alsa/pcm_extplug.h	/^static __inline__ int snd_pcm_extplug_set_slave_param(snd_pcm_extplug_t *extplug, int type, unsigned int val)$/;"	f
snd_pcm_extplug_t	alsa/include/alsa/pcm_extplug.h	/^typedef snd_pcm_extplug snd_pcm_extplug_t;$/;"	t
snd_pcm_extplug_t	alsa/include/alsa/pcm_extplug.h	/^typedef struct snd_pcm_extplug snd_pcm_extplug_t;$/;"	t	typeref:struct:snd_pcm_extplug
snd_pcm_format_mask_alloca	alsa/include/alsa/pcm.h	944;"	d
snd_pcm_format_mask_t	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm_format_mask snd_pcm_format_mask_t;$/;"	t	typeref:struct:_snd_pcm_format_mask
snd_pcm_format_t	alsa/include/alsa/pcm.h	/^} snd_pcm_format_t;$/;"	t	typeref:enum:_snd_pcm_format
snd_pcm_hook_func_t	alsa/include/alsa/pcm.h	/^typedef int (*snd_pcm_hook_func_t)(snd_pcm_hook_t *hook);$/;"	t
snd_pcm_hook_t	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm_hook snd_pcm_hook_t;$/;"	t	typeref:struct:_snd_pcm_hook
snd_pcm_hook_type_t	alsa/include/alsa/pcm.h	/^} snd_pcm_hook_type_t;$/;"	t	typeref:enum:_snd_pcm_hook_type
snd_pcm_hw_params_alloca	alsa/include/alsa/pcm.h	730;"	d
snd_pcm_hw_params_t	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm_hw_params snd_pcm_hw_params_t;$/;"	t	typeref:struct:_snd_pcm_hw_params
snd_pcm_info_alloca	alsa/include/alsa/pcm.h	648;"	d
snd_pcm_info_t	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm_info snd_pcm_info_t;$/;"	t	typeref:struct:_snd_pcm_info
snd_pcm_ioplug	alsa/include/alsa/pcm_ioplug.h	/^struct snd_pcm_ioplug {$/;"	s
snd_pcm_ioplug_callback	alsa/include/alsa/pcm_ioplug.h	/^struct snd_pcm_ioplug_callback {$/;"	s
snd_pcm_ioplug_callback_t	alsa/include/alsa/pcm_ioplug.h	/^typedef snd_pcm_ioplug_callback snd_pcm_ioplug_callback_t;$/;"	t
snd_pcm_ioplug_callback_t	alsa/include/alsa/pcm_ioplug.h	/^typedef struct snd_pcm_ioplug_callback snd_pcm_ioplug_callback_t;$/;"	t	typeref:struct:snd_pcm_ioplug_callback
snd_pcm_ioplug_t	alsa/include/alsa/pcm_ioplug.h	/^typedef snd_pcm_ioplug snd_pcm_ioplug_t;$/;"	t
snd_pcm_ioplug_t	alsa/include/alsa/pcm_ioplug.h	/^typedef struct snd_pcm_ioplug snd_pcm_ioplug_t;$/;"	t	typeref:struct:snd_pcm_ioplug
snd_pcm_pack_audio_tstamp_config	alsa/include/alsa/pcm.h	/^static inline void snd_pcm_pack_audio_tstamp_config(unsigned int *data,$/;"	f
snd_pcm_rate_info	alsa/include/alsa/pcm_rate.h	/^typedef struct snd_pcm_rate_info {$/;"	s
snd_pcm_rate_info_t	alsa/include/alsa/pcm_rate.h	/^} snd_pcm_rate_info_t;$/;"	t	typeref:struct:snd_pcm_rate_info
snd_pcm_rate_old_ops	alsa/include/alsa/pcm_rate.h	/^typedef struct snd_pcm_rate_old_ops {$/;"	s
snd_pcm_rate_old_ops_t	alsa/include/alsa/pcm_rate.h	/^} snd_pcm_rate_old_ops_t;$/;"	t	typeref:struct:snd_pcm_rate_old_ops
snd_pcm_rate_open_func_t	alsa/include/alsa/pcm_rate.h	/^typedef int (*snd_pcm_rate_open_func_t)(unsigned int version, void **objp,$/;"	t
snd_pcm_rate_ops	alsa/include/alsa/pcm_rate.h	/^typedef struct snd_pcm_rate_ops {$/;"	s
snd_pcm_rate_ops_t	alsa/include/alsa/pcm_rate.h	/^} snd_pcm_rate_ops_t;$/;"	t	typeref:struct:snd_pcm_rate_ops
snd_pcm_rate_side_info	alsa/include/alsa/pcm_rate.h	/^typedef struct snd_pcm_rate_side_info {$/;"	s
snd_pcm_rate_side_info_t	alsa/include/alsa/pcm_rate.h	/^} snd_pcm_rate_side_info_t;$/;"	t	typeref:struct:snd_pcm_rate_side_info
snd_pcm_route_ttable_entry_t	alsa/include/alsa/pcm_plugin.h	/^typedef float snd_pcm_route_ttable_entry_t;$/;"	t
snd_pcm_route_ttable_entry_t	alsa/include/alsa/pcm_plugin.h	/^typedef int snd_pcm_route_ttable_entry_t;$/;"	t
snd_pcm_scope_ops_t	alsa/include/alsa/pcm.h	/^} snd_pcm_scope_ops_t;$/;"	t	typeref:struct:_snd_pcm_scope_ops
snd_pcm_scope_t	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm_scope snd_pcm_scope_t;$/;"	t	typeref:struct:_snd_pcm_scope
snd_pcm_sframes_t	alsa/include/alsa/pcm.h	/^typedef long snd_pcm_sframes_t;$/;"	t
snd_pcm_start_t	alsa/include/alsa/pcm.h	/^} snd_pcm_start_t;$/;"	t	typeref:enum:_snd_pcm_start
snd_pcm_state_t	alsa/include/alsa/pcm.h	/^} snd_pcm_state_t;$/;"	t	typeref:enum:_snd_pcm_state
snd_pcm_status_alloca	alsa/include/alsa/pcm.h	994;"	d
snd_pcm_status_t	alsa/include/alsa/pcm.h	/^ typedef struct _snd_pcm_status snd_pcm_status_t;$/;"	t	typeref:struct:_snd_pcm_status
snd_pcm_stream_t	alsa/include/alsa/pcm.h	/^} snd_pcm_stream_t;$/;"	t	typeref:enum:_snd_pcm_stream
snd_pcm_subclass_t	alsa/include/alsa/pcm.h	/^} snd_pcm_subclass_t;$/;"	t	typeref:enum:_snd_pcm_subclass
snd_pcm_subformat_mask_alloca	alsa/include/alsa/pcm.h	969;"	d
snd_pcm_subformat_mask_t	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm_subformat_mask snd_pcm_subformat_mask_t;$/;"	t	typeref:struct:_snd_pcm_subformat_mask
snd_pcm_subformat_t	alsa/include/alsa/pcm.h	/^} snd_pcm_subformat_t;$/;"	t	typeref:enum:_snd_pcm_subformat
snd_pcm_sw_params_alloca	alsa/include/alsa/pcm.h	871;"	d
snd_pcm_sw_params_t	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm_sw_params snd_pcm_sw_params_t;$/;"	t	typeref:struct:_snd_pcm_sw_params
snd_pcm_sync_id_t	alsa/include/alsa/pcm.h	/^} snd_pcm_sync_id_t;$/;"	t	typeref:union:_snd_pcm_sync_id
snd_pcm_t	alsa/include/alsa/pcm.h	/^typedef struct _snd_pcm snd_pcm_t;$/;"	t	typeref:struct:_snd_pcm
snd_pcm_tstamp_t	alsa/include/alsa/pcm.h	/^} snd_pcm_tstamp_t;$/;"	t	typeref:enum:_snd_pcm_tstamp
snd_pcm_tstamp_type_t	alsa/include/alsa/pcm.h	/^} snd_pcm_tstamp_type_t;$/;"	t	typeref:enum:_snd_pcm_tstamp_type
snd_pcm_type_t	alsa/include/alsa/pcm.h	/^typedef enum _snd_pcm_type snd_pcm_type_t;$/;"	t	typeref:enum:_snd_pcm_type
snd_pcm_uframes_t	alsa/include/alsa/pcm.h	/^typedef unsigned long snd_pcm_uframes_t;$/;"	t
snd_pcm_unpack_audio_tstamp_report	alsa/include/alsa/pcm.h	/^static inline void snd_pcm_unpack_audio_tstamp_report(unsigned int data, unsigned int accuracy,$/;"	f
snd_pcm_xrun_t	alsa/include/alsa/pcm.h	/^} snd_pcm_xrun_t;$/;"	t	typeref:enum:_snd_pcm_xrun
snd_rawmidi_info_alloca	alsa/include/alsa/rawmidi.h	96;"	d
snd_rawmidi_info_t	alsa/include/alsa/rawmidi.h	/^typedef struct _snd_rawmidi_info snd_rawmidi_info_t;$/;"	t	typeref:struct:_snd_rawmidi_info
snd_rawmidi_params_alloca	alsa/include/alsa/rawmidi.h	119;"	d
snd_rawmidi_params_t	alsa/include/alsa/rawmidi.h	/^typedef struct _snd_rawmidi_params snd_rawmidi_params_t;$/;"	t	typeref:struct:_snd_rawmidi_params
snd_rawmidi_status_alloca	alsa/include/alsa/rawmidi.h	136;"	d
snd_rawmidi_status_t	alsa/include/alsa/rawmidi.h	/^typedef struct _snd_rawmidi_status snd_rawmidi_status_t;$/;"	t	typeref:struct:_snd_rawmidi_status
snd_rawmidi_stream_t	alsa/include/alsa/rawmidi.h	/^} snd_rawmidi_stream_t;$/;"	t	typeref:enum:_snd_rawmidi_stream
snd_rawmidi_t	alsa/include/alsa/rawmidi.h	/^typedef struct _snd_rawmidi snd_rawmidi_t;$/;"	t	typeref:struct:_snd_rawmidi
snd_rawmidi_type_t	alsa/include/alsa/rawmidi.h	/^} snd_rawmidi_type_t;$/;"	t	typeref:enum:_snd_rawmidi_type
snd_sb_csp_info	alsa/include/alsa/sound/sb16_csp.h	/^typedef struct snd_sb_csp_info {$/;"	s
snd_sb_csp_info_t	alsa/include/alsa/sound/sb16_csp.h	/^} snd_sb_csp_info_t;$/;"	t	typeref:struct:snd_sb_csp_info
snd_sb_csp_mc_header	alsa/include/alsa/sound/sb16_csp.h	/^typedef struct snd_sb_csp_mc_header {$/;"	s
snd_sb_csp_mc_header_t	alsa/include/alsa/sound/sb16_csp.h	/^} snd_sb_csp_mc_header_t;$/;"	t	typeref:struct:snd_sb_csp_mc_header
snd_sb_csp_microcode	alsa/include/alsa/sound/sb16_csp.h	/^typedef struct snd_sb_csp_microcode {$/;"	s
snd_sb_csp_microcode_t	alsa/include/alsa/sound/sb16_csp.h	/^} snd_sb_csp_microcode_t;$/;"	t	typeref:struct:snd_sb_csp_microcode
snd_sb_csp_start	alsa/include/alsa/sound/sb16_csp.h	/^typedef struct snd_sb_csp_start {$/;"	s
snd_sb_csp_start_t	alsa/include/alsa/sound/sb16_csp.h	/^} snd_sb_csp_start_t;$/;"	t	typeref:struct:snd_sb_csp_start
snd_sctl_t	alsa/include/alsa/control.h	/^typedef struct _snd_sctl snd_sctl_t;$/;"	t	typeref:struct:_snd_sctl
snd_seq_addr	alsa/include/alsa/seq_event.h	/^typedef struct snd_seq_addr {$/;"	s
snd_seq_addr_t	alsa/include/alsa/seq_event.h	/^} snd_seq_addr_t;$/;"	t	typeref:struct:snd_seq_addr
snd_seq_change_queue_tempo	alsa/include/alsa/seqmid.h	324;"	d
snd_seq_client_info_alloca	alsa/include/alsa/seq.h	135;"	d
snd_seq_client_info_t	alsa/include/alsa/seq.h	/^typedef struct _snd_seq_client_info snd_seq_client_info_t;$/;"	t	typeref:struct:_snd_seq_client_info
snd_seq_client_pool_alloca	alsa/include/alsa/seq.h	176;"	d
snd_seq_client_pool_t	alsa/include/alsa/seq.h	/^typedef struct _snd_seq_client_pool snd_seq_client_pool_t;$/;"	t	typeref:struct:_snd_seq_client_pool
snd_seq_client_type	alsa/include/alsa/seq.h	/^typedef enum snd_seq_client_type {$/;"	g
snd_seq_client_type_t	alsa/include/alsa/seq.h	/^} snd_seq_client_type_t;$/;"	t	typeref:enum:snd_seq_client_type
snd_seq_connect	alsa/include/alsa/seq_event.h	/^typedef struct snd_seq_connect {$/;"	s
snd_seq_connect_t	alsa/include/alsa/seq_event.h	/^} snd_seq_connect_t;$/;"	t	typeref:struct:snd_seq_connect
snd_seq_continue_queue	alsa/include/alsa/seqmid.h	314;"	d
snd_seq_ev_clear	alsa/include/alsa/seqmid.h	48;"	d
snd_seq_ev_ctrl	alsa/include/alsa/seq_event.h	/^typedef struct snd_seq_ev_ctrl {$/;"	s
snd_seq_ev_ctrl_t	alsa/include/alsa/seq_event.h	/^} snd_seq_ev_ctrl_t;$/;"	t	typeref:struct:snd_seq_ev_ctrl
snd_seq_ev_ext	alsa/include/alsa/seq_event.h	/^struct snd_seq_ev_ext {$/;"	s
snd_seq_ev_ext_t	alsa/include/alsa/seq_event.h	/^typedef snd_seq_ev_ext snd_seq_ev_ext_t;$/;"	t
snd_seq_ev_ext_t	alsa/include/alsa/seq_event.h	/^typedef struct snd_seq_ev_ext snd_seq_ev_ext_t;$/;"	t	typeref:struct:snd_seq_ev_ext
snd_seq_ev_is_abstime	alsa/include/alsa/seq.h	722;"	d
snd_seq_ev_is_channel_type	alsa/include/alsa/seq.h	654;"	d
snd_seq_ev_is_control_type	alsa/include/alsa/seq.h	651;"	d
snd_seq_ev_is_direct	alsa/include/alsa/seq.h	729;"	d
snd_seq_ev_is_fixed	alsa/include/alsa/seq.h	699;"	d
snd_seq_ev_is_fixed_type	alsa/include/alsa/seq.h	676;"	d
snd_seq_ev_is_instr_type	alsa/include/alsa/seq.h	673;"	d
snd_seq_ev_is_message_type	alsa/include/alsa/seq.h	661;"	d
snd_seq_ev_is_note_type	alsa/include/alsa/seq.h	648;"	d
snd_seq_ev_is_prior	alsa/include/alsa/seq.h	692;"	d
snd_seq_ev_is_queue_type	alsa/include/alsa/seq.h	658;"	d
snd_seq_ev_is_real	alsa/include/alsa/seq.h	715;"	d
snd_seq_ev_is_reltime	alsa/include/alsa/seq.h	725;"	d
snd_seq_ev_is_reserved	alsa/include/alsa/seq.h	685;"	d
snd_seq_ev_is_result_type	alsa/include/alsa/seq.h	645;"	d
snd_seq_ev_is_sample_type	alsa/include/alsa/seq.h	667;"	d
snd_seq_ev_is_subscribe_type	alsa/include/alsa/seq.h	664;"	d
snd_seq_ev_is_tick	alsa/include/alsa/seq.h	712;"	d
snd_seq_ev_is_user_type	alsa/include/alsa/seq.h	670;"	d
snd_seq_ev_is_variable	alsa/include/alsa/seq.h	702;"	d
snd_seq_ev_is_variable_type	alsa/include/alsa/seq.h	679;"	d
snd_seq_ev_is_varusr	alsa/include/alsa/seq.h	705;"	d
snd_seq_ev_is_varusr_type	alsa/include/alsa/seq.h	682;"	d
snd_seq_ev_length_type	alsa/include/alsa/seq.h	696;"	d
snd_seq_ev_note	alsa/include/alsa/seq_event.h	/^typedef struct snd_seq_ev_note {$/;"	s
snd_seq_ev_note_t	alsa/include/alsa/seq_event.h	/^} snd_seq_ev_note_t;$/;"	t	typeref:struct:snd_seq_ev_note
snd_seq_ev_queue_control	alsa/include/alsa/seq_event.h	/^typedef struct snd_seq_ev_queue_control {$/;"	s
snd_seq_ev_queue_control_t	alsa/include/alsa/seq_event.h	/^} snd_seq_ev_queue_control_t;$/;"	t	typeref:struct:snd_seq_ev_queue_control
snd_seq_ev_raw32	alsa/include/alsa/seq_event.h	/^typedef struct snd_seq_ev_raw32 {$/;"	s
snd_seq_ev_raw32_t	alsa/include/alsa/seq_event.h	/^} snd_seq_ev_raw32_t;$/;"	t	typeref:struct:snd_seq_ev_raw32
snd_seq_ev_raw8	alsa/include/alsa/seq_event.h	/^typedef struct snd_seq_ev_raw8 {$/;"	s
snd_seq_ev_raw8_t	alsa/include/alsa/seq_event.h	/^} snd_seq_ev_raw8_t;$/;"	t	typeref:struct:snd_seq_ev_raw8
snd_seq_ev_schedule_real	alsa/include/alsa/seqmid.h	151;"	d
snd_seq_ev_schedule_tick	alsa/include/alsa/seqmid.h	132;"	d
snd_seq_ev_set_broadcast	alsa/include/alsa/seqmid.h	94;"	d
snd_seq_ev_set_chanpress	alsa/include/alsa/seqmid.h	465;"	d
snd_seq_ev_set_controller	alsa/include/alsa/seqmid.h	428;"	d
snd_seq_ev_set_dest	alsa/include/alsa/seqmid.h	71;"	d
snd_seq_ev_set_direct	alsa/include/alsa/seqmid.h	117;"	d
snd_seq_ev_set_fixed	alsa/include/alsa/seqmid.h	175;"	d
snd_seq_ev_set_keypress	alsa/include/alsa/seqmid.h	414;"	d
snd_seq_ev_set_note	alsa/include/alsa/seqmid.h	371;"	d
snd_seq_ev_set_noteoff	alsa/include/alsa/seqmid.h	400;"	d
snd_seq_ev_set_noteon	alsa/include/alsa/seqmid.h	386;"	d
snd_seq_ev_set_pgmchange	alsa/include/alsa/seqmid.h	441;"	d
snd_seq_ev_set_pitchbend	alsa/include/alsa/seqmid.h	453;"	d
snd_seq_ev_set_priority	alsa/include/alsa/seqmid.h	163;"	d
snd_seq_ev_set_queue_continue	alsa/include/alsa/seqmid.h	251;"	d
snd_seq_ev_set_queue_control	alsa/include/alsa/seqmid.h	218;"	d
snd_seq_ev_set_queue_pos_real	alsa/include/alsa/seqmid.h	269;"	d
snd_seq_ev_set_queue_pos_tick	alsa/include/alsa/seqmid.h	281;"	d
snd_seq_ev_set_queue_start	alsa/include/alsa/seqmid.h	231;"	d
snd_seq_ev_set_queue_stop	alsa/include/alsa/seqmid.h	241;"	d
snd_seq_ev_set_queue_tempo	alsa/include/alsa/seqmid.h	260;"	d
snd_seq_ev_set_source	alsa/include/alsa/seqmid.h	105;"	d
snd_seq_ev_set_subs	alsa/include/alsa/seqmid.h	82;"	d
snd_seq_ev_set_sysex	alsa/include/alsa/seqmid.h	479;"	d
snd_seq_ev_set_tag	alsa/include/alsa/seqmid.h	58;"	d
snd_seq_ev_set_variable	alsa/include/alsa/seqmid.h	189;"	d
snd_seq_ev_set_varusr	alsa/include/alsa/seqmid.h	205;"	d
snd_seq_ev_timemode_type	alsa/include/alsa/seq.h	719;"	d
snd_seq_ev_timestamp_type	alsa/include/alsa/seq.h	709;"	d
snd_seq_event	alsa/include/alsa/seq_event.h	/^typedef struct snd_seq_event {$/;"	s
snd_seq_event_t	alsa/include/alsa/seq_event.h	/^} snd_seq_event_t;$/;"	t	typeref:struct:snd_seq_event
snd_seq_event_type	alsa/include/alsa/seq_event.h	/^enum snd_seq_event_type {$/;"	g
snd_seq_event_type_t	alsa/include/alsa/seq_event.h	/^typedef unsigned char snd_seq_event_type_t;$/;"	t
snd_seq_port_info_alloca	alsa/include/alsa/seq.h	265;"	d
snd_seq_port_info_t	alsa/include/alsa/seq.h	/^typedef struct _snd_seq_port_info snd_seq_port_info_t;$/;"	t	typeref:struct:_snd_seq_port_info
snd_seq_port_subscribe_alloca	alsa/include/alsa/seq.h	323;"	d
snd_seq_port_subscribe_t	alsa/include/alsa/seq.h	/^typedef struct _snd_seq_port_subscribe snd_seq_port_subscribe_t;$/;"	t	typeref:struct:_snd_seq_port_subscribe
snd_seq_query_subs_type_t	alsa/include/alsa/seq.h	/^} snd_seq_query_subs_type_t;$/;"	t	typeref:enum:__anon17
snd_seq_query_subscribe_alloca	alsa/include/alsa/seq.h	361;"	d
snd_seq_query_subscribe_t	alsa/include/alsa/seq.h	/^typedef struct _snd_seq_query_subscribe snd_seq_query_subscribe_t;$/;"	t	typeref:struct:_snd_seq_query_subscribe
snd_seq_queue_info_alloca	alsa/include/alsa/seq.h	411;"	d
snd_seq_queue_info_t	alsa/include/alsa/seq.h	/^typedef struct _snd_seq_queue_info snd_seq_queue_info_t;$/;"	t	typeref:struct:_snd_seq_queue_info
snd_seq_queue_skew	alsa/include/alsa/seq_event.h	/^typedef struct snd_seq_queue_skew {$/;"	s
snd_seq_queue_skew_t	alsa/include/alsa/seq_event.h	/^} snd_seq_queue_skew_t;$/;"	t	typeref:struct:snd_seq_queue_skew
snd_seq_queue_status_alloca	alsa/include/alsa/seq.h	443;"	d
snd_seq_queue_status_t	alsa/include/alsa/seq.h	/^typedef struct _snd_seq_queue_status snd_seq_queue_status_t;$/;"	t	typeref:struct:_snd_seq_queue_status
snd_seq_queue_tempo_alloca	alsa/include/alsa/seq.h	461;"	d
snd_seq_queue_tempo_t	alsa/include/alsa/seq.h	/^typedef struct _snd_seq_queue_tempo snd_seq_queue_tempo_t;$/;"	t	typeref:struct:_snd_seq_queue_tempo
snd_seq_queue_timer_alloca	alsa/include/alsa/seq.h	492;"	d
snd_seq_queue_timer_t	alsa/include/alsa/seq.h	/^typedef struct _snd_seq_queue_timer snd_seq_queue_timer_t;$/;"	t	typeref:struct:_snd_seq_queue_timer
snd_seq_queue_timer_type_t	alsa/include/alsa/seq.h	/^} snd_seq_queue_timer_type_t;$/;"	t	typeref:enum:__anon18
snd_seq_real_time	alsa/include/alsa/seq_event.h	/^typedef struct snd_seq_real_time {$/;"	s
snd_seq_real_time_t	alsa/include/alsa/seq_event.h	/^} snd_seq_real_time_t;$/;"	t	typeref:struct:snd_seq_real_time
snd_seq_remove_events_alloca	alsa/include/alsa/seq.h	551;"	d
snd_seq_remove_events_t	alsa/include/alsa/seq.h	/^typedef struct _snd_seq_remove_events snd_seq_remove_events_t;$/;"	t	typeref:struct:_snd_seq_remove_events
snd_seq_result	alsa/include/alsa/seq_event.h	/^typedef struct snd_seq_result {$/;"	s
snd_seq_result_t	alsa/include/alsa/seq_event.h	/^} snd_seq_result_t;$/;"	t	typeref:struct:snd_seq_result
snd_seq_start_queue	alsa/include/alsa/seqmid.h	296;"	d
snd_seq_stop_queue	alsa/include/alsa/seqmid.h	305;"	d
snd_seq_system_info_alloca	alsa/include/alsa/seq.h	99;"	d
snd_seq_system_info_t	alsa/include/alsa/seq.h	/^typedef struct _snd_seq_system_info snd_seq_system_info_t;$/;"	t	typeref:struct:_snd_seq_system_info
snd_seq_t	alsa/include/alsa/seq.h	/^typedef struct _snd_seq snd_seq_t;$/;"	t	typeref:struct:_snd_seq
snd_seq_tick_time_t	alsa/include/alsa/seq_event.h	/^typedef unsigned int snd_seq_tick_time_t;$/;"	t
snd_seq_timestamp	alsa/include/alsa/seq_event.h	/^typedef union snd_seq_timestamp {$/;"	u
snd_seq_timestamp_t	alsa/include/alsa/seq_event.h	/^} snd_seq_timestamp_t;$/;"	t	typeref:union:snd_seq_timestamp
snd_seq_type_check	alsa/include/alsa/seq.h	642;"	d
snd_seq_type_t	alsa/include/alsa/seq.h	/^} snd_seq_type_t;$/;"	t	typeref:enum:_snd_seq_type
snd_soc_tplg_bytes_control	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_bytes_control {$/;"	s
snd_soc_tplg_channel	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_channel {$/;"	s
snd_soc_tplg_ctl_hdr	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_ctl_hdr {$/;"	s
snd_soc_tplg_ctl_tlv	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_ctl_tlv {$/;"	s
snd_soc_tplg_dapm_graph_elem	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_dapm_graph_elem {$/;"	s
snd_soc_tplg_dapm_widget	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_dapm_widget {$/;"	s
snd_soc_tplg_enum_control	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_enum_control {$/;"	s
snd_soc_tplg_hdr	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_hdr {$/;"	s
snd_soc_tplg_io_ops	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_io_ops {$/;"	s
snd_soc_tplg_link_config	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_link_config {$/;"	s
snd_soc_tplg_manifest	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_manifest {$/;"	s
snd_soc_tplg_mixer_control	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_mixer_control {$/;"	s
snd_soc_tplg_pcm	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_pcm {$/;"	s
snd_soc_tplg_private	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_private {$/;"	s
snd_soc_tplg_stream	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_stream {$/;"	s
snd_soc_tplg_stream_caps	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_stream_caps {$/;"	s
snd_soc_tplg_tlv_dbscale	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_tlv_dbscale {$/;"	s
snd_soc_tplg_vendor_array	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_vendor_array {$/;"	s
snd_soc_tplg_vendor_string_elem	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_vendor_string_elem {$/;"	s
snd_soc_tplg_vendor_uuid_elem	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_vendor_uuid_elem {$/;"	s
snd_soc_tplg_vendor_value_elem	alsa/include/alsa/sound/asoc.h	/^struct snd_soc_tplg_vendor_value_elem {$/;"	s
snd_spcm_duplex_type_t	alsa/include/alsa/pcm.h	/^} snd_spcm_duplex_type_t;$/;"	t	typeref:enum:_snd_spcm_duplex_type
snd_spcm_latency_t	alsa/include/alsa/pcm.h	/^} snd_spcm_latency_t;$/;"	t	typeref:enum:_snd_spcm_latency
snd_spcm_xrun_type_t	alsa/include/alsa/pcm.h	/^} snd_spcm_xrun_type_t;$/;"	t	typeref:enum:_snd_spcm_xrun_type
snd_timer_class_t	alsa/include/alsa/timer.h	/^} snd_timer_class_t;$/;"	t	typeref:enum:_snd_timer_class
snd_timer_event_t	alsa/include/alsa/timer.h	/^} snd_timer_event_t;$/;"	t	typeref:enum:_snd_timer_event
snd_timer_ginfo_alloca	alsa/include/alsa/timer.h	187;"	d
snd_timer_ginfo_t	alsa/include/alsa/timer.h	/^typedef struct _snd_timer_ginfo snd_timer_ginfo_t;$/;"	t	typeref:struct:_snd_timer_ginfo
snd_timer_gparams_t	alsa/include/alsa/timer.h	/^typedef struct _snd_timer_gparams snd_timer_gparams_t;$/;"	t	typeref:struct:_snd_timer_gparams
snd_timer_gstatus_t	alsa/include/alsa/timer.h	/^typedef struct _snd_timer_gstatus snd_timer_gstatus_t;$/;"	t	typeref:struct:_snd_timer_gstatus
snd_timer_id_alloca	alsa/include/alsa/timer.h	169;"	d
snd_timer_id_t	alsa/include/alsa/timer.h	/^typedef struct _snd_timer_id snd_timer_id_t;$/;"	t	typeref:struct:_snd_timer_id
snd_timer_info_alloca	alsa/include/alsa/timer.h	205;"	d
snd_timer_info_t	alsa/include/alsa/timer.h	/^typedef struct _snd_timer_info snd_timer_info_t;$/;"	t	typeref:struct:_snd_timer_info
snd_timer_params_alloca	alsa/include/alsa/timer.h	218;"	d
snd_timer_params_t	alsa/include/alsa/timer.h	/^typedef struct _snd_timer_params snd_timer_params_t;$/;"	t	typeref:struct:_snd_timer_params
snd_timer_query_t	alsa/include/alsa/timer.h	/^typedef struct _snd_timer_query snd_timer_query_t;$/;"	t	typeref:struct:_snd_timer_query
snd_timer_read_t	alsa/include/alsa/timer.h	/^} snd_timer_read_t;$/;"	t	typeref:struct:_snd_timer_read
snd_timer_slave_class_t	alsa/include/alsa/timer.h	/^} snd_timer_slave_class_t;$/;"	t	typeref:enum:_snd_timer_slave_class
snd_timer_status_alloca	alsa/include/alsa/timer.h	238;"	d
snd_timer_status_t	alsa/include/alsa/timer.h	/^typedef struct _snd_timer_status snd_timer_status_t;$/;"	t	typeref:struct:_snd_timer_status
snd_timer_t	alsa/include/alsa/timer.h	/^typedef struct _snd_timer snd_timer_t;$/;"	t	typeref:struct:_snd_timer
snd_timer_tread_t	alsa/include/alsa/timer.h	/^} snd_timer_tread_t;$/;"	t	typeref:struct:_snd_timer_tread
snd_timer_type_t	alsa/include/alsa/timer.h	/^} snd_timer_type_t;$/;"	t	typeref:enum:_snd_timer_type
snd_timestamp_t	alsa/include/alsa/global.h	/^typedef struct timeval snd_timestamp_t;$/;"	t	typeref:struct:timeval
snd_tplg_bytes_template	alsa/include/alsa/topology.h	/^struct snd_tplg_bytes_template {$/;"	s
snd_tplg_channel_elem	alsa/include/alsa/topology.h	/^struct snd_tplg_channel_elem {$/;"	s
snd_tplg_channel_map_template	alsa/include/alsa/topology.h	/^struct snd_tplg_channel_map_template {$/;"	s
snd_tplg_ctl_template	alsa/include/alsa/topology.h	/^struct snd_tplg_ctl_template {$/;"	s
snd_tplg_enum_template	alsa/include/alsa/topology.h	/^struct snd_tplg_enum_template {$/;"	s
snd_tplg_graph_elem	alsa/include/alsa/topology.h	/^struct snd_tplg_graph_elem {$/;"	s
snd_tplg_graph_template	alsa/include/alsa/topology.h	/^struct snd_tplg_graph_template {$/;"	s
snd_tplg_io_ops_template	alsa/include/alsa/topology.h	/^struct snd_tplg_io_ops_template {$/;"	s
snd_tplg_link_template	alsa/include/alsa/topology.h	/^struct snd_tplg_link_template {$/;"	s
snd_tplg_mixer_template	alsa/include/alsa/topology.h	/^struct snd_tplg_mixer_template {$/;"	s
snd_tplg_obj_template	alsa/include/alsa/topology.h	/^typedef struct snd_tplg_obj_template {$/;"	s
snd_tplg_obj_template_t	alsa/include/alsa/topology.h	/^} snd_tplg_obj_template_t;$/;"	t	typeref:struct:snd_tplg_obj_template
snd_tplg_pcm_template	alsa/include/alsa/topology.h	/^struct snd_tplg_pcm_template {$/;"	s
snd_tplg_pdata_template	alsa/include/alsa/topology.h	/^struct snd_tplg_pdata_template {$/;"	s
snd_tplg_stream_caps_template	alsa/include/alsa/topology.h	/^struct snd_tplg_stream_caps_template {$/;"	s
snd_tplg_stream_template	alsa/include/alsa/topology.h	/^struct snd_tplg_stream_template {$/;"	s
snd_tplg_t	alsa/include/alsa/topology.h	/^typedef struct snd_tplg snd_tplg_t;$/;"	t	typeref:struct:snd_tplg
snd_tplg_tlv_dbscale_template	alsa/include/alsa/topology.h	/^struct snd_tplg_tlv_dbscale_template {$/;"	s
snd_tplg_tlv_template	alsa/include/alsa/topology.h	/^struct snd_tplg_tlv_template {$/;"	s
snd_tplg_type	alsa/include/alsa/topology.h	/^enum snd_tplg_type {$/;"	g
snd_tplg_widget_template	alsa/include/alsa/topology.h	/^struct snd_tplg_widget_template {$/;"	s
snd_use_case_card_list	alsa/include/alsa/use-case.h	/^static __inline__ int snd_use_case_card_list(const char **list[])$/;"	f
snd_use_case_mgr_t	alsa/include/alsa/use-case.h	/^typedef struct snd_use_case_mgr snd_use_case_mgr_t;$/;"	t	typeref:struct:snd_use_case_mgr
snd_use_case_verb_list	alsa/include/alsa/use-case.h	/^static __inline__ int snd_use_case_verb_list(snd_use_case_mgr_t *uc_mgr,$/;"	f
socket	Simple-WebSocket-Server/client_ws.hpp	/^            std::unique_ptr<socket_type> socket;$/;"	m	class:SimpleWeb::SocketClientBase::Connection
socket	Simple-WebSocket-Server/server_ws.hpp	/^            std::shared_ptr<socket_type> socket;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
source	alsa/include/alsa/seq_event.h	/^	snd_seq_addr_t source;		\/**< source address *\/$/;"	m	struct:snd_seq_event
source	alsa/include/alsa/sound/asoc.h	/^	char source[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];$/;"	m	struct:snd_soc_tplg_dapm_graph_elem
spdif_emphasis	alsa/include/alsa/sound/hdsp.h	/^	unsigned char spdif_emphasis;$/;"	m	struct:_snd_hdsp_config_info
spdif_in	alsa/include/alsa/sound/hdsp.h	/^	unsigned char spdif_in;$/;"	m	struct:_snd_hdsp_config_info
spdif_nonaudio	alsa/include/alsa/sound/hdsp.h	/^	unsigned char spdif_nonaudio;$/;"	m	struct:_snd_hdsp_config_info
spdif_out	alsa/include/alsa/sound/hdsp.h	/^	unsigned char spdif_out;$/;"	m	struct:_snd_hdsp_config_info
spdif_professional	alsa/include/alsa/sound/hdsp.h	/^	unsigned char spdif_professional;$/;"	m	struct:_snd_hdsp_config_info
spdif_sample_rate	alsa/include/alsa/sound/hdsp.h	/^	unsigned int spdif_sample_rate;$/;"	m	struct:_snd_hdsp_config_info
spdif_sync_check	alsa/include/alsa/sound/hdsp.h	/^	unsigned char spdif_sync_check;$/;"	m	struct:_snd_hdsp_config_info
speed	alsa/include/alsa/sound/hdspm.h	/^	uint8_t speed; \/* enum {ss, ds, qs} *\/$/;"	m	struct:hdspm_peak_rms
src	alsa/include/alsa/topology.h	/^	const char *src;	\/*!< source widget name *\/$/;"	m	struct:snd_tplg_graph_elem
ss	alsa/include/alsa/sound/hdspm.h	/^	ss,$/;"	e	enum:hdspm_speed
sscape_bootblock	alsa/include/alsa/sound/sscape_ioctl.h	/^struct sscape_bootblock$/;"	s
sscape_microcode	alsa/include/alsa/sound/sscape_ioctl.h	/^struct sscape_microcode$/;"	s
start	Simple-WebSocket-Server/client_ws.hpp	/^        void start() {$/;"	f	class:SimpleWeb::SocketClientBase
start	Simple-WebSocket-Server/server_ws.hpp	/^        virtual void start() {$/;"	f	class:SimpleWeb::SocketServerBase
start	Simple-WebSocket-Server/server_wss.hpp	/^        void start() {$/;"	f	class:SimpleWeb::SocketServer
start	alsa/include/alsa/pcm.h	/^	void (*start)(snd_pcm_scope_t *scope);$/;"	m	struct:_snd_pcm_scope_ops
start	alsa/include/alsa/pcm_ioplug.h	/^	int (*start)(snd_pcm_ioplug_t *io);$/;"	m	struct:snd_pcm_ioplug_callback
state	alsa/include/alsa/pcm_ioplug.h	/^	snd_pcm_state_t state;		\/**< current PCM state; read-only *\/$/;"	m	struct:snd_pcm_ioplug
state	alsa/include/alsa/sound/sb16_csp.h	/^	unsigned short state;		\/* state bits *\/$/;"	m	struct:snd_sb_csp_info
status	alsa/include/alsa/control.h	/^	unsigned char status[24];	\/**< AES\/IEC958 channel status bits *\/$/;"	m	struct:snd_aes_iec958
status2	alsa/include/alsa/sound/hdspm.h	/^	int status2;$/;"	m	struct:hdspm_peak_rms
std	picojson/picojson.h	/^namespace std {$/;"	n
step	alsa/include/alsa/pcm.h	/^	unsigned int step;$/;"	m	struct:_snd_pcm_channel_area
step	alsa/include/alsa/sound/asoc.h	/^	__le32 step;$/;"	m	struct:snd_soc_tplg_tlv_dbscale
step	alsa/include/alsa/topology.h	/^	int step;			\/*!< dB step size in 0.1dB *\/$/;"	m	struct:snd_tplg_tlv_dbscale_template
stop	Simple-WebSocket-Server/client_ws.hpp	/^        void stop() {$/;"	f	class:SimpleWeb::SocketClientBase
stop	Simple-WebSocket-Server/server_ws.hpp	/^        void stop() {$/;"	f	class:SimpleWeb::SocketServerBase
stop	alsa/include/alsa/pcm.h	/^	void (*stop)(snd_pcm_scope_t *scope);$/;"	m	struct:_snd_pcm_scope_ops
stop	alsa/include/alsa/pcm_ioplug.h	/^	int (*stop)(snd_pcm_ioplug_t *io);$/;"	m	struct:snd_pcm_ioplug_callback
str	Simple-WebSocket-Server/server_ws.hpp	/^            std::string str;$/;"	m	class:SimpleWeb::SocketServerBase::regex_orderable
strand	Simple-WebSocket-Server/client_ws.hpp	/^            boost::asio::strand strand;$/;"	m	class:SimpleWeb::SocketClientBase::Connection
strand	Simple-WebSocket-Server/server_ws.hpp	/^            boost::asio::strand strand;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
stream	alsa/include/alsa/pcm_extplug.h	/^	snd_pcm_stream_t stream;$/;"	m	struct:snd_pcm_extplug
stream	alsa/include/alsa/pcm_ioplug.h	/^	snd_pcm_stream_t stream;	\/**< stream direcion; read-only *\/	$/;"	m	struct:snd_pcm_ioplug
stream	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_stream stream[SND_SOC_TPLG_STREAM_CONFIG_MAX]; \/* for DAI link *\/$/;"	m	struct:snd_soc_tplg_pcm	typeref:struct:snd_soc_tplg_pcm::snd_soc_tplg_stream
stream	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_stream stream[SND_SOC_TPLG_STREAM_CONFIG_MAX]; \/* supported configs playback and captrure *\/$/;"	m	struct:snd_soc_tplg_link_config	typeref:struct:snd_soc_tplg_link_config::snd_soc_tplg_stream
stream	alsa/include/alsa/topology.h	/^	struct snd_tplg_stream_template stream[0]; \/*!< supported configs *\/$/;"	m	struct:snd_tplg_link_template	typeref:struct:snd_tplg_link_template::snd_tplg_stream_template
stream	alsa/include/alsa/topology.h	/^	struct snd_tplg_stream_template stream[0]; \/*!< supported configs *\/$/;"	m	struct:snd_tplg_pcm_template	typeref:struct:snd_tplg_pcm_template::snd_tplg_stream_template
streambuf	Simple-WebSocket-Server/client_ws.hpp	/^            boost::asio::streambuf streambuf;$/;"	m	class:SimpleWeb::SocketClientBase::Message
streambuf	Simple-WebSocket-Server/client_ws.hpp	/^            boost::asio::streambuf streambuf;$/;"	m	class:SimpleWeb::SocketClientBase::SendStream
streambuf	Simple-WebSocket-Server/server_ws.hpp	/^            boost::asio::streambuf streambuf;$/;"	m	class:SimpleWeb::SocketServerBase::Message
streambuf	Simple-WebSocket-Server/server_ws.hpp	/^            boost::asio::streambuf streambuf;$/;"	m	class:SimpleWeb::SocketServerBase::SendStream
string	Simple-WebSocket-Server/client_ws.hpp	/^            std::string string() {$/;"	f	class:SimpleWeb::SocketClientBase::Message
string	Simple-WebSocket-Server/server_ws.hpp	/^            std::string string() {$/;"	f	class:SimpleWeb::SocketServerBase::Message
string	alsa/include/alsa/sound/asoc.h	/^		struct snd_soc_tplg_vendor_string_elem string[0];$/;"	m	union:snd_soc_tplg_vendor_array::__anon8	typeref:struct:snd_soc_tplg_vendor_array::__anon8::snd_soc_tplg_vendor_string_elem
string	alsa/include/alsa/sound/asoc.h	/^	char string[SNDRV_CTL_ELEM_ID_NAME_MAXLEN];$/;"	m	struct:snd_soc_tplg_vendor_string_elem
string_	picojson/picojson.h	/^    std::string *string_;$/;"	m	union:picojson::value::_storage
string_type	picojson/picojson.h	/^  string_type,$/;"	e	enum:picojson::__anon30
subcode	alsa/include/alsa/control.h	/^	unsigned char subcode[147];	\/**< AES\/IEC958 subcode bits *\/$/;"	m	struct:snd_aes_iec958
subdevice	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int subdevice;		\/* subdevice (substream) number *\/$/;"	m	struct:__anon2
subformat	alsa/include/alsa/pcm_extplug.h	/^	snd_pcm_subformat_t subformat;$/;"	m	struct:snd_pcm_extplug
subscribe_events	alsa/include/alsa/control_external.h	/^	void (*subscribe_events)(snd_ctl_ext_t *ext, int subscribe);$/;"	m	struct:snd_ctl_ext_callback
subscribed	alsa/include/alsa/control_external.h	/^	int subscribed;			\/**< events subscribed; read-only *\/$/;"	m	struct:snd_ctl_ext
subseq	alsa/include/alsa/sound/asoc.h	/^	__le32 subseq;		\/* sort within widget type *\/$/;"	m	struct:snd_soc_tplg_dapm_widget
subseq	alsa/include/alsa/topology.h	/^	int subseq;		\/*!< sort within widget type *\/$/;"	m	struct:snd_tplg_widget_template
substream	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int substream;		\/* substream number *\/$/;"	m	struct:__anon6
subtest	picojson/picotest/picotest.c	/^void subtest(const char *name, void (*cb)(void))$/;"	f
sustain	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char sustain;		\/* 4 bits: sustain level *\/$/;"	m	struct:snd_dm_fm_voice
sw_params	alsa/include/alsa/pcm_ioplug.h	/^	int (*sw_params)(snd_pcm_ioplug_t *io, snd_pcm_sw_params_t *params);$/;"	m	struct:snd_pcm_ioplug_callback
swap	picojson/picojson.h	/^inline void value::swap(value &x) throw() {$/;"	f	class:picojson::value
swap	picojson/picojson.h	/^template <> inline void swap(picojson::value &x, picojson::value &y) {$/;"	f	namespace:std
swap_number	alsa/sbin/alsaconf	/^swap_number () {$/;"	f
sync_in	alsa/include/alsa/sound/hdspm.h	/^			uint8_t sync_in; \/* enum hdspm_sync *\/$/;"	m	struct:hdspm_status::__anon11::__anon12
sync_madi	alsa/include/alsa/sound/hdspm.h	/^			uint8_t sync_madi; \/* enum hdspm_sync *\/$/;"	m	struct:hdspm_status::__anon11::__anon12
sync_tco	alsa/include/alsa/sound/hdspm.h	/^			uint8_t sync_tco; \/* enum hdspm_sync *\/$/;"	m	struct:hdspm_status::__anon11::__anon12
sync_wc	alsa/include/alsa/sound/hdspm.h	/^			uint8_t sync_wc; \/* enum hdspm_sync *\/$/;"	m	struct:hdspm_status::__anon11::__anon12
syncsource_madi	alsa/include/alsa/sound/hdspm.h	/^	syncsource_madi = 1,$/;"	e	enum:hdspm_syncsource
syncsource_none	alsa/include/alsa/sound/hdspm.h	/^	syncsource_none = 4$/;"	e	enum:hdspm_syncsource
syncsource_sync	alsa/include/alsa/sound/hdspm.h	/^	syncsource_sync = 3,$/;"	e	enum:hdspm_syncsource
syncsource_tco	alsa/include/alsa/sound/hdspm.h	/^	syncsource_tco = 2,$/;"	e	enum:hdspm_syncsource
syncsource_wc	alsa/include/alsa/sound/hdspm.h	/^	syncsource_wc = 0,$/;"	e	enum:hdspm_syncsource
system_clock_mode	alsa/include/alsa/sound/hdsp.h	/^	unsigned char system_clock_mode;$/;"	m	struct:_snd_hdsp_config_info
system_clock_mode	alsa/include/alsa/sound/hdspm.h	/^	unsigned char system_clock_mode;$/;"	m	struct:hdspm_config
system_sample_rate	alsa/include/alsa/sound/hdsp.h	/^	unsigned int system_sample_rate;$/;"	m	struct:_snd_hdsp_config_info
system_sample_rate	alsa/include/alsa/sound/hdspm.h	/^	unsigned int system_sample_rate;$/;"	m	struct:hdspm_config
t_agent	agent.h	/^	t_agent(const std::function<std::ostream&(t_severity)>& a_log, const picojson::value& a_profile, const picojson::value& a_sounds) : v_log(a_log), v_profile(a_profile)$/;"	f	class:t_agent
t_agent	agent.h	/^class t_agent$/;"	c
t_alert	session.h	/^		t_alert(const std::string& a_type, const std::string& a_at) : v_type(a_type), v_at(a_at)$/;"	f	class:t_session::t_alert
t_alert	session.h	/^	class t_alert$/;"	c	class:t_session
t_attached_audio	session.h	/^		t_attached_audio(t_session& a_session, t_task& a_task, const std::string& a_id) : v_session(a_session), v_task(a_task), v_i(v_session.v_id2audio.emplace(a_id, this).first)$/;"	f	struct:t_session::t_attached_audio
t_attached_audio	session.h	/^	struct t_attached_audio \/\/附件音频$/;"	s	class:t_session
t_audio_decoder	audio.h	/^	t_audio_decoder(t_audio_source& a_source) : v_format(a_source.v_format), v_index(a_source.v_index), v_codec(a_source.v_codec)$/;"	f	class:t_audio_decoder
t_audio_decoder	audio.h	/^class t_audio_decoder$/;"	c
t_audio_source	audio.h	/^class t_audio_source$/;"	c
t_audio_target	audio.h	/^	t_audio_target()$/;"	f	class:t_audio_target
t_audio_target	audio.h	/^class t_audio_target$/;"	c
t_callback_audio_source	audio.h	/^	t_callback_audio_source(std::function<int(uint8_t*, int)>&& a_read) : v_read(std::move(a_read))$/;"	f	class:t_callback_audio_source
t_callback_audio_source	audio.h	/^class t_callback_audio_source : public t_audio_source$/;"	c
t_channel	session.h	/^		t_channel(t_task& a_task) : v_task(a_task)$/;"	f	struct:t_session::t_channel
t_channel	session.h	/^	struct t_channel$/;"	s	class:t_session
t_get	json.h	/^struct t_get$/;"	s
t_http10	tiny_http.h	/^	t_http10(const std::string& a_url)$/;"	f	struct:t_http10
t_http10	tiny_http.h	/^struct t_http10$/;"	s
t_multipart	multipart.h	/^	t_multipart(T_target& a_target, const std::string& a_boundary) : v_target(a_target), v_boundary("\\r\\n--" + a_boundary)$/;"	f	class:t_multipart
t_multipart	multipart.h	/^class t_multipart$/;"	c
t_null_buffer	main.cpp	/^struct t_null_buffer : std::streambuf$/;"	s	file:
t_parser	session.h	/^		t_parser(t_session& a_session, const std::string& a_boundary) : v_session(a_session), v_multipart(*this, a_boundary)$/;"	f	struct:t_session::t_parser
t_parser	session.h	/^	struct t_parser$/;"	s	class:t_session
t_scheduler	scheduler.h	/^	t_scheduler(boost::asio::io_service& a_io) : boost::asio::io_service::strand(a_io)$/;"	f	class:t_scheduler
t_scheduler	scheduler.h	/^class t_scheduler : public boost::asio::io_service::strand$/;"	c
t_session	session.h	/^	t_session(t_scheduler& a_scheduler, const std::function<std::ostream&(t_severity)>& a_log, $/;"	f	class:t_session
t_session	session.h	/^class t_session$/;"	c
t_set	json.h	/^struct t_set$/;"	s
t_severity	session.h	/^enum t_severity$/;"	g
t_stop	scheduler.h	/^	class t_stop$/;"	c	class:t_scheduler
t_task	scheduler.h	/^	t_task(boost::asio::yield_context& a_yield, boost::asio::io_service& a_io) : v_yield(a_yield), v_timer(a_io)$/;"	f	class:t_task
t_task	scheduler.h	/^class t_task$/;"	c
t_url_audio_source	audio.h	/^	t_url_audio_source(const char* a_url)$/;"	f	struct:t_url_audio_source
t_url_audio_source	audio.h	/^struct t_url_audio_source : t_audio_source$/;"	s
tag	alsa/include/alsa/seq_event.h	/^	unsigned char tag;		\/**< tag *\/$/;"	m	struct:snd_seq_event
target_type	Makefile	/^target_type=module$/;"	m
tcpServerRun	tcpserver.cpp	/^int tcpServerRun(t_agent *a_agent)$/;"	f
tcpServerSetClientId	tcpserver.cpp	/^void tcpServerSetClientId(std::string &clientid)$/;"	f
test_level	picojson/picotest/picotest.c	/^static int test_level = 0;$/;"	v	file:
test_t	picojson/picotest/picotest.c	/^struct test_t {$/;"	s	file:
texts	alsa/include/alsa/sound/asoc.h	/^	char texts[SND_SOC_TPLG_NUM_TEXTS][SNDRV_CTL_ELEM_ID_NAME_MAXLEN];$/;"	m	struct:snd_soc_tplg_enum_control
texts	alsa/include/alsa/topology.h	/^	const char **texts;	\/*!< control text items *\/$/;"	m	struct:snd_tplg_enum_template
thread_pool_size	Simple-WebSocket-Server/server_ws.hpp	/^            size_t thread_pool_size=1;$/;"	m	class:SimpleWeb::SocketServerBase::Config
threads	Simple-WebSocket-Server/server_ws.hpp	/^        std::vector<std::thread> threads;$/;"	m	class:SimpleWeb::SocketServerBase
tick	alsa/include/alsa/seq_event.h	/^	snd_seq_tick_time_t tick;	\/**< tick-time *\/$/;"	m	union:snd_seq_timestamp
ticks	alsa/include/alsa/timer.h	/^        unsigned int ticks;		\/**< count of happened ticks *\/$/;"	m	struct:_snd_timer_read
time	alsa/include/alsa/seq_event.h	/^		snd_seq_timestamp_t time;	\/**< time *\/$/;"	m	union:snd_seq_ev_queue_control::__anon13
time	alsa/include/alsa/seq_event.h	/^		snd_seq_timestamp_t time;	\/**< timestamp *\/$/;"	m	union:snd_seq_event::__anon14
time	alsa/include/alsa/seq_event.h	/^	snd_seq_timestamp_t time;	\/**< schedule time *\/$/;"	m	struct:snd_seq_event
time	alsa/include/alsa/seq_event.h	/^	struct snd_seq_real_time time;	\/**< real-time *\/$/;"	m	union:snd_seq_timestamp	typeref:struct:snd_seq_timestamp::snd_seq_real_time
timeout_idle	Simple-WebSocket-Server/server_ws.hpp	/^            size_t timeout_idle=0;$/;"	m	class:SimpleWeb::SocketServerBase::Config
timeout_request	Simple-WebSocket-Server/server_ws.hpp	/^            size_t timeout_request=5;$/;"	m	class:SimpleWeb::SocketServerBase::Config
timer_idle	Simple-WebSocket-Server/server_ws.hpp	/^            std::unique_ptr<boost::asio::deadline_timer> timer_idle;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
timer_idle_cancel	Simple-WebSocket-Server/server_ws.hpp	/^        void timer_idle_cancel(const std::shared_ptr<Connection> &connection) const {$/;"	f	class:SimpleWeb::SocketServerBase
timer_idle_expired_function	Simple-WebSocket-Server/server_ws.hpp	/^        void timer_idle_expired_function(const std::shared_ptr<Connection> &connection) const {$/;"	f	class:SimpleWeb::SocketServerBase
timer_idle_init	Simple-WebSocket-Server/server_ws.hpp	/^        void timer_idle_init(const std::shared_ptr<Connection> &connection) {$/;"	f	class:SimpleWeb::SocketServerBase
timer_idle_reset	Simple-WebSocket-Server/server_ws.hpp	/^        void timer_idle_reset(const std::shared_ptr<Connection> &connection) const {$/;"	f	class:SimpleWeb::SocketServerBase
timespec	alsa/include/alsa/global.h	/^struct timespec {$/;"	s
timeval	alsa/include/alsa/global.h	/^struct timeval {$/;"	s
tlv	alsa/include/alsa/control_external.h	/^	} tlv;$/;"	m	struct:snd_ctl_ext	typeref:union:snd_ctl_ext::__anon22
tlv	alsa/include/alsa/sound/asoc.h	/^	struct snd_soc_tplg_ctl_tlv tlv;$/;"	m	struct:snd_soc_tplg_ctl_hdr	typeref:struct:snd_soc_tplg_ctl_hdr::snd_soc_tplg_ctl_tlv
tlv	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int *tlv;$/;"	m	struct:__anon3
tlv	alsa/include/alsa/topology.h	/^	struct snd_tplg_tlv_template *tlv; \/*!< non NULL means we have TLV data *\/$/;"	m	struct:snd_tplg_ctl_template	typeref:struct:snd_tplg_ctl_template::snd_tplg_tlv_template
to_hex_string	Simple-WebSocket-Server/crypto.hpp	/^        static std::string to_hex_string(const std::string &input) {$/;"	f	class:SimpleWeb::Crypto
to_str	picojson/picojson.h	/^inline std::string value::to_str() const {$/;"	f	class:picojson::value
token	alsa/include/alsa/sound/asoc.h	/^	__le32 token;$/;"	m	struct:snd_soc_tplg_vendor_string_elem
token	alsa/include/alsa/sound/asoc.h	/^	__le32 token;$/;"	m	struct:snd_soc_tplg_vendor_uuid_elem
token	alsa/include/alsa/sound/asoc.h	/^	__le32 token;$/;"	m	struct:snd_soc_tplg_vendor_value_elem
tomtom	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char tomtom;$/;"	m	struct:snd_dm_fm_params
tram_addr_map	alsa/include/alsa/sound/emu10k1.h	/^	uint32_t *tram_addr_map;	\/* map initializers *\/$/;"	m	struct:__anon4
tram_data_map	alsa/include/alsa/sound/emu10k1.h	/^	uint32_t *tram_data_map;	\/* data initializers *\/$/;"	m	struct:__anon4
tram_start	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int tram_start;	\/* ring buffer position in TRAM (in samples) *\/$/;"	m	struct:__anon6
tram_valid	alsa/include/alsa/sound/emu10k1.h	/^	unsigned long tram_valid[0x100\/(sizeof(unsigned long)*8)]; \/* bitmask of valid initializers *\/$/;"	m	struct:__anon4
transfer	alsa/include/alsa/pcm_extplug.h	/^	snd_pcm_sframes_t (*transfer)(snd_pcm_extplug_t *ext,$/;"	m	struct:snd_pcm_extplug_callback
transfer	alsa/include/alsa/pcm_ioplug.h	/^	snd_pcm_sframes_t (*transfer)(snd_pcm_ioplug_t *io,$/;"	m	struct:snd_pcm_ioplug_callback
translation	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int translation;	\/* translation type (EMU10K1_GPR_TRANSLATION*) *\/$/;"	m	struct:__anon3
tstamp	alsa/include/alsa/timer.h	/^	snd_htimestamp_t tstamp;	\/**< Time stamp of each event *\/$/;"	m	struct:_snd_timer_tread
tv_nsec	alsa/include/alsa/global.h	/^	long		tv_nsec;	\/* nanoseconds *\/$/;"	m	struct:timespec
tv_nsec	alsa/include/alsa/seq_event.h	/^	unsigned int tv_nsec;		\/**< nanoseconds *\/$/;"	m	struct:snd_seq_real_time
tv_sec	alsa/include/alsa/global.h	/^	time_t		tv_sec;		\/* seconds *\/$/;"	m	struct:timespec
tv_sec	alsa/include/alsa/global.h	/^	time_t		tv_sec;		\/* seconds *\/$/;"	m	struct:timeval
tv_sec	alsa/include/alsa/seq_event.h	/^	unsigned int tv_sec;		\/**< seconds *\/$/;"	m	struct:snd_seq_real_time
tv_usec	alsa/include/alsa/global.h	/^	long		tv_usec;	\/* microseconds *\/$/;"	m	struct:timeval
type	alsa/include/alsa/pcm.h	/^	enum snd_pcm_chmap_type type;	\/**< channel map type *\/$/;"	m	struct:snd_pcm_chmap_query	typeref:enum:snd_pcm_chmap_query::snd_pcm_chmap_type
type	alsa/include/alsa/seq_event.h	/^	snd_seq_event_type_t type;	\/**< event type *\/$/;"	m	struct:snd_seq_event
type	alsa/include/alsa/sound/asoc.h	/^	__le32 type;		\/* SND_SOC_TPLG_TYPE_ *\/$/;"	m	struct:snd_soc_tplg_hdr
type	alsa/include/alsa/sound/asoc.h	/^	__le32 type;	\/* SNDRV_CTL_TLVT_*, type of TLV *\/$/;"	m	struct:snd_soc_tplg_ctl_tlv
type	alsa/include/alsa/sound/asoc.h	/^	__le32 type;	\/* SND_SOC_TPLG_TUPLE_TYPE_ *\/$/;"	m	struct:snd_soc_tplg_vendor_array
type	alsa/include/alsa/sound/asoc.h	/^	__le32 type;$/;"	m	struct:snd_soc_tplg_ctl_hdr
type	alsa/include/alsa/topology.h	/^	enum snd_tplg_type type;	\/*!< template object type *\/$/;"	m	struct:snd_tplg_obj_template	typeref:enum:snd_tplg_obj_template::snd_tplg_type
type	alsa/include/alsa/topology.h	/^	int type;		\/*!< Control type *\/$/;"	m	struct:snd_tplg_ctl_template
type	alsa/include/alsa/topology.h	/^	int type;	 \/*!< TLV type SNDRV_CTL_TLVT_ *\/$/;"	m	struct:snd_tplg_tlv_template
type	tcpserver.cpp	/^    CONFIG_RKEY_TYPE        type;$/;"	m	struct:_remote_cmd_	file:
type_	picojson/picojson.h	/^  int type_;$/;"	m	class:picojson::value
type_requested	alsa/include/alsa/pcm.h	/^	unsigned int type_requested:4;$/;"	m	struct:_snd_pcm_audio_tstamp_config
u_	picojson/picojson.h	/^  _storage u_;$/;"	m	class:picojson::value
ungetc	picojson/picojson.h	/^  void ungetc() {$/;"	f	class:picojson::input
unused	alsa/include/alsa/seq_event.h	/^	unsigned char unused[3];		\/**< reserved *\/$/;"	m	struct:snd_seq_ev_queue_control
unused	alsa/include/alsa/seq_event.h	/^	unsigned char unused[3];	\/**< reserved *\/$/;"	m	struct:snd_seq_ev_ctrl
update	alsa/include/alsa/pcm.h	/^	void (*update)(snd_pcm_scope_t *scope);$/;"	m	struct:_snd_pcm_scope_ops
update	alsa/sbin/alsa-info.sh	/^update() {$/;"	f
upgrade	Simple-WebSocket-Server/server_ws.hpp	/^        void upgrade(const std::shared_ptr<Connection> &connection) {$/;"	f	class:SimpleWeb::SocketServerBase
usage	alsa/sbin/alsaconf	/^usage() {$/;"	f
uuid	alsa/include/alsa/sound/asoc.h	/^		struct snd_soc_tplg_vendor_uuid_elem uuid[0];$/;"	m	union:snd_soc_tplg_vendor_array::__anon8	typeref:struct:snd_soc_tplg_vendor_array::__anon8::snd_soc_tplg_vendor_uuid_elem
uuid	alsa/include/alsa/sound/asoc.h	/^	char uuid[16];$/;"	m	struct:snd_soc_tplg_vendor_uuid_elem
v_actions	scheduler.h	/^	std::deque<std::function<void(boost::asio::yield_context&)>> v_actions;$/;"	m	class:t_task
v_alerts	session.h	/^	std::map<std::string, t_alert> v_alerts;$/;"	m	class:t_session
v_alerts_changed	session.h	/^	std::function<void()> v_alerts_changed;$/;"	m	class:t_session
v_alerts_duration	session.h	/^	size_t v_alerts_duration = 60;$/;"	m	class:t_session
v_at	session.h	/^		std::string v_at;   \/\/时间$/;"	m	class:t_session::t_alert
v_audio	session.h	/^		t_attached_audio* v_audio;$/;"	m	struct:t_session::t_parser
v_boundary	multipart.h	/^	std::string v_boundary;$/;"	m	class:t_multipart
v_boundary_audio	session.h	/^	const std::string v_boundary_audio =$/;"	m	class:t_session
v_boundary_metadata	session.h	/^	const std::string v_boundary_metadata =$/;"	m	class:t_session
v_boundary_terminator	session.h	/^	const std::string v_boundary_terminator = "\\r\\n--this-is-a-boundary--\\r\\n";$/;"	m	class:t_session
v_buffer	multipart.h	/^	char v_buffer[1024];$/;"	m	class:t_multipart
v_buffer	tiny_http.h	/^	boost::asio::streambuf v_buffer;$/;"	m	struct:t_http10
v_capture	agent.h	/^	std::function<void()> v_capture;$/;"	m	class:t_agent
v_capture	session.h	/^	std::function<void()> v_capture;$/;"	m	class:t_session
v_capture_auto	session.h	/^	bool v_capture_auto = true;$/;"	m	class:t_session
v_capture_busy	session.h	/^	bool v_capture_busy = false;$/;"	m	class:t_session
v_capture_exceeded	session.h	/^	std::chrono::steady_clock::time_point v_capture_exceeded;$/;"	m	class:t_session
v_capture_force	session.h	/^	bool v_capture_force = false;$/;"	m	class:t_session
v_capture_integral	session.h	/^	size_t v_capture_integral = 0;$/;"	m	class:t_session
v_capture_threshold	session.h	/^	size_t v_capture_threshold = 32 * 1024;$/;"	m	class:t_session
v_code	tiny_http.h	/^	size_t v_code;$/;"	m	struct:t_http10
v_codec	audio.h	/^	AVCodecContext* v_codec = nullptr;$/;"	m	class:t_audio_source
v_codec	audio.h	/^	AVCodecContext* v_codec;$/;"	m	class:t_audio_decoder
v_content	session.h	/^		void (t_parser::*v_content)(const char*, size_t);$/;"	m	struct:t_session::t_parser
v_content	session.h	/^	t_channel* v_content = nullptr;$/;"	m	class:t_session
v_content_can_play_in_background	session.h	/^	bool v_content_can_play_in_background = true; \/\/false;$/;"	m	class:t_session
v_content_id	multipart.h	/^	std::string v_content_id;$/;"	m	class:t_multipart
v_content_pausing	session.h	/^	bool v_content_pausing = false;$/;"	m	class:t_session
v_content_stuttering	session.h	/^	std::chrono::steady_clock::time_point v_content_stuttering;$/;"	m	class:t_session
v_content_type	multipart.h	/^	std::string v_content_type;$/;"	m	class:t_multipart
v_data	session.h	/^		boost::asio::streambuf v_data;$/;"	m	struct:t_session::t_attached_audio
v_dialog	session.h	/^	t_channel* v_dialog = nullptr;$/;"	m	class:t_session
v_dialog_active	session.h	/^	bool v_dialog_active = false;$/;"	m	class:t_session
v_dialog_id	session.h	/^	unsigned int v_dialog_id = 0;$/;"	m	class:t_session
v_directives	session.h	/^		std::deque<std::function<void()>> v_directives; \/\/指令队列$/;"	m	struct:t_session::t_channel
v_expecting_dialog_id	session.h	/^	std::string v_expecting_dialog_id;$/;"	m	class:t_session
v_expecting_speech	session.h	/^	std::function<void()> v_expecting_speech;$/;"	m	class:t_session
v_expecting_timeout	session.h	/^	boost::asio::steady_timer* v_expecting_timeout = nullptr;$/;"	m	class:t_session
v_finish	session.h	/^		void (t_parser::*v_finish)() = &t_parser::f_ignore_finish;$/;"	m	struct:t_session::t_parser
v_finished	session.h	/^		bool v_finished = false;$/;"	m	struct:t_session::t_attached_audio
v_format	audio.h	/^	AVFormatContext* v_format = nullptr;$/;"	m	class:t_audio_source
v_format	audio.h	/^	AVFormatContext* v_format;$/;"	m	class:t_audio_decoder
v_frame	audio.h	/^	AVFrame* v_frame = nullptr;$/;"	m	class:t_audio_decoder
v_header	session.h	/^	nghttp2::asio_http2::header_map v_header; \/\/http2头字段$/;"	m	class:t_session
v_headers	tiny_http.h	/^	std::vector<std::string> v_headers;$/;"	m	struct:t_http10
v_host	tiny_http.h	/^	std::string v_host;$/;"	m	struct:t_http10
v_http	tiny_http.h	/^	std::string v_http;$/;"	m	struct:t_http10
v_i	session.h	/^		std::map<std::string, t_attached_audio*>::iterator v_i;$/;"	m	struct:t_session::t_attached_audio
v_id2audio	session.h	/^	std::map<std::string, t_attached_audio*> v_id2audio;$/;"	m	class:t_session
v_index	audio.h	/^	int v_index = 0;$/;"	m	class:t_audio_source
v_index	audio.h	/^	int v_index;$/;"	m	class:t_audio_decoder
v_io	audio.h	/^	AVIOContext* v_io = nullptr;$/;"	m	class:t_callback_audio_source
v_last	multipart.h	/^	size_t v_last = 2;;$/;"	m	class:t_multipart
v_last_activity	session.h	/^	std::chrono::steady_clock::time_point v_last_activity;$/;"	m	class:t_session
v_line	multipart.h	/^	std::vector<char> v_line;$/;"	m	class:t_multipart
v_log	agent.h	/^	std::function<std::ostream&(t_severity)> v_log;$/;"	m	class:t_agent
v_log	session.h	/^	std::function<std::ostream&(t_severity)> v_log;$/;"	m	class:t_session
v_message	tiny_http.h	/^	std::string v_message;$/;"	m	struct:t_http10
v_message_id	session.h	/^	unsigned int v_message_id = 0;$/;"	m	class:t_session
v_metadata	session.h	/^		boost::asio::streambuf v_metadata;$/;"	m	struct:t_session::t_parser
v_multipart	session.h	/^		t_multipart<t_parser> v_multipart;$/;"	m	struct:t_session::t_parser
v_name	json.h	/^	std::string v_name;$/;"	m	struct:t_get
v_name	json.h	/^	std::string v_name;$/;"	m	struct:t_set
v_offset	audio.h	/^	float v_offset = 0.0;$/;"	m	class:t_audio_target
v_online	session.h	/^	bool v_online = false;$/;"	m	class:t_session
v_open_audio_by_url	session.h	/^	std::function<t_audio_source*(const std::string&)> v_open_audio_by_url = [](auto& a_url)$/;"	m	class:t_session
v_open_sound	session.h	/^	std::function<std::function<void(bool)>(const std::string&)> v_open_sound; \/\/ 已经捆绑的定时器\/闹钟源$/;"	m	class:t_session
v_options_changed	agent.h	/^	std::function<void()> v_options_changed;$/;"	m	class:t_agent
v_options_changed	session.h	/^	std::function<void()> v_options_changed;$/;"	m	class:t_session
v_p	multipart.h	/^	char* v_p = v_buffer;$/;"	m	class:t_multipart
v_packet	audio.h	/^	AVPacket v_packet;$/;"	m	class:t_audio_decoder
v_parser	session.h	/^		t_parser* v_parser = nullptr; \/\/解析器$/;"	m	struct:t_session::t_attached_audio
v_path	tiny_http.h	/^	std::string v_path;$/;"	m	struct:t_http10
v_play	session.h	/^		std::function<void(bool)> v_play;$/;"	m	class:t_session::t_alert
v_playing	session.h	/^		std::string v_playing; \/\/token$/;"	m	struct:t_session::t_channel
v_processed	audio.h	/^	double v_processed = 0.0;$/;"	m	class:t_audio_target
v_profile	agent.h	/^	const picojson::value& v_profile;$/;"	m	class:t_agent
v_re_content_id	multipart.h	/^	static std::regex v_re_content_id;$/;"	m	class:t_multipart
v_re_content_type	multipart.h	/^	static std::regex v_re_content_type;$/;"	m	class:t_multipart
v_read	audio.h	/^	std::function<int(uint8_t*, int)> v_read;$/;"	m	class:t_callback_audio_source
v_recognizer	session.h	/^	t_task* v_recognizer = nullptr;$/;"	m	class:t_session
v_reconnecting	session.h	/^	boost::asio::steady_timer* v_reconnecting = nullptr; \/\/重连定时器$/;"	m	class:t_session
v_reconnecting_interval	session.h	/^	unsigned int v_reconnecting_interval = 1; \/\/重连间隔$/;"	m	class:t_session
v_refresh_retry_interval	agent.h	/^	size_t v_refresh_retry_interval = 1;$/;"	m	class:t_agent
v_remain	audio.h	/^	double v_remain = 0.0;$/;"	m	class:t_audio_target
v_scheduler	agent.h	/^	std::unique_ptr<t_scheduler> v_scheduler;$/;"	m	class:t_agent
v_scheduler	session.h	/^	t_scheduler& v_scheduler;			\/\/调度器$/;"	m	class:t_session
v_service	tiny_http.h	/^	std::string v_service;$/;"	m	struct:t_http10
v_session	agent.h	/^	std::unique_ptr<t_session> v_session;$/;"	m	class:t_agent
v_session	session.h	/^		t_session& v_session;$/;"	m	struct:t_session::t_attached_audio
v_session	session.h	/^		t_session& v_session;$/;"	m	struct:t_session::t_parser
v_session	session.h	/^	std::unique_ptr<nghttp2::asio_http2::client::session> v_session; \/\/会话控制$/;"	m	class:t_session
v_source	audio.h	/^	unsigned int v_source;$/;"	m	class:t_audio_target
v_speaker_changed	session.h	/^	std::function<void()> v_speaker_changed;$/;"	m	class:t_session
v_speaker_muted	session.h	/^	bool v_speaker_muted = false;$/;"	m	class:t_session
v_speaker_volume	session.h	/^	long v_speaker_volume = 100;$/;"	m	class:t_session
v_state_changed	agent.h	/^	std::function<void()> v_state_changed;$/;"	m	class:t_agent
v_state_changed	session.h	/^	std::function<void()> v_state_changed;$/;"	m	class:t_session
v_suffix	multipart.h	/^	const char* v_suffix;$/;"	m	class:t_multipart
v_target	multipart.h	/^	T_target& v_target;$/;"	m	class:t_multipart
v_target	session.h	/^		t_audio_target v_target; \/\/ 音频$/;"	m	struct:t_session::t_channel
v_task	session.h	/^		t_task& v_task; \/\/任务$/;"	m	struct:t_session::t_channel
v_task	session.h	/^		t_task& v_task;$/;"	m	struct:t_session::t_attached_audio
v_tasks	scheduler.h	/^	std::set<t_task*> v_tasks;  \/\/任务集合$/;"	m	class:t_scheduler
v_timer	scheduler.h	/^	boost::asio::steady_timer v_timer;$/;"	m	class:t_task
v_timer	session.h	/^		std::unique_ptr<boost::asio::system_timer> v_timer; \/\/定时器$/;"	m	class:t_session::t_alert
v_timers	scheduler.h	/^	std::set<std::unique_ptr<boost::asio::steady_timer>> v_timers;  \/\/定时器集合$/;"	m	class:t_scheduler
v_tls	session.h	/^	boost::asio::ssl::context v_tls;	\/\/tls$/;"	m	class:t_session
v_type	session.h	/^		std::string v_type;	\/\/类型$/;"	m	class:t_session::t_alert
v_value	json.h	/^	picojson::value& v_value;$/;"	m	struct:t_set
v_write	multipart.h	/^	size_t (t_multipart::*v_write)(const char*, size_t) = &t_multipart::f_write_ignore;$/;"	m	class:t_multipart
v_yield	scheduler.h	/^	boost::asio::yield_context& v_yield;$/;"	m	class:t_task
val	alsa/include/alsa/timer.h	/^	unsigned int val;		\/**< Event value *\/$/;"	m	struct:_snd_timer_tread
valid	alsa/include/alsa/pcm.h	/^	unsigned int valid:1;$/;"	m	struct:_snd_pcm_audio_tstamp_report
value	alsa/include/alsa/seq_event.h	/^		signed int value;		\/**< affected value (e.g. tempo) *\/$/;"	m	union:snd_seq_ev_queue_control::__anon13
value	alsa/include/alsa/seq_event.h	/^	signed int value;		\/**< control value *\/$/;"	m	struct:snd_seq_ev_ctrl
value	alsa/include/alsa/seq_event.h	/^	unsigned int value;	\/**< skew value *\/$/;"	m	struct:snd_seq_queue_skew
value	alsa/include/alsa/sound/asoc.h	/^		struct snd_soc_tplg_vendor_value_elem value[0];$/;"	m	union:snd_soc_tplg_vendor_array::__anon8	typeref:struct:snd_soc_tplg_vendor_array::__anon8::snd_soc_tplg_vendor_value_elem
value	alsa/include/alsa/sound/asoc.h	/^	__le32 value;$/;"	m	struct:snd_soc_tplg_vendor_value_elem
value	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int value[32];		\/* initial values *\/$/;"	m	struct:__anon3
value	picojson/picojson.h	/^class value {$/;"	c	namespace:picojson
value	picojson/picojson.h	/^inline value::value() : type_(null_type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(array &&a) : type_(array_type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(bool b) : type_(boolean_type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(const array &a) : type_(array_type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(const char *s) : type_(string_type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(const char *s, size_t len) : type_(string_type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(const object &o) : type_(object_type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(const std::string &s) : type_(string_type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(const value &x) : type_(x.type_), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(double n) : type_(number_type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(int type, bool) : type_(type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(int64_t i) : type_(int64_type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(object &&o) : type_(object_type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(std::string &&s) : type_(string_type), u_() {$/;"	f	class:picojson::value
value	picojson/picojson.h	/^inline value::value(value &&x) throw() : type_(null_type), u_() {$/;"	f	class:picojson::value
values	alsa/include/alsa/sound/asoc.h	/^	__le32 values[SND_SOC_TPLG_NUM_TEXTS * SNDRV_CTL_ELEM_ID_NAME_MAXLEN \/ 4];$/;"	m	struct:snd_soc_tplg_enum_control
values	alsa/include/alsa/topology.h	/^	const int **values;	\/*!< control value items *\/$/;"	m	struct:snd_tplg_enum_template
vcount	alsa/include/alsa/sound/emu10k1.h	/^	unsigned int vcount;		\/* visible count *\/$/;"	m	struct:__anon3
velocity	alsa/include/alsa/seq_event.h	/^	unsigned char velocity;		\/**< velocity *\/$/;"	m	struct:snd_seq_ev_note
vendor_type	alsa/include/alsa/sound/asoc.h	/^	__le32 vendor_type;	\/* optional vendor specific type info *\/$/;"	m	struct:snd_soc_tplg_hdr
vendor_type	alsa/include/alsa/topology.h	/^	int vendor_type;	\/*!< optional vendor specific type info *\/$/;"	m	struct:snd_tplg_obj_template
ver	alsa/include/alsa/mixer.h	/^	int ver;$/;"	m	struct:snd_mixer_selem_regopt
verbose	alsa/include/alsa/alisp.h	/^	int verbose: 1,$/;"	m	struct:alisp_cfg
version	alsa/include/alsa/control_external.h	/^	unsigned int version;$/;"	m	struct:snd_ctl_ext
version	alsa/include/alsa/pcm_extplug.h	/^	unsigned int version;$/;"	m	struct:snd_pcm_extplug
version	alsa/include/alsa/pcm_ioplug.h	/^	unsigned int version;$/;"	m	struct:snd_pcm_ioplug
version	alsa/include/alsa/pcm_rate.h	/^	unsigned int version;$/;"	m	struct:snd_pcm_rate_ops
version	alsa/include/alsa/sound/asoc.h	/^	__le32 version;		\/* optional vendor specific version details *\/$/;"	m	struct:snd_soc_tplg_hdr
version	alsa/include/alsa/sound/sb16_csp.h	/^	unsigned short version;		\/* version id: 0x10 - 0x1f *\/$/;"	m	struct:snd_sb_csp_info
version	alsa/include/alsa/sound/sscape_ioctl.h	/^  unsigned version;$/;"	m	struct:sscape_bootblock
version	alsa/include/alsa/topology.h	/^	int version;		\/*!< optional vendor specific version details *\/$/;"	m	struct:snd_tplg_obj_template
vib_depth	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char vib_depth;	\/* vibrato depth (1=hi) *\/$/;"	m	struct:snd_dm_fm_params
vibrato	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char vibrato;		\/* vibrato effect *\/$/;"	m	struct:snd_dm_fm_voice
voice	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char voice;		\/* FM voice (0 to 17) *\/$/;"	m	struct:snd_dm_fm_voice
voice	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char voice;	\/* 0-17 voice channel *\/$/;"	m	struct:snd_dm_fm_note
volume	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char volume;		\/* 6 bits: volume *\/$/;"	m	struct:snd_dm_fm_voice
vout	alsa/include/alsa/alisp.h	/^	snd_output_t *vout;	\/* verbose output *\/$/;"	m	struct:alisp_cfg
wakeup_is_init	agent.h	/^	bool wakeup_is_init = false;$/;"	m	class:t_agent
wakeup_ready	session.h	/^static int wakeup_ready = 0;$/;"	v
warning	alsa/include/alsa/alisp.h	/^	    warning: 1,$/;"	m	struct:alisp_cfg
waveform	alsa/include/alsa/sound/asound_fm.h	/^	unsigned char waveform;		\/* 3 bits: waveform shape *\/$/;"	m	struct:snd_dm_fm_voice
whiptail_wrapper	alsa/sbin/alsaconf	/^    whiptail_wrapper() {$/;"	f
widget	alsa/include/alsa/topology.h	/^		struct snd_tplg_widget_template *widget;	\/*!< DAPM widget *\/$/;"	m	union:snd_tplg_obj_template::__anon23	typeref:struct:snd_tplg_obj_template::__anon23::snd_tplg_widget_template
widget_elems	alsa/include/alsa/sound/asoc.h	/^	__le32 widget_elems;	\/* number of widget elements *\/$/;"	m	struct:snd_soc_tplg_manifest
withall	alsa/sbin/alsa-info.sh	/^withall() {$/;"	f
withalsactl	alsa/sbin/alsa-info.sh	/^withalsactl() {$/;"	f
withamixer	alsa/sbin/alsa-info.sh	/^withamixer() {$/;"	f
withaplay	alsa/sbin/alsa-info.sh	/^withaplay() {$/;"	f
withconfigs	alsa/sbin/alsa-info.sh	/^withconfigs() {$/;"	f
withdevices	alsa/sbin/alsa-info.sh	/^withdevices() {$/;"	f
withdmesg	alsa/sbin/alsa-info.sh	/^withdmesg() {$/;"	f
withlsmod	alsa/sbin/alsa-info.sh	/^withlsmod() {$/;"	f
withsysfs	alsa/sbin/alsa-info.sh	/^withsysfs() {$/;"	f
wordclock_sync_check	alsa/include/alsa/sound/hdsp.h	/^	unsigned char wordclock_sync_check;$/;"	m	struct:_snd_hdsp_config_info
wordclock_sync_check	alsa/include/alsa/sound/hdspm.h	/^	unsigned char wordclock_sync_check;$/;"	m	struct:hdspm_config
wout	alsa/include/alsa/alisp.h	/^	snd_output_t *wout;	\/* warning output *\/$/;"	m	struct:alisp_cfg
wr_pointer	ringbuffer.h	/^    int wr_pointer;$/;"	m	struct:__anon32
write_bytes	alsa/include/alsa/control_external.h	/^	int (*write_bytes)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, unsigned char *data,$/;"	m	struct:snd_ctl_ext_callback
write_enumerated	alsa/include/alsa/control_external.h	/^	int (*write_enumerated)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, unsigned int *items);$/;"	m	struct:snd_ctl_ext_callback
write_handshake	Simple-WebSocket-Server/server_ws.hpp	/^        void write_handshake(const std::shared_ptr<Connection> &connection, const std::shared_ptr<boost::asio::streambuf> &read_buffer) {$/;"	f	class:SimpleWeb::SocketServerBase
write_iec958	alsa/include/alsa/control_external.h	/^	int (*write_iec958)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, snd_aes_iec958_t *iec958);$/;"	m	struct:snd_ctl_ext_callback
write_integer	alsa/include/alsa/control_external.h	/^	int (*write_integer)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, long *value);$/;"	m	struct:snd_ctl_ext_callback
write_integer64	alsa/include/alsa/control_external.h	/^	int (*write_integer64)(snd_ctl_ext_t *ext, snd_ctl_ext_key_t key, int64_t *value);$/;"	m	struct:snd_ctl_ext_callback
ws_magic_string	Simple-WebSocket-Server/client_ws.hpp	/^        const std::string ws_magic_string="258EAFA5-E914-47DA-95CA-C5AB0DC85B11";$/;"	m	class:SimpleWeb::SocketClientBase
ws_magic_string	Simple-WebSocket-Server/server_ws.hpp	/^        const std::string ws_magic_string="258EAFA5-E914-47DA-95CA-C5AB0DC85B11";$/;"	m	class:SimpleWeb::SocketServerBase
xecho	alsa/sbin/alsaconf	/^  xecho() {$/;"	f
xlr_breakout_cable	alsa/include/alsa/sound/hdsp.h	/^	unsigned char xlr_breakout_cable;$/;"	m	struct:_snd_hdsp_config_info
xmsg	alsa/sbin/alsaconf	/^xmsg() {$/;"	f
~SocketClientBase	Simple-WebSocket-Server/client_ws.hpp	/^        virtual ~SocketClientBase() { connection.reset(); }$/;"	f	class:SimpleWeb::SocketClientBase
~SocketServerBase	Simple-WebSocket-Server/server_ws.hpp	/^        virtual ~SocketServerBase() {}$/;"	f	class:SimpleWeb::SocketServerBase
~t_agent	agent.h	/^	~t_agent()$/;"	f	class:t_agent
~t_attached_audio	session.h	/^		~t_attached_audio()$/;"	f	struct:t_session::t_attached_audio
~t_audio_decoder	audio.h	/^	~t_audio_decoder()$/;"	f	class:t_audio_decoder
~t_audio_source	audio.h	/^	virtual ~t_audio_source()$/;"	f	class:t_audio_source
~t_audio_target	audio.h	/^	~t_audio_target()$/;"	f	class:t_audio_target
~t_callback_audio_source	audio.h	/^	virtual ~t_callback_audio_source()$/;"	f	class:t_callback_audio_source
~value	picojson/picojson.h	/^inline value::~value() {$/;"	f	class:picojson::value
